
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
  char text[STATUS_CODE_MAX_TEXT_LEN];
  get_status_code_text(code, text);
  LOG_ERR("%s", text);
}

void get_status_code_text(status_code_t code, char* text){
   0:	a8 1c 00 20 b9 2d 00 00 79 69 00 00 8d 2d 00 00     ... .-..yi...-..
  switch(code){
  10:	8d 2d 00 00 8d 2d 00 00 8d 2d 00 00 00 00 00 00     .-...-...-......
	...
  2c:	25 27 00 00 8d 2d 00 00 00 00 00 00 dd 26 00 00     %'...-.......&..
  3c:	8d 2d 00 00                                         .-..

00000040 <_irq_vector_table>:
  40:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  50:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  60:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  70:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  80:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  90:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  a0:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  b0:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  c0:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  d0:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  e0:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..
  f0:	a1 27 00 00 a1 27 00 00 a1 27 00 00 a1 27 00 00     .'...'...'...'..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <__data_size+0x103>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <__data_size+0xd>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
      break;
    case(STATUS_ERROR_ALREADY_INITIALIZED):
      strcpy(text, "Already initialized");
      break;
    case(STATUS_ERROR_I_AM_A_TEAPOT):
      strcpy(text, "Don't look at me, I'm just a theapot!!");
     176:	0c22      	lsrs	r2, r4, #16
      strcpy(text, "Success");
     178:	fb08 c319 	mls	r3, r8, r9, ip
      break;
    case(STATUS_ERROR_DEVICE_NOT_FOUND):
      strcpy(text, "Device not found");
      break;
    default:
      strcpy(text, "Unknow error");
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
      strcpy(text, "Invalid argument length");
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
      strcpy(text, "Invalid address");
     184:	459a      	cmp	sl, r3
      strcpy(text, "Permission denied");
     186:	d928      	bls.n	1da <__data_size+0x5>
     188:	18eb      	adds	r3, r5, r3
      strcpy(text, "Address already in use");
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
      strcpy(text, "Can't assign requested address. Addres unavailable");
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
      strcpy(text, "Operation already in progress");
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
      strcpy(text, "Invalid file");
     198:	442b      	add	r3, r5
      strcpy(text, "Invalid message");
     19a:	eba3 030a 	sub.w	r3, r3, sl
      strcpy(text, "Process is busy");
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
      strcpy(text, "Operation cancled");
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
      strcpy(text, "Connection aborted");
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
      strcpy(text, "Connection refused");
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
      strcpy(text, "Connection reset by peer");
     1b0:	45a6      	cmp	lr, r4
      strcpy(text, "Device not connected");
     1b2:	d914      	bls.n	1de <__data_size+0x9>
     1b4:	192c      	adds	r4, r5, r4
      strcpy(text, "Destination address required");
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
      strcpy(text, "Argument too large");
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
      strcpy(text, "File already exists");
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
      strcpy(text, "Unsuported address");
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
      strcpy(text, "File too large");
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      strcpy(text, "Host is down");
     1cc:	b11e      	cbz	r6, 1d6 <__data_size+0x1>
      strcpy(text, "HTTP error");
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
      strcpy(text, "Invalid argument(s)");
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
      strcpy(text, "I/O error");
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      strcpy(text, "Already connected");
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
      strcpy(text, "Is a directory");
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
      strcpy(text, "No buffer space available");
     1e2:	b902      	cbnz	r2, 1e6 <__data_size+0x11>
     1e4:	deff      	udf	#255	; 0xff
      strcpy(text, "Missing expected data");
     1e6:	bb87      	cbnz	r7, 24a <__data_size+0x75>
     1e8:	1a83      	subs	r3, r0, r2
      strcpy(text, "No such device or device invalid");
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
      strcpy(text, "Invalid path, no such file or directory");
     1f0:	b2aa      	uxth	r2, r5
      strcpy(text, "Invalid argument format");
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
      strcpy(text, "No spce left on device");
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
      strcpy(text, "Value/buffer overflow");
     1fc:	fb0c f802 	mul.w	r8, ip, r2
      strcpy(text, "Timeout");
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
      strcpy(text, "Already initialized");
     204:	4598      	cmp	r8, r3
      strcpy(text, "Service is not yet initialized");
     206:	d963      	bls.n	2d0 <__data_size+0xfb>
     208:	18eb      	adds	r3, r5, r3
      strcpy(text, "Device not ready");
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
      strcpy(text, "Device not found");
     20e:	d204      	bcs.n	21a <__data_size+0x45>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <__data_size+0x45>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <__data_size+0xff>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <__data_size+0x71>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <__data_size+0x71>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <__data_size+0xf3>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <__data_size+0xbd>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <__data_size+0xbd>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <__data_size+0xf7>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <__data_size+0xe9>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <__data_size+0xe9>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <__data_size+0x17>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <__data_size+0xbd>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <__data_size+0xe9>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <__data_size+0x45>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <__data_size+0x71>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <__data_size+0x113>
     2dc:	b10e      	cbz	r6, 2e2 <__data_size+0x10d>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <__data_size+0x1>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <__data_size+0x121>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <__data_size+0x1>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xce>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd2>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     3a2:	d106      	bne.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <__data_size+0x1>

000003da <strcmp>:
     3da:	f810 2b01 	ldrb.w	r2, [r0], #1
     3de:	f811 3b01 	ldrb.w	r3, [r1], #1
     3e2:	2a01      	cmp	r2, #1
     3e4:	bf28      	it	cs
     3e6:	429a      	cmpcs	r2, r3
     3e8:	d0f7      	beq.n	3da <strcmp>
     3ea:	1ad0      	subs	r0, r2, r3
     3ec:	4770      	bx	lr

000003ee <strlen>:
     3ee:	4603      	mov	r3, r0
     3f0:	f813 2b01 	ldrb.w	r2, [r3], #1
     3f4:	2a00      	cmp	r2, #0
     3f6:	d1fb      	bne.n	3f0 <strlen+0x2>
     3f8:	1a18      	subs	r0, r3, r0
     3fa:	3801      	subs	r0, #1
     3fc:	4770      	bx	lr
	...

00000400 <main>:
#include "buildin-led.hpp"

LOG_MODULE_REGISTER(app, CONFIG_LOG_DEFAULT_LEVEL);

void main(void)
{
     400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#endif

static inline void z_cbprintf_wcpy(int *dst, int *src, size_t len)
{
	for (size_t i = 0; i < len; i++) {
		dst[i] = src[i];
     402:	4b0a      	ldr	r3, [pc, #40]	; (42c <main+0x2c>)
     404:	9305      	str	r3, [sp, #20]
  LOG_INF("Application started!");
     406:	2302      	movs	r3, #2
     408:	9304      	str	r3, [sp, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
     40a:	4809      	ldr	r0, [pc, #36]	; (430 <main+0x30>)
     40c:	2300      	movs	r3, #0
     40e:	aa04      	add	r2, sp, #16
     410:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     414:	f006 fa58 	bl	68c8 <z_impl_z_log_msg2_static_create>
  buildin_led_init();
     418:	f000 f80c 	bl	434 <_Z16buildin_led_initv>
  while (true)
  {
    buildin_led_toggle();
     41c:	f000 f824 	bl	468 <_Z18buildin_led_togglev>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     420:	2100      	movs	r1, #0
     422:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     426:	f005 fa47 	bl	58b8 <z_impl_k_sleep>
     42a:	e7f7      	b.n	41c <main+0x1c>
     42c:	000076d8 	.word	0x000076d8
     430:	00007438 	.word	0x00007438

00000434 <_Z16buildin_led_initv>:
#endif

bool led_is_on = true;
const struct device *dev;

void buildin_led_init(){
     434:	b510      	push	{r4, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     436:	480a      	ldr	r0, [pc, #40]	; (460 <_Z16buildin_led_initv+0x2c>)
     438:	f004 fbd0 	bl	4bdc <z_impl_device_get_binding>
	int ret;

	dev = device_get_binding(LED0);
     43c:	4a09      	ldr	r2, [pc, #36]	; (464 <_Z16buildin_led_initv+0x30>)
     43e:	6010      	str	r0, [r2, #0]
	if (dev == NULL) {
     440:	b160      	cbz	r0, 45c <_Z16buildin_led_initv+0x28>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     442:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     444:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     446:	6813      	ldr	r3, [r2, #0]
     448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     44c:	6013      	str	r3, [r2, #0]

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
		return;
	}
}
     44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	return api->pin_configure(port, pin, flags);
     452:	680b      	ldr	r3, [r1, #0]
     454:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
     458:	211c      	movs	r1, #28
     45a:	4718      	bx	r3
     45c:	bd10      	pop	{r4, pc}
     45e:	bf00      	nop
     460:	000076f1 	.word	0x000076f1
     464:	20000840 	.word	0x20000840

00000468 <_Z18buildin_led_togglev>:

void buildin_led_toggle(){
  LOG_DBG("Toggle LED %s", dev->name);
  gpio_pin_set(dev, PIN, (int)led_is_on);
     468:	4b0c      	ldr	r3, [pc, #48]	; (49c <_Z18buildin_led_togglev+0x34>)
     46a:	6818      	ldr	r0, [r3, #0]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     46c:	6902      	ldr	r2, [r0, #16]
void buildin_led_toggle(){
     46e:	b510      	push	{r4, lr}
  gpio_pin_set(dev, PIN, (int)led_is_on);
     470:	4c0b      	ldr	r4, [pc, #44]	; (4a0 <_Z18buildin_led_togglev+0x38>)
     472:	6812      	ldr	r2, [r2, #0]
     474:	7823      	ldrb	r3, [r4, #0]
     476:	00d2      	lsls	r2, r2, #3
		value = (value != 0) ? 0 : 1;
     478:	bf48      	it	mi
     47a:	f083 0301 	eormi.w	r3, r3, #1
	if (value != 0)	{
     47e:	b14b      	cbz	r3, 494 <_Z18buildin_led_togglev+0x2c>
	return api->port_set_bits_raw(port, pins);
     480:	6883      	ldr	r3, [r0, #8]
     482:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     484:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     488:	4798      	blx	r3
  led_is_on = !led_is_on;
     48a:	7823      	ldrb	r3, [r4, #0]
     48c:	f083 0301 	eor.w	r3, r3, #1
     490:	7023      	strb	r3, [r4, #0]
}
     492:	bd10      	pop	{r4, pc}
     494:	6883      	ldr	r3, [r0, #8]
     496:	691b      	ldr	r3, [r3, #16]
     498:	e7f4      	b.n	484 <_Z18buildin_led_togglev+0x1c>
     49a:	bf00      	nop
     49c:	20000840 	.word	0x20000840
     4a0:	200001d4 	.word	0x200001d4

000004a4 <_ZL13battery_setupPK6device>:
}

static bool battery_ok;

static int battery_setup(const struct device *arg)
{
     4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!device_is_ready(ddp->adc)) {
     4a6:	4c40      	ldr	r4, [pc, #256]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
{
     4a8:	af00      	add	r7, sp, #0
	if (!device_is_ready(ddp->adc)) {
     4aa:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     4ac:	f006 fc8f 	bl	6dce <z_device_is_ready>
     4b0:	4603      	mov	r3, r0
     4b2:	2800      	cmp	r0, #0
     4b4:	d13d      	bne.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
		LOG_ERR("ADC device is not ready %s", ddp->adc->name);
     4b6:	6822      	ldr	r2, [r4, #0]
     4b8:	493c      	ldr	r1, [pc, #240]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     4ba:	6815      	ldr	r5, [r2, #0]
     4bc:	466c      	mov	r4, sp
     4be:	b088      	sub	sp, #32
     4c0:	466a      	mov	r2, sp
     4c2:	f102 0014 	add.w	r0, r2, #20
     4c6:	f005 fe37 	bl	6138 <_Z24z_cbprintf_cxx_store_argIPKcEvPhT_>
     4ca:	4629      	mov	r1, r5
     4cc:	f102 0018 	add.w	r0, r2, #24
     4d0:	f005 fe32 	bl	6138 <_Z24z_cbprintf_cxx_store_argIPKcEvPhT_>
     4d4:	2102      	movs	r1, #2
     4d6:	7711      	strb	r1, [r2, #28]
     4d8:	4935      	ldr	r1, [pc, #212]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
     4da:	f842 1f10 	str.w	r1, [r2, #16]!
     4de:	4835      	ldr	r0, [pc, #212]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     4e0:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
     4e4:	f006 f9f0 	bl	68c8 <z_impl_z_log_msg2_static_create>
     4e8:	46a5      	mov	sp, r4
		return -ENOENT;
     4ea:	f06f 0401 	mvn.w	r4, #1
	int rc = divider_setup();

	battery_ok = (rc == 0);
     4ee:	4a32      	ldr	r2, [pc, #200]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
	LOG_INF("Battery setup: %d %d", rc, battery_ok);
     4f0:	4932      	ldr	r1, [pc, #200]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
	battery_ok = (rc == 0);
     4f2:	fab4 f384 	clz	r3, r4
	LOG_INF("Battery setup: %d %d", rc, battery_ok);
     4f6:	b088      	sub	sp, #32
	battery_ok = (rc == 0);
     4f8:	095b      	lsrs	r3, r3, #5
     4fa:	7013      	strb	r3, [r2, #0]
	LOG_INF("Battery setup: %d %d", rc, battery_ok);
     4fc:	466a      	mov	r2, sp
     4fe:	f102 0014 	add.w	r0, r2, #20
     502:	f005 fe19 	bl	6138 <_Z24z_cbprintf_cxx_store_argIPKcEvPhT_>
     506:	f102 0018 	add.w	r0, r2, #24
     50a:	4621      	mov	r1, r4
     50c:	f005 fe12 	bl	6134 <_Z24z_cbprintf_cxx_store_argIiEvPhT_>
     510:	4619      	mov	r1, r3
     512:	f102 001c 	add.w	r0, r2, #28
     516:	2304      	movs	r3, #4
     518:	f005 fe0c 	bl	6134 <_Z24z_cbprintf_cxx_store_argIiEvPhT_>
     51c:	f842 3f10 	str.w	r3, [r2, #16]!
     520:	4824      	ldr	r0, [pc, #144]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     522:	2300      	movs	r3, #0
     524:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
     528:	f006 f9ce 	bl	68c8 <z_impl_z_log_msg2_static_create>
	return rc;
}
     52c:	4620      	mov	r0, r4
     52e:	46bd      	mov	sp, r7
     530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*asp = (struct adc_sequence){
     532:	2214      	movs	r2, #20
     534:	2100      	movs	r1, #0
     536:	f104 000c 	add.w	r0, r4, #12
     53a:	f006 fe22 	bl	7182 <memset>
     53e:	f104 0220 	add.w	r2, r4, #32
	*accp = (struct adc_channel_cfg){
     542:	491f      	ldr	r1, [pc, #124]	; (5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>)
	*asp = (struct adc_sequence){
     544:	6162      	str	r2, [r4, #20]
	*accp = (struct adc_channel_cfg){
     546:	f44f 6210 	mov.w	r2, #2304	; 0x900
     54a:	e9c4 1201 	strd	r1, r2, [r4, #4]
	rc = adc_channel_setup(ddp->adc, accp);
     54e:	4621      	mov	r1, r4
	*asp = (struct adc_sequence){
     550:	2301      	movs	r3, #1
     552:	2502      	movs	r5, #2
	asp->resolution = 14;
     554:	f240 420e 	movw	r2, #1038	; 0x40e
	rc = adc_channel_setup(ddp->adc, accp);
     558:	f851 0b04 	ldr.w	r0, [r1], #4
	*asp = (struct adc_sequence){
     55c:	6123      	str	r3, [r4, #16]
     55e:	61a5      	str	r5, [r4, #24]
	asp->resolution = 14;
     560:	83a2      	strh	r2, [r4, #28]
	*asp = (struct adc_sequence){
     562:	77a3      	strb	r3, [r4, #30]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
     564:	6883      	ldr	r3, [r0, #8]
     566:	681b      	ldr	r3, [r3, #0]
     568:	4798      	blx	r3
	LOG_INF("Setup AIN%u got %d", iocp->channel, rc);
     56a:	466e      	mov	r6, sp
     56c:	b088      	sub	sp, #32
     56e:	466a      	mov	r2, sp
     570:	4604      	mov	r4, r0
     572:	4914      	ldr	r1, [pc, #80]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     574:	f102 0014 	add.w	r0, r2, #20
     578:	f005 fdde 	bl	6138 <_Z24z_cbprintf_cxx_store_argIPKcEvPhT_>
     57c:	f102 0018 	add.w	r0, r2, #24
     580:	4629      	mov	r1, r5
     582:	f005 fdd7 	bl	6134 <_Z24z_cbprintf_cxx_store_argIiEvPhT_>
     586:	2304      	movs	r3, #4
     588:	f102 001c 	add.w	r0, r2, #28
     58c:	4621      	mov	r1, r4
     58e:	f005 fdd1 	bl	6134 <_Z24z_cbprintf_cxx_store_argIiEvPhT_>
     592:	f842 3f10 	str.w	r3, [r2, #16]!
     596:	4807      	ldr	r0, [pc, #28]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     598:	2300      	movs	r3, #0
     59a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
     59e:	f006 f993 	bl	68c8 <z_impl_z_log_msg2_static_create>
     5a2:	46b5      	mov	sp, r6
	return rc;
     5a4:	e7a3      	b.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     5a6:	bf00      	nop
     5a8:	20000098 	.word	0x20000098
     5ac:	00007711 	.word	0x00007711
     5b0:	01000003 	.word	0x01000003
     5b4:	00007428 	.word	0x00007428
     5b8:	20001178 	.word	0x20001178
     5bc:	0000773f 	.word	0x0000773f
     5c0:	40280400 	.word	0x40280400
     5c4:	0000772c 	.word	0x0000772c

000005c8 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5cc:	b08d      	sub	sp, #52	; 0x34
     5ce:	461f      	mov	r7, r3
     5d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
     5d2:	9202      	str	r2, [sp, #8]
     5d4:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5d6:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5da:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5de:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5e0:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     5e2:	0782      	lsls	r2, r0, #30
{
     5e4:	4605      	mov	r5, r0
     5e6:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5e8:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
     5ea:	f040 821c 	bne.w	a26 <CONFIG_ISR_STACK_SIZE+0x226>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     5ee:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     5f0:	2800      	cmp	r0, #0
     5f2:	f040 821b 	bne.w	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     5f6:	f001 0607 	and.w	r6, r1, #7
     5fa:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     5fc:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     600:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     604:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     608:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     60a:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     60e:	4652      	mov	r2, sl
	bool parsing = false;
     610:	4651      	mov	r1, sl
	size = sizeof(char *);
     612:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     614:	b105      	cbz	r5, 618 <cbvprintf_package+0x50>
				*(const char **)buf = s;
     616:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     618:	9804      	ldr	r0, [sp, #16]
     61a:	2800      	cmp	r0, #0
     61c:	dc07      	bgt.n	62e <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     61e:	48c8      	ldr	r0, [pc, #800]	; (940 <CONFIG_ISR_STACK_SIZE+0x140>)
     620:	4287      	cmp	r7, r0
     622:	f0c0 8139 	bcc.w	898 <CONFIG_ISR_STACK_SIZE+0x98>
     626:	48c7      	ldr	r0, [pc, #796]	; (944 <CONFIG_ISR_STACK_SIZE+0x144>)
     628:	4287      	cmp	r7, r0
     62a:	f080 8135 	bcs.w	898 <CONFIG_ISR_STACK_SIZE+0x98>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     62e:	9802      	ldr	r0, [sp, #8]
     630:	f010 0e02 	ands.w	lr, r0, #2
     634:	f000 8149 	beq.w	8ca <CONFIG_ISR_STACK_SIZE+0xca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     638:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     63c:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     63e:	f1be 0f00 	cmp.w	lr, #0
     642:	f000 812f 	beq.w	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     646:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     64a:	f0c0 812b 	bcc.w	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     64e:	f06f 0015 	mvn.w	r0, #21
     652:	e0f9      	b.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
		if (!parsing) {
     654:	b939      	cbnz	r1, 666 <cbvprintf_package+0x9e>
			if (*fmt == '%') {
     656:	2825      	cmp	r0, #37	; 0x25
     658:	f040 813b 	bne.w	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
				parsing = true;
     65c:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     65e:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     662:	46c1      	mov	r9, r8
     664:	e135      	b.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
		switch (*fmt) {
     666:	282b      	cmp	r0, #43	; 0x2b
     668:	d824      	bhi.n	6b4 <cbvprintf_package+0xec>
     66a:	281f      	cmp	r0, #31
     66c:	d801      	bhi.n	672 <cbvprintf_package+0xaa>
			parsing = false;
     66e:	2100      	movs	r1, #0
     670:	e12f      	b.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
		switch (*fmt) {
     672:	f1a0 0c20 	sub.w	ip, r0, #32
     676:	f1bc 0f0b 	cmp.w	ip, #11
     67a:	d8f8      	bhi.n	66e <cbvprintf_package+0xa6>
     67c:	f20f 0e04 	addw	lr, pc, #4
     680:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     684:	000008d3 	.word	0x000008d3
     688:	0000066f 	.word	0x0000066f
     68c:	0000066f 	.word	0x0000066f
     690:	000008d3 	.word	0x000008d3
     694:	0000066f 	.word	0x0000066f
     698:	0000066f 	.word	0x0000066f
     69c:	0000066f 	.word	0x0000066f
     6a0:	0000066f 	.word	0x0000066f
     6a4:	0000066f 	.word	0x0000066f
     6a8:	0000066f 	.word	0x0000066f
     6ac:	00000863 	.word	0x00000863
     6b0:	000008d3 	.word	0x000008d3
     6b4:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
     6b8:	fa5f fe8c 	uxtb.w	lr, ip
     6bc:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
     6c0:	d8d5      	bhi.n	66e <cbvprintf_package+0xa6>
     6c2:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     6c6:	d8d2      	bhi.n	66e <cbvprintf_package+0xa6>
     6c8:	f20f 0e04 	addw	lr, pc, #4
     6cc:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     6d0:	000008d3 	.word	0x000008d3
     6d4:	000008d3 	.word	0x000008d3
     6d8:	0000066f 	.word	0x0000066f
     6dc:	000008d3 	.word	0x000008d3
     6e0:	000008d3 	.word	0x000008d3
     6e4:	000008d3 	.word	0x000008d3
     6e8:	000008d3 	.word	0x000008d3
     6ec:	000008d3 	.word	0x000008d3
     6f0:	000008d3 	.word	0x000008d3
     6f4:	000008d3 	.word	0x000008d3
     6f8:	000008d3 	.word	0x000008d3
     6fc:	000008d3 	.word	0x000008d3
     700:	000008d3 	.word	0x000008d3
     704:	0000066f 	.word	0x0000066f
     708:	0000066f 	.word	0x0000066f
     70c:	0000066f 	.word	0x0000066f
     710:	0000066f 	.word	0x0000066f
     714:	0000066f 	.word	0x0000066f
     718:	0000066f 	.word	0x0000066f
     71c:	0000066f 	.word	0x0000066f
     720:	00000825 	.word	0x00000825
     724:	0000066f 	.word	0x0000066f
     728:	0000066f 	.word	0x0000066f
     72c:	0000066f 	.word	0x0000066f
     730:	00000825 	.word	0x00000825
     734:	00000825 	.word	0x00000825
     738:	00000825 	.word	0x00000825
     73c:	0000066f 	.word	0x0000066f
     740:	0000066f 	.word	0x0000066f
     744:	0000066f 	.word	0x0000066f
     748:	0000066f 	.word	0x0000066f
     74c:	000008d3 	.word	0x000008d3
     750:	0000066f 	.word	0x0000066f
     754:	0000066f 	.word	0x0000066f
     758:	0000066f 	.word	0x0000066f
     75c:	0000066f 	.word	0x0000066f
     760:	0000066f 	.word	0x0000066f
     764:	0000066f 	.word	0x0000066f
     768:	0000066f 	.word	0x0000066f
     76c:	0000066f 	.word	0x0000066f
     770:	0000066f 	.word	0x0000066f
     774:	0000066f 	.word	0x0000066f
     778:	0000066f 	.word	0x0000066f
     77c:	00000809 	.word	0x00000809
     780:	0000066f 	.word	0x0000066f
     784:	0000066f 	.word	0x0000066f
     788:	0000066f 	.word	0x0000066f
     78c:	0000066f 	.word	0x0000066f
     790:	0000066f 	.word	0x0000066f
     794:	0000066f 	.word	0x0000066f
     798:	0000066f 	.word	0x0000066f
     79c:	0000066f 	.word	0x0000066f
     7a0:	00000825 	.word	0x00000825
     7a4:	0000066f 	.word	0x0000066f
     7a8:	00000809 	.word	0x00000809
     7ac:	00000809 	.word	0x00000809
     7b0:	00000825 	.word	0x00000825
     7b4:	00000825 	.word	0x00000825
     7b8:	00000825 	.word	0x00000825
     7bc:	000008d3 	.word	0x000008d3
     7c0:	00000809 	.word	0x00000809
     7c4:	00000857 	.word	0x00000857
     7c8:	0000066f 	.word	0x0000066f
     7cc:	000008d3 	.word	0x000008d3
     7d0:	0000066f 	.word	0x0000066f
     7d4:	0000085d 	.word	0x0000085d
     7d8:	00000809 	.word	0x00000809
     7dc:	0000085d 	.word	0x0000085d
     7e0:	0000066f 	.word	0x0000066f
     7e4:	0000066f 	.word	0x0000066f
     7e8:	0000085d 	.word	0x0000085d
     7ec:	0000065f 	.word	0x0000065f
     7f0:	00000809 	.word	0x00000809
     7f4:	0000066f 	.word	0x0000066f
     7f8:	0000066f 	.word	0x0000066f
     7fc:	00000809 	.word	0x00000809
     800:	0000066f 	.word	0x0000066f
     804:	0000065f 	.word	0x0000065f
			if (fmt[-1] == 'l') {
     808:	f813 1c01 	ldrb.w	r1, [r3, #-1]
     80c:	296c      	cmp	r1, #108	; 0x6c
     80e:	d127      	bne.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
				if (fmt[-2] == 'l') {
     810:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     814:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     816:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
     81a:	d03a      	beq.n	892 <CONFIG_ISR_STACK_SIZE+0x92>
			align = VA_STACK_ALIGN(void *);
     81c:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     820:	46c1      	mov	r9, r8
     822:	e01e      	b.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
				v.ld = va_arg(ap, long double);
     824:	9800      	ldr	r0, [sp, #0]
     826:	f100 0b07 	add.w	fp, r0, #7
     82a:	f02b 0007 	bic.w	r0, fp, #7
     82e:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
     832:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     834:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
     836:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     83a:	b155      	cbz	r5, 852 <CONFIG_ISR_STACK_SIZE+0x52>
				if (BUF_OFFSET + size > len) {
     83c:	9805      	ldr	r0, [sp, #20]
     83e:	4420      	add	r0, r4
     840:	42b0      	cmp	r0, r6
     842:	d904      	bls.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
					return -ENOSPC;
     844:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     848:	b00d      	add	sp, #52	; 0x34
     84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     84e:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
     852:	3408      	adds	r4, #8
			parsing = false;
     854:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
     856:	f04f 0808 	mov.w	r8, #8
     85a:	e702      	b.n	662 <cbvprintf_package+0x9a>
			parsing = false;
     85c:	2100      	movs	r1, #0
     85e:	e7dd      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
			parsing = false;
     860:	2100      	movs	r1, #0
		buf = (void *) ROUND_UP(buf, align);
     862:	3c01      	subs	r4, #1
     864:	4444      	add	r4, r8
     866:	f1c8 0c00 	rsb	ip, r8, #0
     86a:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     86e:	b125      	cbz	r5, 87a <CONFIG_ISR_STACK_SIZE+0x7a>
     870:	eba9 0c05 	sub.w	ip, r9, r5
     874:	44a4      	add	ip, r4
     876:	4566      	cmp	r6, ip
     878:	d3e4      	bcc.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
		if (*fmt == 's') {
     87a:	2873      	cmp	r0, #115	; 0x73
     87c:	d152      	bne.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     87e:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     880:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     884:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
     886:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     88a:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     88c:	f8cd b000 	str.w	fp, [sp]
     890:	e6c0      	b.n	614 <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
     892:	f04f 0808 	mov.w	r8, #8
     896:	e7c3      	b.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     898:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     89a:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     89e:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     8a2:	e6cb      	b.n	63c <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     8a4:	2a0f      	cmp	r2, #15
     8a6:	f63f aed2 	bhi.w	64e <cbvprintf_package+0x86>
				if (buf0 != NULL) {
     8aa:	b345      	cbz	r5, 8fe <CONFIG_ISR_STACK_SIZE+0xfe>
					str_ptr_pos[s_idx] = s_ptr_idx;
     8ac:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
     8b0:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     8b4:	4496      	add	lr, r2
     8b6:	f1bc 0f00 	cmp.w	ip, #0
     8ba:	d01a      	beq.n	8f2 <CONFIG_ISR_STACK_SIZE+0xf2>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     8bc:	f060 007f 	orn	r0, r0, #127	; 0x7f
     8c0:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     8c4:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     8c8:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     8ca:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     8ce:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     8d0:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
     8d2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     8d6:	2800      	cmp	r0, #0
     8d8:	f47f aebc 	bne.w	654 <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
     8dc:	1b61      	subs	r1, r4, r5
     8de:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     8e2:	f4bf aeb4 	bcs.w	64e <cbvprintf_package+0x86>
	if (buf0 == NULL) {
     8e6:	2d00      	cmp	r5, #0
     8e8:	d141      	bne.n	96e <CONFIG_ISR_STACK_SIZE+0x16e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     8ea:	f1a6 0408 	sub.w	r4, r6, #8
     8ee:	1860      	adds	r0, r4, r1
     8f0:	e7aa      	b.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
					str_ptr_pos[s_idx] = s_ptr_idx;
     8f2:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     8f6:	9803      	ldr	r0, [sp, #12]
     8f8:	3001      	adds	r0, #1
     8fa:	9003      	str	r0, [sp, #12]
     8fc:	e7e4      	b.n	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
				} else if (is_ro || rws_pos_en) {
     8fe:	f1bc 0f00 	cmp.w	ip, #0
     902:	d101      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     904:	9801      	ldr	r0, [sp, #4]
     906:	b108      	cbz	r0, 90c <CONFIG_ISR_STACK_SIZE+0x10c>
					len += 1;
     908:	3601      	adds	r6, #1
     90a:	e7dd      	b.n	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
					len += strlen(s) + 1 + 1;
     90c:	4638      	mov	r0, r7
     90e:	e9cd 2106 	strd	r2, r1, [sp, #24]
     912:	9305      	str	r3, [sp, #20]
     914:	f7ff fd6b 	bl	3ee <strlen>
     918:	3602      	adds	r6, #2
     91a:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
     91e:	9b05      	ldr	r3, [sp, #20]
     920:	4406      	add	r6, r0
     922:	e7d1      	b.n	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
		} else if (size == sizeof(int)) {
     924:	f1b9 0f04 	cmp.w	r9, #4
     928:	d10e      	bne.n	948 <CONFIG_ISR_STACK_SIZE+0x148>
			int v = va_arg(ap, int);
     92a:	9800      	ldr	r0, [sp, #0]
     92c:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
     930:	b10d      	cbz	r5, 936 <CONFIG_ISR_STACK_SIZE+0x136>
			int v = va_arg(ap, int);
     932:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
     934:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     936:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     938:	f8cd c000 	str.w	ip, [sp]
     93c:	e7c9      	b.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
     93e:	bf00      	nop
     940:	000071c8 	.word	0x000071c8
     944:	000080ac 	.word	0x000080ac
		} else if (size == sizeof(long long)) {
     948:	f1b9 0f08 	cmp.w	r9, #8
     94c:	f47f ae7f 	bne.w	64e <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
     950:	9800      	ldr	r0, [sp, #0]
     952:	3007      	adds	r0, #7
     954:	f020 0007 	bic.w	r0, r0, #7
     958:	f100 0c08 	add.w	ip, r0, #8
     95c:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
     960:	b11d      	cbz	r5, 96a <CONFIG_ISR_STACK_SIZE+0x16a>
			long long v = va_arg(ap, long long);
     962:	e9d0 bc00 	ldrd	fp, ip, [r0]
     966:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     96a:	3408      	adds	r4, #8
     96c:	e7b1      	b.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
	if (rws_pos_en) {
     96e:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
     970:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     972:	0889      	lsrs	r1, r1, #2
     974:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
     976:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     97a:	b1a3      	cbz	r3, 9a6 <CONFIG_ISR_STACK_SIZE+0x1a6>
		buf0[1] = 0;
     97c:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     97e:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     980:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     984:	f1ba 0f00 	cmp.w	sl, #0
     988:	d006      	beq.n	998 <CONFIG_ISR_STACK_SIZE+0x198>
     98a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     98c:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     990:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     994:	4562      	cmp	r2, ip
     996:	d10a      	bne.n	9ae <CONFIG_ISR_STACK_SIZE+0x1ae>
     998:	f10d 0820 	add.w	r8, sp, #32
     99c:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     9a0:	f1c5 0b01 	rsb	fp, r5, #1
     9a4:	e039      	b.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
		buf0[3] = 0;
     9a6:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
     9a8:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
     9aa:	70eb      	strb	r3, [r5, #3]
     9ac:	e7e8      	b.n	980 <CONFIG_ISR_STACK_SIZE+0x180>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     9ae:	f810 1b01 	ldrb.w	r1, [r0], #1
     9b2:	060b      	lsls	r3, r1, #24
     9b4:	d508      	bpl.n	9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>
			if (BUF_OFFSET + 1 > len) {
     9b6:	eb04 080e 	add.w	r8, r4, lr
     9ba:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     9bc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     9c0:	f4ff af40 	bcc.w	844 <CONFIG_ISR_STACK_SIZE+0x44>
			*buf++ = pos;
     9c4:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     9c8:	f10c 0c01 	add.w	ip, ip, #1
     9cc:	e7e2      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     9ce:	f1ba 0f00 	cmp.w	sl, #0
     9d2:	d003      	beq.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
     9d4:	f998 2000 	ldrsb.w	r2, [r8]
     9d8:	2a00      	cmp	r2, #0
     9da:	db1c      	blt.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
		if (rws_pos_en) {
     9dc:	9b01      	ldr	r3, [sp, #4]
     9de:	bb03      	cbnz	r3, a22 <CONFIG_ISR_STACK_SIZE+0x222>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     9e0:	f898 2000 	ldrb.w	r2, [r8]
     9e4:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     9e8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     9ec:	4638      	mov	r0, r7
     9ee:	f7ff fcfe 	bl	3ee <strlen>
     9f2:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     9f4:	eb04 010b 	add.w	r1, r4, fp
     9f8:	4411      	add	r1, r2
     9fa:	428e      	cmp	r6, r1
     9fc:	f4ff af22 	bcc.w	844 <CONFIG_ISR_STACK_SIZE+0x44>
		*buf++ = str_ptr_pos[i];
     a00:	f898 1000 	ldrb.w	r1, [r8]
     a04:	f804 1b01 	strb.w	r1, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     a08:	4639      	mov	r1, r7
     a0a:	4620      	mov	r0, r4
     a0c:	9200      	str	r2, [sp, #0]
     a0e:	f006 fb97 	bl	7140 <memcpy>
		buf += size;
     a12:	9a00      	ldr	r2, [sp, #0]
     a14:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     a16:	f108 0801 	add.w	r8, r8, #1
     a1a:	45c1      	cmp	r9, r8
     a1c:	d1d7      	bne.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
	return BUF_OFFSET;
     a1e:	1b60      	subs	r0, r4, r5
     a20:	e712      	b.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
			size = 0;
     a22:	2200      	movs	r2, #0
     a24:	e7e6      	b.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
		return -EFAULT;
     a26:	f06f 000d 	mvn.w	r0, #13
     a2a:	e70d      	b.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     a2c:	2907      	cmp	r1, #7
     a2e:	f63f ade7 	bhi.w	600 <cbvprintf_package+0x38>
     a32:	e707      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>

00000a34 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a38:	b08b      	sub	sp, #44	; 0x2c
     a3a:	4606      	mov	r6, r0
     a3c:	9f14      	ldr	r7, [sp, #80]	; 0x50
     a3e:	9303      	str	r3, [sp, #12]
     a40:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     a42:	468b      	mov	fp, r1
     a44:	b1a9      	cbz	r1, a72 <cbprintf_package_copy+0x3e>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     a46:	78b5      	ldrb	r5, [r6, #2]
     a48:	9504      	str	r5, [sp, #16]
	ro_cpy = ros_nbr &&
     a4a:	bb2d      	cbnz	r5, a98 <cbprintf_package_copy+0x64>
     a4c:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     a4e:	78f3      	ldrb	r3, [r6, #3]
     a50:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
     a52:	b10b      	cbz	r3, a58 <cbprintf_package_copy+0x24>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     a54:	07ba      	lsls	r2, r7, #30
     a56:	d422      	bmi.n	a9e <cbprintf_package_copy+0x6a>
     a58:	f1ba 0f00 	cmp.w	sl, #0
     a5c:	d11f      	bne.n	a9e <cbprintf_package_copy+0x6a>
		if (packaged) {
     a5e:	b124      	cbz	r4, a6a <cbprintf_package_copy+0x36>
     a60:	465a      	mov	r2, fp
     a62:	4631      	mov	r1, r6
     a64:	4620      	mov	r0, r4
     a66:	f006 fb6b 	bl	7140 <memcpy>
			}

			str_pos++;
		}

		return out_len;
     a6a:	4658      	mov	r0, fp
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     a6c:	b00b      	add	sp, #44	; 0x2c
     a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
     a72:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
     a76:	78b5      	ldrb	r5, [r6, #2]
     a78:	7800      	ldrb	r0, [r0, #0]
     a7a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
     a7e:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
     a80:	468a      	mov	sl, r1
     a82:	45ca      	cmp	sl, r9
     a84:	d2df      	bcs.n	a46 <cbprintf_package_copy+0x12>
		buf++;
     a86:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
     a88:	4628      	mov	r0, r5
     a8a:	f7ff fcb0 	bl	3ee <strlen>
     a8e:	3001      	adds	r0, #1
     a90:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
     a92:	f10a 0a01 	add.w	sl, sl, #1
     a96:	e7f4      	b.n	a82 <cbprintf_package_copy+0x4e>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     a98:	f007 0a01 	and.w	sl, r7, #1
     a9c:	e7d7      	b.n	a4e <cbprintf_package_copy+0x1a>
	args_size = buf[0] * sizeof(int);
     a9e:	f896 9000 	ldrb.w	r9, [r6]
     aa2:	ea4f 0389 	mov.w	r3, r9, lsl #2
     aa6:	9302      	str	r3, [sp, #8]
	uint8_t *str_pos = &buf[args_size];
     aa8:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
     aac:	2c00      	cmp	r4, #0
     aae:	d15b      	bne.n	b68 <cbprintf_package_copy+0x134>
		if (ro_cpy) {
     ab0:	f1ba 0f00 	cmp.w	sl, #0
     ab4:	d032      	beq.n	b1c <cbprintf_package_copy+0xe8>
     ab6:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     ab8:	454d      	cmp	r5, r9
     aba:	d11d      	bne.n	af8 <cbprintf_package_copy+0xc4>
     abc:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
     abe:	f8dd a004 	ldr.w	sl, [sp, #4]
     ac2:	f8df c200 	ldr.w	ip, [pc, #512]	; cc4 <cbprintf_package_copy+0x290>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     ac6:	4980      	ldr	r1, [pc, #512]	; (cc8 <cbprintf_package_copy+0x294>)
		bool drop_ro_str_pos = !(flags &
     ac8:	f007 0805 	and.w	r8, r7, #5
		for (int i = 0; i < rws_nbr; i++) {
     acc:	464d      	mov	r5, r9
     ace:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     ad0:	f007 0202 	and.w	r2, r7, #2
		for (int i = 0; i < rws_nbr; i++) {
     ad4:	45aa      	cmp	sl, r5
     ad6:	d0c8      	beq.n	a6a <cbprintf_package_copy+0x36>
			const char *str = *(const char **)&buf32[*str_pos];
     ad8:	f815 0b01 	ldrb.w	r0, [r5], #1
     adc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     ae0:	4560      	cmp	r0, ip
     ae2:	d324      	bcc.n	b2e <cbprintf_package_copy+0xfa>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     ae4:	4288      	cmp	r0, r1
     ae6:	d222      	bcs.n	b2e <cbprintf_package_copy+0xfa>
     ae8:	07fb      	lsls	r3, r7, #31
     aea:	d43a      	bmi.n	b62 <cbprintf_package_copy+0x12e>
			if (is_ro && drop_ro_str_pos) {
     aec:	f1b8 0f00 	cmp.w	r8, #0
     af0:	d1f0      	bne.n	ad4 <cbprintf_package_copy+0xa0>
				out_len--;
     af2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
		for (int i = 0; i < rws_nbr; i++) {
     af6:	e7ed      	b.n	ad4 <cbprintf_package_copy+0xa0>
				const char *str = *(const char **)&buf32[*str_pos];
     af8:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     afc:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     b00:	f7ff fc75 	bl	3ee <strlen>
				if (strl && strl_cnt < strl_len) {
     b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
     b06:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     b08:	b133      	cbz	r3, b18 <cbprintf_package_copy+0xe4>
     b0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     b0c:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     b0e:	bf3e      	ittt	cc
     b10:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     b12:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     b16:	3401      	addcc	r4, #1
				out_len += len;
     b18:	4483      	add	fp, r0
			for (int i = 0; i < ros_nbr; i++) {
     b1a:	e7cd      	b.n	ab8 <cbprintf_package_copy+0x84>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     b1c:	b12d      	cbz	r5, b2a <cbprintf_package_copy+0xf6>
     b1e:	f017 0404 	ands.w	r4, r7, #4
     b22:	d0cc      	beq.n	abe <cbprintf_package_copy+0x8a>
				str_pos += ros_nbr;
     b24:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     b26:	4654      	mov	r4, sl
     b28:	e7c9      	b.n	abe <cbprintf_package_copy+0x8a>
     b2a:	462c      	mov	r4, r5
     b2c:	e7c7      	b.n	abe <cbprintf_package_copy+0x8a>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     b2e:	2a00      	cmp	r2, #0
     b30:	d0d0      	beq.n	ad4 <cbprintf_package_copy+0xa0>
     b32:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     b36:	9201      	str	r2, [sp, #4]
     b38:	f7ff fc59 	bl	3ee <strlen>
				if (strl && strl_cnt < strl_len) {
     b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b3e:	f8df c184 	ldr.w	ip, [pc, #388]	; cc4 <cbprintf_package_copy+0x290>
     b42:	9a01      	ldr	r2, [sp, #4]
     b44:	4960      	ldr	r1, [pc, #384]	; (cc8 <cbprintf_package_copy+0x294>)
		return 1 + strlen(str);
     b46:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     b48:	b133      	cbz	r3, b58 <cbprintf_package_copy+0x124>
     b4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     b4c:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     b4e:	bf3e      	ittt	cc
     b50:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     b52:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     b56:	3401      	addcc	r4, #1
				out_len += len;
     b58:	4483      	add	fp, r0
			if (is_ro && drop_ro_str_pos) {
     b5a:	f1b9 0f00 	cmp.w	r9, #0
     b5e:	d0b9      	beq.n	ad4 <cbprintf_package_copy+0xa0>
     b60:	e7c4      	b.n	aec <cbprintf_package_copy+0xb8>
     b62:	f04f 0901 	mov.w	r9, #1
     b66:	e7e6      	b.n	b36 <cbprintf_package_copy+0x102>
     b68:	9a02      	ldr	r2, [sp, #8]
     b6a:	4631      	mov	r1, r6
     b6c:	4620      	mov	r0, r4
     b6e:	f006 fae7 	bl	7140 <memcpy>
	dst += args_size;
     b72:	9b02      	ldr	r3, [sp, #8]
     b74:	eb04 0803 	add.w	r8, r4, r3
	if (ro_cpy) {
     b78:	f1ba 0f00 	cmp.w	sl, #0
     b7c:	d00a      	beq.n	b94 <cbprintf_package_copy+0x160>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     b7e:	2310      	movs	r3, #16
     b80:	4649      	mov	r1, r9
     b82:	462a      	mov	r2, r5
     b84:	a806      	add	r0, sp, #24
     b86:	f006 fae9 	bl	715c <__memcpy_chk>
		dst_hdr[2] = 0;
     b8a:	2300      	movs	r3, #0
     b8c:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
     b8e:	44a9      	add	r9, r5
	dst += args_size;
     b90:	4643      	mov	r3, r8
     b92:	e00b      	b.n	bac <cbprintf_package_copy+0x178>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     b94:	b1b5      	cbz	r5, bc4 <cbprintf_package_copy+0x190>
     b96:	077b      	lsls	r3, r7, #29
     b98:	d514      	bpl.n	bc4 <cbprintf_package_copy+0x190>
     b9a:	462a      	mov	r2, r5
     b9c:	4649      	mov	r1, r9
     b9e:	4640      	mov	r0, r8
     ba0:	f006 face 	bl	7140 <memcpy>
			str_pos += ros_nbr;
     ba4:	44a9      	add	r9, r5
			dst += ros_nbr;
     ba6:	eb08 0305 	add.w	r3, r8, r5
		scpy_cnt = 0;
     baa:	4655      	mov	r5, sl
     bac:	9a01      	ldr	r2, [sp, #4]
     bae:	eb09 0c02 	add.w	ip, r9, r2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     bb2:	f007 0201 	and.w	r2, r7, #1
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     bb6:	f007 0a02 	and.w	sl, r7, #2
     bba:	4649      	mov	r1, r9
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     bbc:	9205      	str	r2, [sp, #20]
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     bbe:	f007 0704 	and.w	r7, r7, #4
     bc2:	e024      	b.n	c0e <cbprintf_package_copy+0x1da>
			dst_hdr[2] = 0;
     bc4:	2500      	movs	r5, #0
     bc6:	70a5      	strb	r5, [r4, #2]
     bc8:	e7e2      	b.n	b90 <cbprintf_package_copy+0x15c>
		const char *str = *(const char **)&buf32[*str_pos];
     bca:	f811 2b01 	ldrb.w	r2, [r1], #1
     bce:	f8df e0f4 	ldr.w	lr, [pc, #244]	; cc4 <cbprintf_package_copy+0x290>
     bd2:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
     bd6:	4570      	cmp	r0, lr
     bd8:	d303      	bcc.n	be2 <cbprintf_package_copy+0x1ae>
     bda:	f8df e0ec 	ldr.w	lr, [pc, #236]	; cc8 <cbprintf_package_copy+0x294>
     bde:	4570      	cmp	r0, lr
     be0:	d305      	bcc.n	bee <cbprintf_package_copy+0x1ba>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     be2:	f1ba 0f00 	cmp.w	sl, #0
     be6:	d104      	bne.n	bf2 <cbprintf_package_copy+0x1be>
				*dst++ = *str_pos;
     be8:	f803 2b01 	strb.w	r2, [r3], #1
	for (int i = 0; i < rws_nbr; i++) {
     bec:	e00f      	b.n	c0e <cbprintf_package_copy+0x1da>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     bee:	9805      	ldr	r0, [sp, #20]
     bf0:	b138      	cbz	r0, c02 <cbprintf_package_copy+0x1ce>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     bf2:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
     bf6:	1c68      	adds	r0, r5, #1
     bf8:	4475      	add	r5, lr
     bfa:	f805 2c10 	strb.w	r2, [r5, #-16]
     bfe:	b2c5      	uxtb	r5, r0
     c00:	e005      	b.n	c0e <cbprintf_package_copy+0x1da>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     c02:	b127      	cbz	r7, c0e <cbprintf_package_copy+0x1da>
				*dst++ = *str_pos;
     c04:	f803 2b01 	strb.w	r2, [r3], #1
				dst_hdr[2]++;
     c08:	78a2      	ldrb	r2, [r4, #2]
     c0a:	3201      	adds	r2, #1
     c0c:	70a2      	strb	r2, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
     c0e:	458c      	cmp	ip, r1
     c10:	d1db      	bne.n	bca <cbprintf_package_copy+0x196>
	dst_hdr[1] += scpy_cnt;
     c12:	7862      	ldrb	r2, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     c14:	9804      	ldr	r0, [sp, #16]
     c16:	9901      	ldr	r1, [sp, #4]
	dst_hdr[1] += scpy_cnt;
     c18:	442a      	add	r2, r5
     c1a:	7062      	strb	r2, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     c1c:	78a2      	ldrb	r2, [r4, #2]
     c1e:	eba3 0808 	sub.w	r8, r3, r8
     c22:	eba8 0802 	sub.w	r8, r8, r2
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     c26:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     c28:	f884 8003 	strb.w	r8, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     c2c:	4410      	add	r0, r2
     c2e:	9a02      	ldr	r2, [sp, #8]
     c30:	ebab 0000 	sub.w	r0, fp, r0
     c34:	eba0 0b02 	sub.w	fp, r0, r2
     c38:	465a      	mov	r2, fp
     c3a:	4449      	add	r1, r9
     c3c:	4618      	mov	r0, r3
     c3e:	f006 fa7f 	bl	7140 <memcpy>
	dst += strs_len;
     c42:	4483      	add	fp, r0
		return dst - dst_hdr;
     c44:	ebab 0004 	sub.w	r0, fp, r4
	if (scpy_cnt == 0) {
     c48:	2d00      	cmp	r5, #0
     c4a:	f43f af0f 	beq.w	a6c <cbprintf_package_copy+0x38>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     c4e:	9b03      	ldr	r3, [sp, #12]
     c50:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
     c52:	42a5      	cmp	r5, r4
     c54:	d302      	bcc.n	c5c <cbprintf_package_copy+0x228>
		return -ENOSPC;
     c56:	f06f 001b 	mvn.w	r0, #27
     c5a:	e707      	b.n	a6c <cbprintf_package_copy+0x38>
	for (int i = 0; i < scpy_cnt; i++) {
     c5c:	f04f 0800 	mov.w	r8, #0
		uint8_t loc = cpy_str_pos[i];
     c60:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
     c62:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
     c64:	f813 3008 	ldrb.w	r3, [r3, r8]
		const char *str = *(const char **)&buf32[loc];
     c68:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     c6c:	b1c2      	cbz	r2, ca0 <cbprintf_package_copy+0x26c>
     c6e:	f832 7018 	ldrh.w	r7, [r2, r8, lsl #1]
		*dst = loc;
     c72:	46d9      	mov	r9, fp
		rem--;
     c74:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
		*dst = loc;
     c78:	f809 3b01 	strb.w	r3, [r9], #1
	if (strl) {
     c7c:	b197      	cbz	r7, ca4 <cbprintf_package_copy+0x270>
     c7e:	463a      	mov	r2, r7
     c80:	4648      	mov	r0, r9
     c82:	f006 fa5d 	bl	7140 <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
     c86:	f108 0801 	add.w	r8, r8, #1
     c8a:	4545      	cmp	r5, r8
		rem -= cpy_len;
     c8c:	ebaa 0407 	sub.w	r4, sl, r7
		dst += cpy_len;
     c90:	eb09 0b07 	add.w	fp, r9, r7
	for (int i = 0; i < scpy_cnt; i++) {
     c94:	dce4      	bgt.n	c60 <cbprintf_package_copy+0x22c>
	return len - rem;
     c96:	9b03      	ldr	r3, [sp, #12]
     c98:	441f      	add	r7, r3
     c9a:	eba7 000a 	sub.w	r0, r7, sl
     c9e:	e6e5      	b.n	a6c <cbprintf_package_copy+0x38>
		uint16_t str_len = strl ? strl[i] : 0;
     ca0:	9f15      	ldr	r7, [sp, #84]	; 0x54
     ca2:	e7e6      	b.n	c72 <cbprintf_package_copy+0x23e>
     ca4:	3901      	subs	r1, #1
	if (strl) {
     ca6:	2701      	movs	r7, #1
	for (size_t i = 0; i < num; i++) {
     ca8:	42bc      	cmp	r4, r7
     caa:	d0d4      	beq.n	c56 <cbprintf_package_copy+0x222>
		dst[i] = src[i];
     cac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
     cb0:	f80b 3007 	strb.w	r3, [fp, r7]
		if (src[i] == '\0') {
     cb4:	1c7a      	adds	r2, r7, #1
     cb6:	b913      	cbnz	r3, cbe <cbprintf_package_copy+0x28a>
		if (cpy_len < 0) {
     cb8:	2f00      	cmp	r7, #0
     cba:	dae4      	bge.n	c86 <cbprintf_package_copy+0x252>
     cbc:	e7cb      	b.n	c56 <cbprintf_package_copy+0x222>
     cbe:	4617      	mov	r7, r2
     cc0:	e7f2      	b.n	ca8 <cbprintf_package_copy+0x274>
     cc2:	bf00      	nop
     cc4:	000071c8 	.word	0x000071c8
     cc8:	000080ac 	.word	0x000080ac

00000ccc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     ccc:	4b01      	ldr	r3, [pc, #4]	; (cd4 <__printk_hook_install+0x8>)
     cce:	6018      	str	r0, [r3, #0]
}
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	200000bc 	.word	0x200000bc

00000cd8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     cd8:	b530      	push	{r4, r5, lr}
     cda:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     cdc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     ce0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     ce2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     ce4:	a901      	add	r1, sp, #4
     ce6:	4805      	ldr	r0, [pc, #20]	; (cfc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     ce8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     cea:	f000 f949 	bl	f80 <cbvprintf>

	if (ctx.count < ctx.max) {
     cee:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     cf2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     cf4:	bfb8      	it	lt
     cf6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     cf8:	b005      	add	sp, #20
     cfa:	bd30      	pop	{r4, r5, pc}
     cfc:	000061d7 	.word	0x000061d7

00000d00 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d04:	f8b0 901c 	ldrh.w	r9, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     d08:	f019 0808 	ands.w	r8, r9, #8
{
     d0c:	4604      	mov	r4, r0
     d0e:	4693      	mov	fp, r2
	if (processing) {
     d10:	d00d      	beq.n	d2e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     d12:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     d14:	bf0c      	ite	eq
     d16:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     d1a:	f049 0920 	orrne.w	r9, r9, #32
     d1e:	f8a0 901c 	strh.w	r9, [r0, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d22:	f38b 8811 	msr	BASEPRI, fp
     d26:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d2e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     d32:	2902      	cmp	r1, #2
     d34:	d107      	bne.n	d46 <process_event+0x46>
			evt = process_recheck(mgr);
     d36:	4620      	mov	r0, r4
     d38:	f005 fa7a 	bl	6230 <process_recheck>
		if (evt == EVT_NOP) {
     d3c:	2800      	cmp	r0, #0
     d3e:	d0f0      	beq.n	d22 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     d40:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d42:	8ba3      	ldrh	r3, [r4, #28]
		if (evt == EVT_COMPLETE) {
     d44:	d14e      	bne.n	de4 <process_event+0xe4>
			res = mgr->last_res;
     d46:	69a7      	ldr	r7, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d48:	8ba1      	ldrh	r1, [r4, #28]
	if (res < 0) {
     d4a:	2f00      	cmp	r7, #0
     d4c:	da15      	bge.n	d7a <process_event+0x7a>
		*clients = mgr->clients;
     d4e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d50:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     d54:	e9c4 8800 	strd	r8, r8, [r4]
     d58:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d5c:	83a1      	strh	r1, [r4, #28]
		onoff_transition_fn transit = NULL;
     d5e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d60:	8ba1      	ldrh	r1, [r4, #28]
     d62:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d66:	45ca      	cmp	sl, r9
     d68:	d002      	beq.n	d70 <process_event+0x70>
		if (do_monitors
     d6a:	68a3      	ldr	r3, [r4, #8]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d15a      	bne.n	e26 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     d70:	b90d      	cbnz	r5, d76 <process_event+0x76>
		    || (transit != NULL)) {
     d72:	2e00      	cmp	r6, #0
     d74:	d071      	beq.n	e5a <process_event+0x15a>
     d76:	2300      	movs	r3, #0
     d78:	e056      	b.n	e28 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d7a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     d7e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     d80:	2a01      	cmp	r2, #1
     d82:	d81e      	bhi.n	dc2 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d84:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     d88:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     d8a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d8c:	b289      	uxth	r1, r1
     d8e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     d92:	d10a      	bne.n	daa <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d94:	b13d      	cbz	r5, da6 <process_event+0xa6>
     d96:	8be3      	ldrh	r3, [r4, #30]
     d98:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     d9a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     d9c:	3301      	adds	r3, #1
     d9e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     da0:	2a00      	cmp	r2, #0
     da2:	d1fa      	bne.n	d9a <process_event+0x9a>
     da4:	83e3      	strh	r3, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     da6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     daa:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     dac:	4620      	mov	r0, r4
     dae:	f005 fa3f 	bl	6230 <process_recheck>
     db2:	4606      	mov	r6, r0
     db4:	2800      	cmp	r0, #0
     db6:	d0d3      	beq.n	d60 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     db8:	8ba3      	ldrh	r3, [r4, #28]
     dba:	f043 0320 	orr.w	r3, r3, #32
     dbe:	83a3      	strh	r3, [r4, #28]
     dc0:	e7cd      	b.n	d5e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     dc2:	2b04      	cmp	r3, #4
     dc4:	d10c      	bne.n	de0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dc6:	f021 0107 	bic.w	r1, r1, #7
     dca:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     dcc:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     dce:	4620      	mov	r0, r4
     dd0:	f005 fa2e 	bl	6230 <process_recheck>
     dd4:	4605      	mov	r5, r0
     dd6:	2800      	cmp	r0, #0
     dd8:	d0c1      	beq.n	d5e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     dda:	f041 0120 	orr.w	r1, r1, #32
     dde:	83a1      	strh	r1, [r4, #28]
     de0:	2500      	movs	r5, #0
     de2:	e7bc      	b.n	d5e <process_event+0x5e>
		} else if (evt == EVT_START) {
     de4:	2803      	cmp	r0, #3
     de6:	d109      	bne.n	dfc <process_event+0xfc>
			transit = mgr->transitions->start;
     de8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dea:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     dee:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     df0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     df4:	83a3      	strh	r3, [r4, #28]
}
     df6:	2500      	movs	r5, #0
		res = 0;
     df8:	462f      	mov	r7, r5
     dfa:	e7b1      	b.n	d60 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     dfc:	2804      	cmp	r0, #4
     dfe:	d106      	bne.n	e0e <process_event+0x10e>
			transit = mgr->transitions->stop;
     e00:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e02:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     e06:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e08:	f043 0304 	orr.w	r3, r3, #4
     e0c:	e7f2      	b.n	df4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     e0e:	2805      	cmp	r0, #5
     e10:	d106      	bne.n	e20 <process_event+0x120>
			transit = mgr->transitions->reset;
     e12:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e14:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     e18:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e1a:	f043 0305 	orr.w	r3, r3, #5
     e1e:	e7e9      	b.n	df4 <process_event+0xf4>
     e20:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     e22:	462e      	mov	r6, r5
     e24:	e7e8      	b.n	df8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     e26:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e28:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     e2c:	83a1      	strh	r1, [r4, #28]
     e2e:	f38b 8811 	msr	BASEPRI, fp
     e32:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     e36:	b9fb      	cbnz	r3, e78 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     e38:	bb85      	cbnz	r5, e9c <process_event+0x19c>
			if (transit != NULL) {
     e3a:	b116      	cbz	r6, e42 <process_event+0x142>
				transit(mgr, transition_complete);
     e3c:	491f      	ldr	r1, [pc, #124]	; (ebc <process_event+0x1bc>)
     e3e:	4620      	mov	r0, r4
     e40:	47b0      	blx	r6
	__asm__ volatile(
     e42:	f04f 0320 	mov.w	r3, #32
     e46:	f3ef 8b11 	mrs	fp, BASEPRI
     e4a:	f383 8812 	msr	BASEPRI_MAX, r3
     e4e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e52:	8ba3      	ldrh	r3, [r4, #28]
     e54:	f023 0308 	bic.w	r3, r3, #8
     e58:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e5a:	8ba3      	ldrh	r3, [r4, #28]
     e5c:	06da      	lsls	r2, r3, #27
     e5e:	d525      	bpl.n	eac <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e60:	f023 0310 	bic.w	r3, r3, #16
     e64:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     e66:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     e68:	f8b4 901c 	ldrh.w	r9, [r4, #28]
     e6c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     e70:	2900      	cmp	r1, #0
     e72:	f47f af5e 	bne.w	d32 <process_event+0x32>
out:
     e76:	e754      	b.n	d22 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     e78:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e7a:	2900      	cmp	r1, #0
     e7c:	d0dc      	beq.n	e38 <process_event+0x138>
	return node->next;
     e7e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     e82:	f8d1 b004 	ldr.w	fp, [r1, #4]
     e86:	463b      	mov	r3, r7
     e88:	4652      	mov	r2, sl
     e8a:	4620      	mov	r0, r4
     e8c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e8e:	f1b9 0f00 	cmp.w	r9, #0
     e92:	d0d1      	beq.n	e38 <process_event+0x138>
     e94:	4649      	mov	r1, r9
     e96:	f8d9 9000 	ldr.w	r9, [r9]
     e9a:	e7f2      	b.n	e82 <process_event+0x182>
     e9c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     e9e:	463b      	mov	r3, r7
     ea0:	4652      	mov	r2, sl
     ea2:	4620      	mov	r0, r4
     ea4:	682d      	ldr	r5, [r5, #0]
     ea6:	f005 f9df 	bl	6268 <notify_one>
     eaa:	e7c5      	b.n	e38 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     eac:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     eb0:	bf1e      	ittt	ne
     eb2:	f023 0320 	bicne.w	r3, r3, #32
     eb6:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
     eb8:	2102      	movne	r1, #2
     eba:	e7d5      	b.n	e68 <process_event+0x168>
     ebc:	00006295 	.word	0x00006295

00000ec0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
     ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
     ec2:	4e08      	ldr	r6, [pc, #32]	; (ee4 <extract_decimal+0x24>)
     ec4:	6802      	ldr	r2, [r0, #0]
{
     ec6:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
     ec8:	270a      	movs	r7, #10
	size_t val = 0;
     eca:	2000      	movs	r0, #0
     ecc:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
     ece:	3201      	adds	r2, #1
     ed0:	780c      	ldrb	r4, [r1, #0]
     ed2:	5da5      	ldrb	r5, [r4, r6]
     ed4:	076d      	lsls	r5, r5, #29
     ed6:	d401      	bmi.n	edc <extract_decimal+0x1c>
	}
	*str = sp;
     ed8:	6019      	str	r1, [r3, #0]
	return val;
}
     eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
     edc:	fb07 4000 	mla	r0, r7, r0, r4
     ee0:	3830      	subs	r0, #48	; 0x30
     ee2:	e7f3      	b.n	ecc <extract_decimal+0xc>
     ee4:	00007fac 	.word	0x00007fac

00000ee8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
     ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     eec:	4615      	mov	r5, r2
     eee:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
     ef0:	78d3      	ldrb	r3, [r2, #3]
     ef2:	4a22      	ldr	r2, [pc, #136]	; (f7c <encode_uint+0x94>)
     ef4:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
     ef8:	2b6f      	cmp	r3, #111	; 0x6f
{
     efa:	4680      	mov	r8, r0
     efc:	460f      	mov	r7, r1
     efe:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
     f02:	d029      	beq.n	f58 <encode_uint+0x70>
     f04:	d824      	bhi.n	f50 <encode_uint+0x68>
		return 16;
     f06:	2b58      	cmp	r3, #88	; 0x58
     f08:	bf14      	ite	ne
     f0a:	260a      	movne	r6, #10
     f0c:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
     f0e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
     f12:	4632      	mov	r2, r6
     f14:	2300      	movs	r3, #0
     f16:	4640      	mov	r0, r8
     f18:	4639      	mov	r1, r7
     f1a:	f7ff f8f1 	bl	100 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
     f1e:	2a09      	cmp	r2, #9
     f20:	b2d4      	uxtb	r4, r2
     f22:	d81e      	bhi.n	f62 <encode_uint+0x7a>
     f24:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
     f26:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
     f28:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
     f2a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
     f2e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
     f32:	d301      	bcc.n	f38 <encode_uint+0x50>
     f34:	45d1      	cmp	r9, sl
     f36:	d811      	bhi.n	f5c <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
     f38:	782b      	ldrb	r3, [r5, #0]
     f3a:	069b      	lsls	r3, r3, #26
     f3c:	d505      	bpl.n	f4a <encode_uint+0x62>
		if (radix == 8) {
     f3e:	2e08      	cmp	r6, #8
     f40:	d115      	bne.n	f6e <encode_uint+0x86>
			conv->altform_0 = true;
     f42:	78ab      	ldrb	r3, [r5, #2]
     f44:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
     f48:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
     f4a:	4648      	mov	r0, r9
     f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
     f50:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
     f54:	2b70      	cmp	r3, #112	; 0x70
     f56:	e7d7      	b.n	f08 <encode_uint+0x20>
	switch (specifier) {
     f58:	2608      	movs	r6, #8
     f5a:	e7d8      	b.n	f0e <encode_uint+0x26>
		value /= radix;
     f5c:	4680      	mov	r8, r0
     f5e:	460f      	mov	r7, r1
     f60:	e7d7      	b.n	f12 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
     f62:	f1bb 0f01 	cmp.w	fp, #1
     f66:	bf0c      	ite	eq
     f68:	3437      	addeq	r4, #55	; 0x37
     f6a:	3457      	addne	r4, #87	; 0x57
     f6c:	e7db      	b.n	f26 <encode_uint+0x3e>
		} else if (radix == 16) {
     f6e:	2e10      	cmp	r6, #16
     f70:	d1eb      	bne.n	f4a <encode_uint+0x62>
			conv->altform_0c = true;
     f72:	78ab      	ldrb	r3, [r5, #2]
     f74:	f043 0310 	orr.w	r3, r3, #16
     f78:	e7e6      	b.n	f48 <encode_uint+0x60>
     f7a:	bf00      	nop
     f7c:	00007fac 	.word	0x00007fac

00000f80 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f84:	4682      	mov	sl, r0
     f86:	b093      	sub	sp, #76	; 0x4c
     f88:	468b      	mov	fp, r1
     f8a:	4691      	mov	r9, r2
     f8c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     f8e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     f90:	f899 0000 	ldrb.w	r0, [r9]
     f94:	b908      	cbnz	r0, f9a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     f96:	4628      	mov	r0, r5
     f98:	e33d      	b.n	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
			OUTC(*fp++);
     f9a:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
     f9e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     fa0:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
     fa2:	d006      	beq.n	fb2 <cbvprintf+0x32>
			OUTC('%');
     fa4:	4659      	mov	r1, fp
     fa6:	47d0      	blx	sl
     fa8:	2800      	cmp	r0, #0
     faa:	f2c0 8334 	blt.w	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
     fae:	3501      	adds	r5, #1
			break;
     fb0:	e1f5      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		} state = {
     fb2:	2218      	movs	r2, #24
     fb4:	2100      	movs	r1, #0
     fb6:	a80c      	add	r0, sp, #48	; 0x30
     fb8:	f006 f8e3 	bl	7182 <memset>
	if (*sp == '%') {
     fbc:	f899 3001 	ldrb.w	r3, [r9, #1]
     fc0:	2b25      	cmp	r3, #37	; 0x25
     fc2:	d05a      	beq.n	107a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
     fc4:	f109 0201 	add.w	r2, r9, #1
     fc8:	4616      	mov	r6, r2
		switch (*sp) {
     fca:	f812 3b01 	ldrb.w	r3, [r2], #1
     fce:	2b2b      	cmp	r3, #43	; 0x2b
     fd0:	f000 808b 	beq.w	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
     fd4:	d879      	bhi.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
     fd6:	2b20      	cmp	r3, #32
     fd8:	f000 808c 	beq.w	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
     fdc:	2b23      	cmp	r3, #35	; 0x23
     fde:	f000 808e 	beq.w	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
	if (conv->flag_zero && conv->flag_dash) {
     fe2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     fe6:	f003 0244 	and.w	r2, r3, #68	; 0x44
     fea:	2a44      	cmp	r2, #68	; 0x44
     fec:	d103      	bne.n	ff6 <cbvprintf+0x76>
		conv->flag_zero = false;
     fee:	f36f 1386 	bfc	r3, #6, #1
     ff2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
     ff6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     ffa:	9605      	str	r6, [sp, #20]
     ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1000:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    1004:	7833      	ldrb	r3, [r6, #0]
    1006:	2b2a      	cmp	r3, #42	; 0x2a
    1008:	d17e      	bne.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
		conv->width_star = true;
    100a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    100e:	f043 0301 	orr.w	r3, r3, #1
    1012:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    1016:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    1018:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    101a:	781a      	ldrb	r2, [r3, #0]
    101c:	2a2e      	cmp	r2, #46	; 0x2e
    101e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1022:	bf0c      	ite	eq
    1024:	2101      	moveq	r1, #1
    1026:	2100      	movne	r1, #0
    1028:	f361 0241 	bfi	r2, r1, #1, #1
    102c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    1030:	d10b      	bne.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
	++sp;
    1032:	1c5a      	adds	r2, r3, #1
    1034:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    1036:	785a      	ldrb	r2, [r3, #1]
    1038:	2a2a      	cmp	r2, #42	; 0x2a
    103a:	d17b      	bne.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
		conv->prec_star = true;
    103c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1040:	f042 0204 	orr.w	r2, r2, #4
    1044:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    1048:	3302      	adds	r3, #2
	switch (*sp) {
    104a:	4619      	mov	r1, r3
    104c:	f811 0b01 	ldrb.w	r0, [r1], #1
    1050:	286c      	cmp	r0, #108	; 0x6c
    1052:	f000 80b6 	beq.w	11c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c2>
    1056:	d87d      	bhi.n	1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    1058:	2868      	cmp	r0, #104	; 0x68
    105a:	f000 8084 	beq.w	1166 <CONFIG_FPROTECT_BLOCK_SIZE+0x166>
    105e:	286a      	cmp	r0, #106	; 0x6a
    1060:	f000 80b9 	beq.w	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
    1064:	284c      	cmp	r0, #76	; 0x4c
    1066:	f000 80bd 	beq.w	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
		conv->length_mod = LENGTH_NONE;
    106a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    106e:	f36f 02c6 	bfc	r2, #3, #4
    1072:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    1076:	4619      	mov	r1, r3
    1078:	e080      	b.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
		conv->specifier = *sp++;
    107a:	f109 0202 	add.w	r2, r9, #2
    107e:	9202      	str	r2, [sp, #8]
    1080:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    1084:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1088:	07d9      	lsls	r1, r3, #31
    108a:	f140 814a 	bpl.w	1322 <CONFIG_FPROTECT_BLOCK_SIZE+0x322>
			width = va_arg(ap, int);
    108e:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1092:	f1b8 0f00 	cmp.w	r8, #0
    1096:	da07      	bge.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
				conv->flag_dash = true;
    1098:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    109c:	f042 0204 	orr.w	r2, r2, #4
    10a0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    10a4:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    10a8:	075a      	lsls	r2, r3, #29
    10aa:	f140 8143 	bpl.w	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
			int arg = va_arg(ap, int);
    10ae:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    10b2:	2f00      	cmp	r7, #0
    10b4:	f280 8142 	bge.w	133c <CONFIG_FPROTECT_BLOCK_SIZE+0x33c>
				conv->prec_present = false;
    10b8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    10bc:	f36f 0341 	bfc	r3, #1, #1
    10c0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    10c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    10c8:	e138      	b.n	133c <CONFIG_FPROTECT_BLOCK_SIZE+0x33c>
		switch (*sp) {
    10ca:	2b2d      	cmp	r3, #45	; 0x2d
    10cc:	d006      	beq.n	10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>
    10ce:	2b30      	cmp	r3, #48	; 0x30
    10d0:	d187      	bne.n	fe2 <cbvprintf+0x62>
			conv->flag_zero = true;
    10d2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    10d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    10da:	e003      	b.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
			conv->flag_dash = true;
    10dc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    10e0:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    10e4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    10e8:	e76e      	b.n	fc8 <cbvprintf+0x48>
			conv->flag_plus = true;
    10ea:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    10ee:	f043 0308 	orr.w	r3, r3, #8
    10f2:	e7f7      	b.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
			conv->flag_space = true;
    10f4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    10f8:	f043 0310 	orr.w	r3, r3, #16
    10fc:	e7f2      	b.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
			conv->flag_hash = true;
    10fe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1102:	f043 0320 	orr.w	r3, r3, #32
    1106:	e7ed      	b.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
	size_t width = extract_decimal(&sp);
    1108:	a805      	add	r0, sp, #20
    110a:	f7ff fed9 	bl	ec0 <extract_decimal>
	if (sp != wp) {
    110e:	9b05      	ldr	r3, [sp, #20]
    1110:	42b3      	cmp	r3, r6
    1112:	d081      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
		conv->unsupported |= ((conv->width_value < 0)
    1114:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    1118:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    111a:	f3c1 0240 	ubfx	r2, r1, #1, #1
    111e:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    1122:	0052      	lsls	r2, r2, #1
    1124:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1128:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    112c:	430a      	orrs	r2, r1
    112e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    1132:	e771      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
	size_t prec = extract_decimal(&sp);
    1134:	a805      	add	r0, sp, #20
    1136:	f7ff fec3 	bl	ec0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    113a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    113e:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    1140:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1144:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    1148:	f360 0341 	bfi	r3, r0, #1, #1
    114c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    1150:	9b05      	ldr	r3, [sp, #20]
    1152:	e77a      	b.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
	switch (*sp) {
    1154:	2874      	cmp	r0, #116	; 0x74
    1156:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    115a:	d040      	beq.n	11de <CONFIG_FPROTECT_BLOCK_SIZE+0x1de>
    115c:	287a      	cmp	r0, #122	; 0x7a
    115e:	d184      	bne.n	106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
		conv->length_mod = LENGTH_Z;
    1160:	4613      	mov	r3, r2
    1162:	2206      	movs	r2, #6
    1164:	e028      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
		if (*++sp == 'h') {
    1166:	785a      	ldrb	r2, [r3, #1]
    1168:	2a68      	cmp	r2, #104	; 0x68
    116a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    116e:	d121      	bne.n	11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>
			conv->length_mod = LENGTH_HH;
    1170:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1172:	f361 02c6 	bfi	r2, r1, #3, #4
    1176:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    117a:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    117c:	460b      	mov	r3, r1
    117e:	f813 2b01 	ldrb.w	r2, [r3], #1
    1182:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    1184:	2a78      	cmp	r2, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    1186:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    118a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    118e:	f200 80c0 	bhi.w	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    1192:	2a57      	cmp	r2, #87	; 0x57
    1194:	d833      	bhi.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
    1196:	2a41      	cmp	r2, #65	; 0x41
    1198:	d003      	beq.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
    119a:	3a45      	subs	r2, #69	; 0x45
    119c:	2a02      	cmp	r2, #2
    119e:	f200 80b8 	bhi.w	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
		conv->specifier_cat = SPECIFIER_FP;
    11a2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    11a6:	2204      	movs	r2, #4
    11a8:	f362 0302 	bfi	r3, r2, #0, #3
    11ac:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    11b0:	2301      	movs	r3, #1
			break;
    11b2:	e085      	b.n	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
			conv->length_mod = LENGTH_H;
    11b4:	4613      	mov	r3, r2
    11b6:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    11b8:	f362 03c6 	bfi	r3, r2, #3, #4
    11bc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    11c0:	e7dc      	b.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
		if (*++sp == 'l') {
    11c2:	785a      	ldrb	r2, [r3, #1]
    11c4:	2a6c      	cmp	r2, #108	; 0x6c
    11c6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    11ca:	d101      	bne.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
			conv->length_mod = LENGTH_LL;
    11cc:	2104      	movs	r1, #4
    11ce:	e7d0      	b.n	1172 <CONFIG_FPROTECT_BLOCK_SIZE+0x172>
			conv->length_mod = LENGTH_L;
    11d0:	4613      	mov	r3, r2
    11d2:	2203      	movs	r2, #3
    11d4:	e7f0      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
		conv->length_mod = LENGTH_J;
    11d6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    11da:	2205      	movs	r2, #5
    11dc:	e7ec      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
		conv->length_mod = LENGTH_T;
    11de:	4613      	mov	r3, r2
    11e0:	2207      	movs	r2, #7
    11e2:	e7e9      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
		conv->unsupported = true;
    11e4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    11e8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    11ec:	f023 0302 	bic.w	r3, r3, #2
    11f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    11f4:	f043 0302 	orr.w	r3, r3, #2
    11f8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    11fc:	e7be      	b.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
	switch (conv->specifier) {
    11fe:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1202:	2920      	cmp	r1, #32
    1204:	f200 8085 	bhi.w	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    1208:	a001      	add	r0, pc, #4	; (adr r0, 1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
    120a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    120e:	bf00      	nop
    1210:	000012d5 	.word	0x000012d5
    1214:	00001313 	.word	0x00001313
    1218:	00001313 	.word	0x00001313
    121c:	00001313 	.word	0x00001313
    1220:	00001313 	.word	0x00001313
    1224:	00001313 	.word	0x00001313
    1228:	00001313 	.word	0x00001313
    122c:	00001313 	.word	0x00001313
    1230:	00001313 	.word	0x00001313
    1234:	000011a3 	.word	0x000011a3
    1238:	00001313 	.word	0x00001313
    123c:	000012d5 	.word	0x000012d5
    1240:	00001295 	.word	0x00001295
    1244:	000011a3 	.word	0x000011a3
    1248:	000011a3 	.word	0x000011a3
    124c:	000011a3 	.word	0x000011a3
    1250:	00001313 	.word	0x00001313
    1254:	00001295 	.word	0x00001295
    1258:	00001313 	.word	0x00001313
    125c:	00001313 	.word	0x00001313
    1260:	00001313 	.word	0x00001313
    1264:	00001313 	.word	0x00001313
    1268:	000012dd 	.word	0x000012dd
    126c:	000012d5 	.word	0x000012d5
    1270:	000012f9 	.word	0x000012f9
    1274:	00001313 	.word	0x00001313
    1278:	00001313 	.word	0x00001313
    127c:	000012f9 	.word	0x000012f9
    1280:	00001313 	.word	0x00001313
    1284:	000012d5 	.word	0x000012d5
    1288:	00001313 	.word	0x00001313
    128c:	00001313 	.word	0x00001313
    1290:	000012d5 	.word	0x000012d5
		conv->specifier_cat = SPECIFIER_SINT;
    1294:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    1298:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    129a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    129e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    12a2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    12a4:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    12a8:	bf02      	ittt	eq
    12aa:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    12ae:	f041 0101 	orreq.w	r1, r1, #1
    12b2:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    12b6:	2a63      	cmp	r2, #99	; 0x63
    12b8:	d131      	bne.n	131e <CONFIG_FPROTECT_BLOCK_SIZE+0x31e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    12ba:	3b00      	subs	r3, #0
    12bc:	bf18      	it	ne
    12be:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    12c0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    12c4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    12c8:	430b      	orrs	r3, r1
    12ca:	f363 0241 	bfi	r2, r3, #1, #1
    12ce:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    12d2:	e6d7      	b.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
		conv->specifier_cat = SPECIFIER_UINT;
    12d4:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    12d8:	2002      	movs	r0, #2
    12da:	e7de      	b.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
		conv->specifier_cat = SPECIFIER_PTR;
    12dc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    12e0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    12e4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    12e8:	2103      	movs	r1, #3
    12ea:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    12ee:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    12f0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    12f4:	4143      	adcs	r3, r0
    12f6:	e7e3      	b.n	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
		conv->specifier_cat = SPECIFIER_PTR;
    12f8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    12fc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    12fe:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1302:	f361 0202 	bfi	r2, r1, #0, #3
    1306:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    130a:	bf14      	ite	ne
    130c:	2301      	movne	r3, #1
    130e:	2300      	moveq	r3, #0
    1310:	e7d6      	b.n	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
		conv->invalid = true;
    1312:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1316:	f043 0301 	orr.w	r3, r3, #1
    131a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    131e:	2300      	movs	r3, #0
    1320:	e7ce      	b.n	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
		} else if (conv->width_present) {
    1322:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    1326:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1328:	bfb4      	ite	lt
    132a:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    132e:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    1332:	e6b9      	b.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
		} else if (conv->prec_present) {
    1334:	079f      	lsls	r7, r3, #30
    1336:	f57f aec5 	bpl.w	10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
			precision = conv->prec_value;
    133a:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    133c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    1340:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1342:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    1346:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    134a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    134e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1350:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1354:	d139      	bne.n	13ca <CONFIG_FPROTECT_BLOCK_SIZE+0x3ca>
			switch (length_mod) {
    1356:	1ecb      	subs	r3, r1, #3
    1358:	2b04      	cmp	r3, #4
    135a:	d823      	bhi.n	13a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a4>
    135c:	e8df f003 	tbb	[pc, r3]
    1360:	22090903 	.word	0x22090903
    1364:	22          	.byte	0x22
    1365:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1366:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    136a:	17da      	asrs	r2, r3, #31
    136c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    1370:	e006      	b.n	1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>
					(sint_value_type)va_arg(ap, intmax_t);
    1372:	3407      	adds	r4, #7
    1374:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1378:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    137c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    1380:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1384:	f013 0603 	ands.w	r6, r3, #3
    1388:	d057      	beq.n	143a <CONFIG_FPROTECT_BLOCK_SIZE+0x43a>
			OUTS(sp, fp);
    138a:	9b02      	ldr	r3, [sp, #8]
    138c:	464a      	mov	r2, r9
    138e:	4659      	mov	r1, fp
    1390:	4650      	mov	r0, sl
    1392:	f005 f802 	bl	639a <outs>
    1396:	2800      	cmp	r0, #0
    1398:	f2c0 813d 	blt.w	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
    139c:	4405      	add	r5, r0
			OUTS(bps, bpe);
    139e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    13a2:	e5f5      	b.n	f90 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13a4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    13a8:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13aa:	ea4f 72e3 	mov.w	r2, r3, asr #31
    13ae:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    13b2:	d105      	bne.n	13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>
				value->uint = (unsigned char)value->uint;
    13b4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    13b8:	930c      	str	r3, [sp, #48]	; 0x30
    13ba:	2300      	movs	r3, #0
    13bc:	930d      	str	r3, [sp, #52]	; 0x34
    13be:	e7df      	b.n	1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>
			} else if (length_mod == LENGTH_H) {
    13c0:	2902      	cmp	r1, #2
    13c2:	d1dd      	bne.n	1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>
				value->sint = (short)value->sint;
    13c4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    13c8:	e7cf      	b.n	136a <CONFIG_FPROTECT_BLOCK_SIZE+0x36a>
		} else if (specifier_cat == SPECIFIER_UINT) {
    13ca:	2b02      	cmp	r3, #2
    13cc:	d123      	bne.n	1416 <CONFIG_FPROTECT_BLOCK_SIZE+0x416>
			switch (length_mod) {
    13ce:	1ecb      	subs	r3, r1, #3
    13d0:	2b04      	cmp	r3, #4
    13d2:	d813      	bhi.n	13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
    13d4:	e8df f003 	tbb	[pc, r3]
    13d8:	120a0a03 	.word	0x120a0a03
    13dc:	12          	.byte	0x12
    13dd:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    13de:	6822      	ldr	r2, [r4, #0]
    13e0:	920c      	str	r2, [sp, #48]	; 0x30
    13e2:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    13e4:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    13e6:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    13e8:	4604      	mov	r4, r0
    13ea:	e7c9      	b.n	1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>
					(uint_value_type)va_arg(ap,
    13ec:	1de0      	adds	r0, r4, #7
    13ee:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    13f2:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    13f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    13fa:	e7f5      	b.n	13e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e8>
					(uint_value_type)va_arg(ap, size_t);
    13fc:	f854 3b04 	ldr.w	r3, [r4], #4
    1400:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1402:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1404:	f04f 0300 	mov.w	r3, #0
    1408:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    140a:	d0d3      	beq.n	13b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b4>
			} else if (length_mod == LENGTH_H) {
    140c:	2902      	cmp	r1, #2
    140e:	d1b7      	bne.n	1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>
				value->uint = (unsigned short)value->uint;
    1410:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1414:	e7d0      	b.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
		} else if (specifier_cat == SPECIFIER_FP) {
    1416:	2b04      	cmp	r3, #4
    1418:	d109      	bne.n	142e <CONFIG_FPROTECT_BLOCK_SIZE+0x42e>
					(sint_value_type)va_arg(ap, long long);
    141a:	1de3      	adds	r3, r4, #7
    141c:	f023 0307 	bic.w	r3, r3, #7
    1420:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1424:	e9d3 2300 	ldrd	r2, r3, [r3]
    1428:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    142c:	e7a8      	b.n	1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>
		} else if (specifier_cat == SPECIFIER_PTR) {
    142e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1430:	bf04      	itt	eq
    1432:	f854 3b04 	ldreq.w	r3, [r4], #4
    1436:	930c      	streq	r3, [sp, #48]	; 0x30
    1438:	e7a2      	b.n	1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>
		switch (conv->specifier) {
    143a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    143e:	2878      	cmp	r0, #120	; 0x78
    1440:	d8ad      	bhi.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    1442:	2862      	cmp	r0, #98	; 0x62
    1444:	d820      	bhi.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
    1446:	2825      	cmp	r0, #37	; 0x25
    1448:	f43f adac 	beq.w	fa4 <cbvprintf+0x24>
    144c:	2858      	cmp	r0, #88	; 0x58
    144e:	d1a6      	bne.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1450:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    1454:	9300      	str	r3, [sp, #0]
    1456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    145a:	ab06      	add	r3, sp, #24
    145c:	aa0e      	add	r2, sp, #56	; 0x38
    145e:	f7ff fd43 	bl	ee8 <encode_uint>
    1462:	4681      	mov	r9, r0
			if (precision >= 0) {
    1464:	2f00      	cmp	r7, #0
    1466:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    146a:	db0b      	blt.n	1484 <CONFIG_FPROTECT_BLOCK_SIZE+0x484>
				conv->flag_zero = false;
    146c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    1470:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    1474:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1478:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    147a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    147e:	d901      	bls.n	1484 <CONFIG_FPROTECT_BLOCK_SIZE+0x484>
					conv->pad0_value = precision - (int)len;
    1480:	1afb      	subs	r3, r7, r3
    1482:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    1484:	4607      	mov	r7, r0
    1486:	e03c      	b.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
		switch (conv->specifier) {
    1488:	3863      	subs	r0, #99	; 0x63
    148a:	2815      	cmp	r0, #21
    148c:	d887      	bhi.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    148e:	a201      	add	r2, pc, #4	; (adr r2, 1494 <CONFIG_FPROTECT_BLOCK_SIZE+0x494>)
    1490:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1494:	00001513 	.word	0x00001513
    1498:	00001575 	.word	0x00001575
    149c:	0000139f 	.word	0x0000139f
    14a0:	0000139f 	.word	0x0000139f
    14a4:	0000139f 	.word	0x0000139f
    14a8:	0000139f 	.word	0x0000139f
    14ac:	00001575 	.word	0x00001575
    14b0:	0000139f 	.word	0x0000139f
    14b4:	0000139f 	.word	0x0000139f
    14b8:	0000139f 	.word	0x0000139f
    14bc:	0000139f 	.word	0x0000139f
    14c0:	000015cf 	.word	0x000015cf
    14c4:	0000159d 	.word	0x0000159d
    14c8:	000015a1 	.word	0x000015a1
    14cc:	0000139f 	.word	0x0000139f
    14d0:	0000139f 	.word	0x0000139f
    14d4:	000014ed 	.word	0x000014ed
    14d8:	0000139f 	.word	0x0000139f
    14dc:	0000159d 	.word	0x0000159d
    14e0:	0000139f 	.word	0x0000139f
    14e4:	0000139f 	.word	0x0000139f
    14e8:	0000159d 	.word	0x0000159d
			if (precision >= 0) {
    14ec:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    14ee:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    14f2:	db0a      	blt.n	150a <CONFIG_FPROTECT_BLOCK_SIZE+0x50a>
				len = strnlen(bps, precision);
    14f4:	4639      	mov	r1, r7
    14f6:	4648      	mov	r0, r9
    14f8:	f005 fe53 	bl	71a2 <strnlen>
			bpe = bps + len;
    14fc:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    1500:	2600      	movs	r6, #0
		if (bps == NULL) {
    1502:	f1b9 0f00 	cmp.w	r9, #0
    1506:	d10c      	bne.n	1522 <CONFIG_FPROTECT_BLOCK_SIZE+0x522>
    1508:	e749      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
				len = strlen(bps);
    150a:	4648      	mov	r0, r9
    150c:	f7fe ff6f 	bl	3ee <strlen>
    1510:	e7f4      	b.n	14fc <CONFIG_FPROTECT_BLOCK_SIZE+0x4fc>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1514:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    1518:	2600      	movs	r6, #0
			bpe = buf + 1;
    151a:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    151e:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    1522:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    1526:	b106      	cbz	r6, 152a <CONFIG_FPROTECT_BLOCK_SIZE+0x52a>
			nj_len += 1U;
    1528:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    152a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    152e:	06d0      	lsls	r0, r2, #27
    1530:	d566      	bpl.n	1600 <CONFIG_FPROTECT_BLOCK_SIZE+0x600>
			nj_len += 2U;
    1532:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1534:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1536:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    1538:	bf48      	it	mi
    153a:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    153c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    153e:	bf48      	it	mi
    1540:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1542:	f1b8 0f00 	cmp.w	r8, #0
    1546:	dd73      	ble.n	1630 <CONFIG_FPROTECT_BLOCK_SIZE+0x630>
			if (!conv->flag_dash) {
    1548:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    154c:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    1550:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1554:	9303      	str	r3, [sp, #12]
    1556:	0753      	lsls	r3, r2, #29
    1558:	d46a      	bmi.n	1630 <CONFIG_FPROTECT_BLOCK_SIZE+0x630>
				if (conv->flag_zero) {
    155a:	0650      	lsls	r0, r2, #25
    155c:	d55e      	bpl.n	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
					if (sign != 0) {
    155e:	b13e      	cbz	r6, 1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>
						OUTC(sign);
    1560:	4659      	mov	r1, fp
    1562:	4630      	mov	r0, r6
    1564:	47d0      	blx	sl
    1566:	2800      	cmp	r0, #0
    1568:	db55      	blt.n	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
						sign = 0;
    156a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    156c:	3501      	adds	r5, #1
						sign = 0;
    156e:	461e      	mov	r6, r3
					pad = '0';
    1570:	2330      	movs	r3, #48	; 0x30
    1572:	e054      	b.n	161e <CONFIG_FPROTECT_BLOCK_SIZE+0x61e>
			if (conv->flag_plus) {
    1574:	071e      	lsls	r6, r3, #28
    1576:	d40f      	bmi.n	1598 <CONFIG_FPROTECT_BLOCK_SIZE+0x598>
				sign = ' ';
    1578:	f013 0610 	ands.w	r6, r3, #16
    157c:	bf18      	it	ne
    157e:	2620      	movne	r6, #32
			sint = value->sint;
    1580:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    1584:	2b00      	cmp	r3, #0
    1586:	f6bf af63 	bge.w	1450 <CONFIG_FPROTECT_BLOCK_SIZE+0x450>
				value->uint = (uint_value_type)-sint;
    158a:	4252      	negs	r2, r2
    158c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1590:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    1594:	262d      	movs	r6, #45	; 0x2d
    1596:	e75b      	b.n	1450 <CONFIG_FPROTECT_BLOCK_SIZE+0x450>
				sign = '+';
    1598:	262b      	movs	r6, #43	; 0x2b
    159a:	e7f1      	b.n	1580 <CONFIG_FPROTECT_BLOCK_SIZE+0x580>
		switch (conv->specifier) {
    159c:	2600      	movs	r6, #0
    159e:	e757      	b.n	1450 <CONFIG_FPROTECT_BLOCK_SIZE+0x450>
			if (value->ptr != NULL) {
    15a0:	980c      	ldr	r0, [sp, #48]	; 0x30
    15a2:	b340      	cbz	r0, 15f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5f6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    15a4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    15a8:	9300      	str	r3, [sp, #0]
    15aa:	aa0e      	add	r2, sp, #56	; 0x38
    15ac:	ab06      	add	r3, sp, #24
    15ae:	2100      	movs	r1, #0
    15b0:	f7ff fc9a 	bl	ee8 <encode_uint>
				conv->altform_0c = true;
    15b4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    15b8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    15bc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    15c0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    15c4:	4681      	mov	r9, r0
				conv->altform_0c = true;
    15c6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    15ca:	2600      	movs	r6, #0
				goto prec_int_pad0;
    15cc:	e74a      	b.n	1464 <CONFIG_FPROTECT_BLOCK_SIZE+0x464>
				store_count(conv, value->ptr, count);
    15ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    15d0:	2907      	cmp	r1, #7
    15d2:	f63f aee4 	bhi.w	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    15d6:	e8df f001 	tbb	[pc, r1]
    15da:	040c      	.short	0x040c
    15dc:	08080c06 	.word	0x08080c06
    15e0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    15e2:	701d      	strb	r5, [r3, #0]
		break;
    15e4:	e6db      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		*(short *)dp = (short)count;
    15e6:	801d      	strh	r5, [r3, #0]
		break;
    15e8:	e6d9      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		*(intmax_t *)dp = (intmax_t)count;
    15ea:	17ea      	asrs	r2, r5, #31
    15ec:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    15f0:	e6d5      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    15f2:	601d      	str	r5, [r3, #0]
		break;
    15f4:	e6d3      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
			bpe = bps + 5;
    15f6:	4f2e      	ldr	r7, [pc, #184]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    15f8:	4606      	mov	r6, r0
			bps = "(nil)";
    15fa:	f1a7 0905 	sub.w	r9, r7, #5
    15fe:	e790      	b.n	1522 <CONFIG_FPROTECT_BLOCK_SIZE+0x522>
		} else if (conv->altform_0) {
    1600:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1602:	bf48      	it	mi
    1604:	3301      	addmi	r3, #1
    1606:	e795      	b.n	1534 <CONFIG_FPROTECT_BLOCK_SIZE+0x534>
					OUTC(pad);
    1608:	4618      	mov	r0, r3
    160a:	4659      	mov	r1, fp
    160c:	9303      	str	r3, [sp, #12]
    160e:	47d0      	blx	sl
    1610:	2800      	cmp	r0, #0
    1612:	9b03      	ldr	r3, [sp, #12]
    1614:	da04      	bge.n	1620 <CONFIG_FPROTECT_BLOCK_SIZE+0x620>
#undef OUTS
#undef OUTC
}
    1616:	b013      	add	sp, #76	; 0x4c
    1618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    161c:	2320      	movs	r3, #32
    161e:	4445      	add	r5, r8
    1620:	4642      	mov	r2, r8
				while (width-- > 0) {
    1622:	2a00      	cmp	r2, #0
    1624:	eba5 0108 	sub.w	r1, r5, r8
    1628:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    162c:	dcec      	bgt.n	1608 <CONFIG_FPROTECT_BLOCK_SIZE+0x608>
    162e:	460d      	mov	r5, r1
		if (sign != 0) {
    1630:	b12e      	cbz	r6, 163e <CONFIG_FPROTECT_BLOCK_SIZE+0x63e>
			OUTC(sign);
    1632:	4659      	mov	r1, fp
    1634:	4630      	mov	r0, r6
    1636:	47d0      	blx	sl
    1638:	2800      	cmp	r0, #0
    163a:	dbec      	blt.n	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
    163c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    163e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1642:	06d9      	lsls	r1, r3, #27
    1644:	d401      	bmi.n	164a <CONFIG_FPROTECT_BLOCK_SIZE+0x64a>
    1646:	071a      	lsls	r2, r3, #28
    1648:	d505      	bpl.n	1656 <CONFIG_FPROTECT_BLOCK_SIZE+0x656>
				OUTC('0');
    164a:	4659      	mov	r1, fp
    164c:	2030      	movs	r0, #48	; 0x30
    164e:	47d0      	blx	sl
    1650:	2800      	cmp	r0, #0
    1652:	dbe0      	blt.n	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
    1654:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1656:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    165a:	06db      	lsls	r3, r3, #27
    165c:	d506      	bpl.n	166c <CONFIG_FPROTECT_BLOCK_SIZE+0x66c>
				OUTC(conv->specifier);
    165e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    1662:	4659      	mov	r1, fp
    1664:	47d0      	blx	sl
    1666:	2800      	cmp	r0, #0
    1668:	dbd5      	blt.n	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
    166a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    166c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    166e:	442e      	add	r6, r5
    1670:	1b73      	subs	r3, r6, r5
    1672:	2b00      	cmp	r3, #0
    1674:	dc15      	bgt.n	16a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a2>
			OUTS(bps, bpe);
    1676:	463b      	mov	r3, r7
    1678:	464a      	mov	r2, r9
    167a:	4659      	mov	r1, fp
    167c:	4650      	mov	r0, sl
    167e:	f004 fe8c 	bl	639a <outs>
    1682:	2800      	cmp	r0, #0
    1684:	dbc7      	blt.n	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
    1686:	4405      	add	r5, r0
		while (width > 0) {
    1688:	44a8      	add	r8, r5
    168a:	eba8 0305 	sub.w	r3, r8, r5
    168e:	2b00      	cmp	r3, #0
    1690:	f77f ae85 	ble.w	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
			OUTC(' ');
    1694:	4659      	mov	r1, fp
    1696:	2020      	movs	r0, #32
    1698:	47d0      	blx	sl
    169a:	2800      	cmp	r0, #0
    169c:	dbbb      	blt.n	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
    169e:	3501      	adds	r5, #1
			--width;
    16a0:	e7f3      	b.n	168a <CONFIG_FPROTECT_BLOCK_SIZE+0x68a>
				OUTC('0');
    16a2:	4659      	mov	r1, fp
    16a4:	2030      	movs	r0, #48	; 0x30
    16a6:	47d0      	blx	sl
    16a8:	2800      	cmp	r0, #0
    16aa:	dbb4      	blt.n	1616 <CONFIG_FPROTECT_BLOCK_SIZE+0x616>
    16ac:	3501      	adds	r5, #1
    16ae:	e7df      	b.n	1670 <CONFIG_FPROTECT_BLOCK_SIZE+0x670>
    16b0:	00007761 	.word	0x00007761

000016b4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    16b4:	b508      	push	{r3, lr}
    16b6:	f04f 0220 	mov.w	r2, #32
    16ba:	f3ef 8311 	mrs	r3, BASEPRI
    16be:	f382 8812 	msr	BASEPRI_MAX, r2
    16c2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    16c6:	f001 fcff 	bl	30c8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    16ca:	4803      	ldr	r0, [pc, #12]	; (16d8 <sys_reboot+0x24>)
    16cc:	f004 fd96 	bl	61fc <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    16d0:	f000 ff20 	bl	2514 <arch_cpu_idle>
    16d4:	e7fc      	b.n	16d0 <sys_reboot+0x1c>
    16d6:	bf00      	nop
    16d8:	00007762 	.word	0x00007762

000016dc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    16dc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    16de:	4910      	ldr	r1, [pc, #64]	; (1720 <enable_logger+0x44>)
    16e0:	4810      	ldr	r0, [pc, #64]	; (1724 <enable_logger+0x48>)
{
    16e2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    16e4:	2200      	movs	r2, #0
    16e6:	f005 fd01 	bl	70ec <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    16ea:	4d0f      	ldr	r5, [pc, #60]	; (1728 <enable_logger+0x4c>)
    16ec:	490f      	ldr	r1, [pc, #60]	; (172c <enable_logger+0x50>)
    16ee:	2200      	movs	r2, #0
    16f0:	2300      	movs	r3, #0
    16f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    16f6:	2400      	movs	r4, #0
    16f8:	230e      	movs	r3, #14
    16fa:	e9cd 3403 	strd	r3, r4, [sp, #12]
    16fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1702:	4b0b      	ldr	r3, [pc, #44]	; (1730 <enable_logger+0x54>)
    1704:	9400      	str	r4, [sp, #0]
    1706:	f44f 7240 	mov.w	r2, #768	; 0x300
    170a:	4628      	mov	r0, r5
    170c:	f003 fc56 	bl	4fbc <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1710:	4908      	ldr	r1, [pc, #32]	; (1734 <enable_logger+0x58>)
    1712:	4628      	mov	r0, r5
    1714:	f005 fbb4 	bl	6e80 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1718:	4620      	mov	r0, r4
    171a:	b009      	add	sp, #36	; 0x24
    171c:	bd30      	pop	{r4, r5, pc}
    171e:	bf00      	nop
    1720:	00001739 	.word	0x00001739
    1724:	20000660 	.word	0x20000660
    1728:	20000698 	.word	0x20000698
    172c:	200015a8 	.word	0x200015a8
    1730:	0000195d 	.word	0x0000195d
    1734:	0000778b 	.word	0x0000778b

00001738 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1738:	4801      	ldr	r0, [pc, #4]	; (1740 <log_process_thread_timer_expiry_fn+0x8>)
    173a:	f003 bd9d 	b.w	5278 <z_impl_k_sem_give>
    173e:	bf00      	nop
    1740:	2000024c 	.word	0x2000024c

00001744 <log_format_func_t_get>:
}
    1744:	4b01      	ldr	r3, [pc, #4]	; (174c <log_format_func_t_get+0x8>)
    1746:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    174a:	4770      	bx	lr
    174c:	000074c8 	.word	0x000074c8

00001750 <log_init>:
{
    1750:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1752:	4b12      	ldr	r3, [pc, #72]	; (179c <log_init+0x4c>)
    1754:	f3bf 8f5b 	dmb	ish
    1758:	e853 5f00 	ldrex	r5, [r3]
    175c:	1c6a      	adds	r2, r5, #1
    175e:	e843 2100 	strex	r1, r2, [r3]
    1762:	2900      	cmp	r1, #0
    1764:	d1f8      	bne.n	1758 <log_init+0x8>
    1766:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    176a:	b92d      	cbnz	r5, 1778 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    176c:	4c0c      	ldr	r4, [pc, #48]	; (17a0 <log_init+0x50>)
    176e:	4e0d      	ldr	r6, [pc, #52]	; (17a4 <log_init+0x54>)
    1770:	1b36      	subs	r6, r6, r4
    1772:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    1774:	42b5      	cmp	r5, r6
    1776:	db00      	blt.n	177a <log_init+0x2a>
}
    1778:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    177a:	7b23      	ldrb	r3, [r4, #12]
    177c:	b153      	cbz	r3, 1794 <log_init+0x44>
			if (backend->api->init != NULL) {
    177e:	6823      	ldr	r3, [r4, #0]
    1780:	699b      	ldr	r3, [r3, #24]
    1782:	b10b      	cbz	r3, 1788 <log_init+0x38>
				backend->api->init(backend);
    1784:	4620      	mov	r0, r4
    1786:	4798      	blx	r3
			log_backend_enable(backend,
    1788:	6863      	ldr	r3, [r4, #4]
    178a:	2204      	movs	r2, #4
    178c:	6819      	ldr	r1, [r3, #0]
    178e:	4620      	mov	r0, r4
    1790:	f000 f992 	bl	1ab8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1794:	3501      	adds	r5, #1
    1796:	3410      	adds	r4, #16
    1798:	e7ec      	b.n	1774 <log_init+0x24>
    179a:	bf00      	nop
    179c:	2000084c 	.word	0x2000084c
    17a0:	00007490 	.word	0x00007490
    17a4:	000074a0 	.word	0x000074a0

000017a8 <z_log_notify_backend_enabled>:
{
    17a8:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    17aa:	4c04      	ldr	r4, [pc, #16]	; (17bc <z_log_notify_backend_enabled+0x14>)
    17ac:	7823      	ldrb	r3, [r4, #0]
    17ae:	b913      	cbnz	r3, 17b6 <z_log_notify_backend_enabled+0xe>
    17b0:	4803      	ldr	r0, [pc, #12]	; (17c0 <z_log_notify_backend_enabled+0x18>)
    17b2:	f003 fd61 	bl	5278 <z_impl_k_sem_give>
	backend_attached = true;
    17b6:	2301      	movs	r3, #1
    17b8:	7023      	strb	r3, [r4, #0]
}
    17ba:	bd10      	pop	{r4, pc}
    17bc:	20001179 	.word	0x20001179
    17c0:	2000024c 	.word	0x2000024c

000017c4 <z_log_dropped>:
    17c4:	4b0c      	ldr	r3, [pc, #48]	; (17f8 <z_log_dropped+0x34>)
    17c6:	f3bf 8f5b 	dmb	ish
    17ca:	e853 2f00 	ldrex	r2, [r3]
    17ce:	3201      	adds	r2, #1
    17d0:	e843 2100 	strex	r1, r2, [r3]
    17d4:	2900      	cmp	r1, #0
    17d6:	d1f8      	bne.n	17ca <z_log_dropped+0x6>
    17d8:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    17dc:	b158      	cbz	r0, 17f6 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    17de:	f3bf 8f5b 	dmb	ish
    17e2:	4b06      	ldr	r3, [pc, #24]	; (17fc <z_log_dropped+0x38>)
    17e4:	e853 2f00 	ldrex	r2, [r3]
    17e8:	3a01      	subs	r2, #1
    17ea:	e843 2100 	strex	r1, r2, [r3]
    17ee:	2900      	cmp	r1, #0
    17f0:	d1f8      	bne.n	17e4 <z_log_dropped+0x20>
    17f2:	f3bf 8f5b 	dmb	ish
}
    17f6:	4770      	bx	lr
    17f8:	20000848 	.word	0x20000848
    17fc:	20000844 	.word	0x20000844

00001800 <z_log_dropped_read_and_clear>:
}
    1800:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1802:	4b06      	ldr	r3, [pc, #24]	; (181c <z_log_dropped_read_and_clear+0x1c>)
    1804:	f3bf 8f5b 	dmb	ish
    1808:	4602      	mov	r2, r0
    180a:	e853 0f00 	ldrex	r0, [r3]
    180e:	e843 2100 	strex	r1, r2, [r3]
    1812:	2900      	cmp	r1, #0
    1814:	d1f9      	bne.n	180a <z_log_dropped_read_and_clear+0xa>
    1816:	f3bf 8f5b 	dmb	ish
    181a:	4770      	bx	lr
    181c:	20000848 	.word	0x20000848

00001820 <dropped_notify>:
{
    1820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1822:	f7ff ffed 	bl	1800 <z_log_dropped_read_and_clear>
    1826:	4c0a      	ldr	r4, [pc, #40]	; (1850 <dropped_notify+0x30>)
    1828:	4d0a      	ldr	r5, [pc, #40]	; (1854 <dropped_notify+0x34>)
    182a:	1b2d      	subs	r5, r5, r4
    182c:	4607      	mov	r7, r0
    182e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1830:	2600      	movs	r6, #0
    1832:	42ae      	cmp	r6, r5
    1834:	db00      	blt.n	1838 <dropped_notify+0x18>
}
    1836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1838:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    183a:	795b      	ldrb	r3, [r3, #5]
    183c:	b12b      	cbz	r3, 184a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    183e:	6823      	ldr	r3, [r4, #0]
    1840:	691b      	ldr	r3, [r3, #16]
    1842:	b113      	cbz	r3, 184a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    1844:	4639      	mov	r1, r7
    1846:	4620      	mov	r0, r4
    1848:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    184a:	3601      	adds	r6, #1
    184c:	3410      	adds	r4, #16
    184e:	e7f0      	b.n	1832 <dropped_notify+0x12>
    1850:	00007490 	.word	0x00007490
    1854:	000074a0 	.word	0x000074a0

00001858 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1858:	4901      	ldr	r1, [pc, #4]	; (1860 <z_log_msg2_init+0x8>)
    185a:	4802      	ldr	r0, [pc, #8]	; (1864 <z_log_msg2_init+0xc>)
    185c:	f004 be68 	b.w	6530 <mpsc_pbuf_init>
    1860:	000074d4 	.word	0x000074d4
    1864:	20000850 	.word	0x20000850

00001868 <log_core_init>:
	panic_mode = false;
    1868:	4a08      	ldr	r2, [pc, #32]	; (188c <log_core_init+0x24>)
{
    186a:	b508      	push	{r3, lr}
	panic_mode = false;
    186c:	2300      	movs	r3, #0
    186e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1870:	4a07      	ldr	r2, [pc, #28]	; (1890 <log_core_init+0x28>)
    1872:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    1874:	4b07      	ldr	r3, [pc, #28]	; (1894 <log_core_init+0x2c>)
    1876:	4a08      	ldr	r2, [pc, #32]	; (1898 <log_core_init+0x30>)
    1878:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    187a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    187e:	f000 faff 	bl	1e80 <log_output_timestamp_freq_set>
}
    1882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    1886:	f7ff bfe7 	b.w	1858 <z_log_msg2_init>
    188a:	bf00      	nop
    188c:	2000117a 	.word	0x2000117a
    1890:	20000848 	.word	0x20000848
    1894:	200000c0 	.word	0x200000c0
    1898:	000067d9 	.word	0x000067d9

0000189c <z_log_msg2_alloc>:
{
    189c:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    189e:	2200      	movs	r2, #0
    18a0:	4801      	ldr	r0, [pc, #4]	; (18a8 <z_log_msg2_alloc+0xc>)
    18a2:	2300      	movs	r3, #0
    18a4:	f004 be65 	b.w	6572 <mpsc_pbuf_alloc>
    18a8:	20000850 	.word	0x20000850

000018ac <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    18ac:	4801      	ldr	r0, [pc, #4]	; (18b4 <z_log_msg2_claim+0x8>)
    18ae:	f004 bef6 	b.w	669e <mpsc_pbuf_claim>
    18b2:	bf00      	nop
    18b4:	20000850 	.word	0x20000850

000018b8 <z_log_msg2_free>:
{
    18b8:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    18ba:	4801      	ldr	r0, [pc, #4]	; (18c0 <z_log_msg2_free+0x8>)
    18bc:	f004 bf3b 	b.w	6736 <mpsc_pbuf_free>
    18c0:	20000850 	.word	0x20000850

000018c4 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    18c4:	4801      	ldr	r0, [pc, #4]	; (18cc <z_log_msg2_pending+0x8>)
    18c6:	f004 bf6a 	b.w	679e <mpsc_pbuf_is_pending>
    18ca:	bf00      	nop
    18cc:	20000850 	.word	0x20000850

000018d0 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    18d0:	4b1d      	ldr	r3, [pc, #116]	; (1948 <z_impl_log_process+0x78>)
    18d2:	781b      	ldrb	r3, [r3, #0]
{
    18d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18d8:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    18da:	b903      	cbnz	r3, 18de <z_impl_log_process+0xe>
    18dc:	b388      	cbz	r0, 1942 <z_impl_log_process+0x72>
	msg = get_msg();
    18de:	f004 ff90 	bl	6802 <get_msg>
	if (msg.msg) {
    18e2:	4606      	mov	r6, r0
    18e4:	b118      	cbz	r0, 18ee <z_impl_log_process+0x1e>
		if (!bypass) {
    18e6:	b16d      	cbz	r5, 1904 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    18e8:	4630      	mov	r0, r6
    18ea:	f7ff ffe5 	bl	18b8 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    18ee:	b92d      	cbnz	r5, 18fc <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    18f0:	4b16      	ldr	r3, [pc, #88]	; (194c <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    18f2:	681b      	ldr	r3, [r3, #0]
    18f4:	2b00      	cmp	r3, #0
    18f6:	dd01      	ble.n	18fc <z_impl_log_process+0x2c>
		dropped_notify();
    18f8:	f7ff ff92 	bl	1820 <dropped_notify>
}
    18fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    1900:	f7ff bfe0 	b.w	18c4 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1904:	4b12      	ldr	r3, [pc, #72]	; (1950 <z_impl_log_process+0x80>)
    1906:	f3bf 8f5b 	dmb	ish
    190a:	e853 2f00 	ldrex	r2, [r3]
    190e:	3a01      	subs	r2, #1
    1910:	e843 2100 	strex	r1, r2, [r3]
    1914:	2900      	cmp	r1, #0
    1916:	d1f8      	bne.n	190a <z_impl_log_process+0x3a>
    1918:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    191c:	4c0d      	ldr	r4, [pc, #52]	; (1954 <z_impl_log_process+0x84>)
    191e:	4f0e      	ldr	r7, [pc, #56]	; (1958 <z_impl_log_process+0x88>)
    1920:	1b3f      	subs	r7, r7, r4
    1922:	113f      	asrs	r7, r7, #4
    1924:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    1926:	45b8      	cmp	r8, r7
    1928:	dade      	bge.n	18e8 <z_impl_log_process+0x18>
	return backend->cb->active;
    192a:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    192c:	795b      	ldrb	r3, [r3, #5]
    192e:	b123      	cbz	r3, 193a <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    1930:	6823      	ldr	r3, [r4, #0]
    1932:	4631      	mov	r1, r6
    1934:	681b      	ldr	r3, [r3, #0]
    1936:	4620      	mov	r0, r4
    1938:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    193a:	f108 0801 	add.w	r8, r8, #1
    193e:	3410      	adds	r4, #16
    1940:	e7f1      	b.n	1926 <z_impl_log_process+0x56>
}
    1942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1946:	bf00      	nop
    1948:	20001179 	.word	0x20001179
    194c:	20000848 	.word	0x20000848
    1950:	20000844 	.word	0x20000844
    1954:	00007490 	.word	0x00007490
    1958:	000074a0 	.word	0x000074a0

0000195c <log_process_thread_func>:
{
    195c:	b510      	push	{r4, lr}
	log_init();
    195e:	f7ff fef7 	bl	1750 <log_init>
	return z_impl_z_current_get();
    1962:	f003 ffc3 	bl	58ec <z_impl_z_current_get>
	proc_tid = process_tid;
    1966:	4b0c      	ldr	r3, [pc, #48]	; (1998 <log_process_thread_func+0x3c>)
    1968:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    196a:	b130      	cbz	r0, 197a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    196c:	4b0b      	ldr	r3, [pc, #44]	; (199c <log_process_thread_func+0x40>)
	    process_tid &&
    196e:	681b      	ldr	r3, [r3, #0]
    1970:	2b09      	cmp	r3, #9
    1972:	dd02      	ble.n	197a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    1974:	480a      	ldr	r0, [pc, #40]	; (19a0 <log_process_thread_func+0x44>)
    1976:	f003 fc7f 	bl	5278 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    197a:	4c09      	ldr	r4, [pc, #36]	; (19a0 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    197c:	2000      	movs	r0, #0
    197e:	f7ff ffa7 	bl	18d0 <z_impl_log_process>
		if (log_process(false) == false) {
    1982:	2800      	cmp	r0, #0
    1984:	d1fa      	bne.n	197c <log_process_thread_func+0x20>
    1986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    198a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    198e:	4620      	mov	r0, r4
    1990:	f003 fc92 	bl	52b8 <z_impl_k_sem_take>
    1994:	e7f2      	b.n	197c <log_process_thread_func+0x20>
    1996:	bf00      	nop
    1998:	2000088c 	.word	0x2000088c
    199c:	20000844 	.word	0x20000844
    19a0:	2000024c 	.word	0x2000024c

000019a4 <z_log_msg_post_finalize>:
{
    19a4:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    19a6:	4b1d      	ldr	r3, [pc, #116]	; (1a1c <z_log_msg_post_finalize+0x78>)
    19a8:	f3bf 8f5b 	dmb	ish
    19ac:	e853 2f00 	ldrex	r2, [r3]
    19b0:	1c51      	adds	r1, r2, #1
    19b2:	e843 1000 	strex	r0, r1, [r3]
    19b6:	2800      	cmp	r0, #0
    19b8:	d1f8      	bne.n	19ac <z_log_msg_post_finalize+0x8>
    19ba:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    19be:	4b18      	ldr	r3, [pc, #96]	; (1a20 <z_log_msg_post_finalize+0x7c>)
    19c0:	781b      	ldrb	r3, [r3, #0]
    19c2:	b183      	cbz	r3, 19e6 <z_log_msg_post_finalize+0x42>
    19c4:	f04f 0320 	mov.w	r3, #32
    19c8:	f3ef 8411 	mrs	r4, BASEPRI
    19cc:	f383 8812 	msr	BASEPRI_MAX, r3
    19d0:	f3bf 8f6f 	isb	sy
    19d4:	2000      	movs	r0, #0
    19d6:	f7ff ff7b 	bl	18d0 <z_impl_log_process>
	__asm__ volatile(
    19da:	f384 8811 	msr	BASEPRI, r4
    19de:	f3bf 8f6f 	isb	sy
}
    19e2:	b002      	add	sp, #8
    19e4:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    19e6:	4b0f      	ldr	r3, [pc, #60]	; (1a24 <z_log_msg_post_finalize+0x80>)
    19e8:	681b      	ldr	r3, [r3, #0]
    19ea:	2b00      	cmp	r3, #0
    19ec:	d0f9      	beq.n	19e2 <z_log_msg_post_finalize+0x3e>
    19ee:	b952      	cbnz	r2, 1a06 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    19f0:	2200      	movs	r2, #0
    19f2:	2300      	movs	r3, #0
    19f4:	e9cd 2300 	strd	r2, r3, [sp]
    19f8:	480b      	ldr	r0, [pc, #44]	; (1a28 <z_log_msg_post_finalize+0x84>)
    19fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    19fe:	2300      	movs	r3, #0
    1a00:	f004 f964 	bl	5ccc <z_impl_k_timer_start>
    1a04:	e7ed      	b.n	19e2 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1a06:	2a0a      	cmp	r2, #10
    1a08:	d1eb      	bne.n	19e2 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    1a0a:	4807      	ldr	r0, [pc, #28]	; (1a28 <z_log_msg_post_finalize+0x84>)
    1a0c:	f005 fb7a 	bl	7104 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1a10:	4806      	ldr	r0, [pc, #24]	; (1a2c <z_log_msg_post_finalize+0x88>)
}
    1a12:	b002      	add	sp, #8
    1a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a18:	f003 bc2e 	b.w	5278 <z_impl_k_sem_give>
    1a1c:	20000844 	.word	0x20000844
    1a20:	2000117a 	.word	0x2000117a
    1a24:	2000088c 	.word	0x2000088c
    1a28:	20000660 	.word	0x20000660
    1a2c:	2000024c 	.word	0x2000024c

00001a30 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1a30:	4b06      	ldr	r3, [pc, #24]	; (1a4c <z_log_msg2_commit+0x1c>)
{
    1a32:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1a34:	681b      	ldr	r3, [r3, #0]
{
    1a36:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1a38:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1a3a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1a3c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1a3e:	4804      	ldr	r0, [pc, #16]	; (1a50 <z_log_msg2_commit+0x20>)
    1a40:	f004 fe0d 	bl	665e <mpsc_pbuf_commit>
}
    1a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1a48:	f7ff bfac 	b.w	19a4 <z_log_msg_post_finalize>
    1a4c:	200000c0 	.word	0x200000c0
    1a50:	20000850 	.word	0x20000850

00001a54 <z_impl_log_panic>:
{
    1a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1a56:	4f0e      	ldr	r7, [pc, #56]	; (1a90 <z_impl_log_panic+0x3c>)
    1a58:	783d      	ldrb	r5, [r7, #0]
    1a5a:	b975      	cbnz	r5, 1a7a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    1a5c:	4c0d      	ldr	r4, [pc, #52]	; (1a94 <z_impl_log_panic+0x40>)
    1a5e:	4e0e      	ldr	r6, [pc, #56]	; (1a98 <z_impl_log_panic+0x44>)
	log_init();
    1a60:	f7ff fe76 	bl	1750 <log_init>
    1a64:	1b36      	subs	r6, r6, r4
    1a66:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1a68:	42b5      	cmp	r5, r6
    1a6a:	db07      	blt.n	1a7c <z_impl_log_panic+0x28>
    1a6c:	2000      	movs	r0, #0
    1a6e:	f7ff ff2f 	bl	18d0 <z_impl_log_process>
		while (log_process(false) == true) {
    1a72:	2800      	cmp	r0, #0
    1a74:	d1fa      	bne.n	1a6c <z_impl_log_panic+0x18>
	panic_mode = true;
    1a76:	2301      	movs	r3, #1
    1a78:	703b      	strb	r3, [r7, #0]
}
    1a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1a7c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1a7e:	795b      	ldrb	r3, [r3, #5]
    1a80:	b11b      	cbz	r3, 1a8a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    1a82:	6823      	ldr	r3, [r4, #0]
    1a84:	4620      	mov	r0, r4
    1a86:	695b      	ldr	r3, [r3, #20]
    1a88:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1a8a:	3501      	adds	r5, #1
    1a8c:	3410      	adds	r4, #16
    1a8e:	e7eb      	b.n	1a68 <z_impl_log_panic+0x14>
    1a90:	2000117a 	.word	0x2000117a
    1a94:	00007490 	.word	0x00007490
    1a98:	000074a0 	.word	0x000074a0

00001a9c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1a9c:	4a04      	ldr	r2, [pc, #16]	; (1ab0 <log_source_name_get+0x14>)
    1a9e:	4b05      	ldr	r3, [pc, #20]	; (1ab4 <log_source_name_get+0x18>)
    1aa0:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1aa2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1aa6:	bf34      	ite	cc
    1aa8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1aac:	2000      	movcs	r0, #0
}
    1aae:	4770      	bx	lr
    1ab0:	00007428 	.word	0x00007428
    1ab4:	00007490 	.word	0x00007490

00001ab8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1ab8:	4a05      	ldr	r2, [pc, #20]	; (1ad0 <log_backend_enable+0x18>)
	backend->cb->id = id;
    1aba:	6843      	ldr	r3, [r0, #4]
    1abc:	1a80      	subs	r0, r0, r2
    1abe:	1100      	asrs	r0, r0, #4
    1ac0:	3001      	adds	r0, #1
	backend->cb->active = true;
    1ac2:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    1ac4:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    1ac6:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1ac8:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1aca:	f7ff be6d 	b.w	17a8 <z_log_notify_backend_enabled>
    1ace:	bf00      	nop
    1ad0:	00007490 	.word	0x00007490

00001ad4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1ad4:	b40e      	push	{r1, r2, r3}
    1ad6:	b503      	push	{r0, r1, lr}
    1ad8:	ab03      	add	r3, sp, #12
    1ada:	4601      	mov	r1, r0
    1adc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ae0:	4804      	ldr	r0, [pc, #16]	; (1af4 <print_formatted+0x20>)
	va_start(args, fmt);
    1ae2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ae4:	f7ff fa4c 	bl	f80 <cbvprintf>
	va_end(args);

	return length;
}
    1ae8:	b002      	add	sp, #8
    1aea:	f85d eb04 	ldr.w	lr, [sp], #4
    1aee:	b003      	add	sp, #12
    1af0:	4770      	bx	lr
    1af2:	bf00      	nop
    1af4:	00006843 	.word	0x00006843

00001af8 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1afc:	461d      	mov	r5, r3
    1afe:	9b08      	ldr	r3, [sp, #32]
    1b00:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1b02:	06da      	lsls	r2, r3, #27
{
    1b04:	4604      	mov	r4, r0
    1b06:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1b08:	d405      	bmi.n	1b16 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1b0a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1b0c:	bf4c      	ite	mi
    1b0e:	492b      	ldrmi	r1, [pc, #172]	; (1bbc <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    1b10:	492b      	ldrpl	r1, [pc, #172]	; (1bc0 <hexdump_line_print+0xc8>)
    1b12:	f7ff ffdf 	bl	1ad4 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    1b16:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1bc4 <hexdump_line_print+0xcc>
{
    1b1a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1b1e:	45a8      	cmp	r8, r5
    1b20:	db2d      	blt.n	1b7e <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1b22:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1bc8 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
    1b26:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1bcc <hexdump_line_print+0xd4>
			print_formatted(output, " ");
    1b2a:	f8df a098 	ldr.w	sl, [pc, #152]	; 1bc4 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b2e:	2500      	movs	r5, #0
		if (i < length) {
    1b30:	42bd      	cmp	r5, r7
    1b32:	d232      	bcs.n	1b9a <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    1b34:	5d72      	ldrb	r2, [r6, r5]
    1b36:	4649      	mov	r1, r9
    1b38:	4620      	mov	r0, r4
    1b3a:	f7ff ffcb 	bl	1ad4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b3e:	3501      	adds	r5, #1
    1b40:	2d10      	cmp	r5, #16
    1b42:	d123      	bne.n	1b8c <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
    1b44:	4922      	ldr	r1, [pc, #136]	; (1bd0 <hexdump_line_print+0xd8>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1b46:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1bc4 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
    1b4a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1bd4 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    1b4e:	f8df a088 	ldr.w	sl, [pc, #136]	; 1bd8 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    1b52:	4620      	mov	r0, r4
    1b54:	f7ff ffbe 	bl	1ad4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b58:	2500      	movs	r5, #0
		if (i < length) {
    1b5a:	42af      	cmp	r7, r5
    1b5c:	d929      	bls.n	1bb2 <hexdump_line_print+0xba>
			char c = (char)data[i];
    1b5e:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    1b60:	f812 3009 	ldrb.w	r3, [r2, r9]
    1b64:	f013 0f97 	tst.w	r3, #151	; 0x97
    1b68:	bf08      	it	eq
    1b6a:	222e      	moveq	r2, #46	; 0x2e
    1b6c:	4651      	mov	r1, sl
    1b6e:	4620      	mov	r0, r4
    1b70:	f7ff ffb0 	bl	1ad4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b74:	3501      	adds	r5, #1
    1b76:	2d10      	cmp	r5, #16
    1b78:	d114      	bne.n	1ba4 <hexdump_line_print+0xac>
		}
	}
}
    1b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    1b7e:	4649      	mov	r1, r9
    1b80:	4620      	mov	r0, r4
    1b82:	f7ff ffa7 	bl	1ad4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1b86:	f108 0801 	add.w	r8, r8, #1
    1b8a:	e7c8      	b.n	1b1e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1b8c:	076a      	lsls	r2, r5, #29
    1b8e:	d1cf      	bne.n	1b30 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    1b90:	4651      	mov	r1, sl
    1b92:	4620      	mov	r0, r4
    1b94:	f7ff ff9e 	bl	1ad4 <print_formatted>
    1b98:	e7ca      	b.n	1b30 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1b9a:	4641      	mov	r1, r8
    1b9c:	4620      	mov	r0, r4
    1b9e:	f7ff ff99 	bl	1ad4 <print_formatted>
    1ba2:	e7cc      	b.n	1b3e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1ba4:	076b      	lsls	r3, r5, #29
    1ba6:	d1d8      	bne.n	1b5a <hexdump_line_print+0x62>
			print_formatted(output, " ");
    1ba8:	4641      	mov	r1, r8
    1baa:	4620      	mov	r0, r4
    1bac:	f7ff ff92 	bl	1ad4 <print_formatted>
    1bb0:	e7d3      	b.n	1b5a <hexdump_line_print+0x62>
			print_formatted(output, " ");
    1bb2:	4641      	mov	r1, r8
    1bb4:	4620      	mov	r0, r4
    1bb6:	f7ff ff8d 	bl	1ad4 <print_formatted>
    1bba:	e7db      	b.n	1b74 <hexdump_line_print+0x7c>
    1bbc:	00007798 	.word	0x00007798
    1bc0:	00007797 	.word	0x00007797
    1bc4:	000077a2 	.word	0x000077a2
    1bc8:	000077a0 	.word	0x000077a0
    1bcc:	0000779a 	.word	0x0000779a
    1bd0:	000077a4 	.word	0x000077a4
    1bd4:	00007fac 	.word	0x00007fac
    1bd8:	000077a6 	.word	0x000077a6

00001bdc <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1be0:	b087      	sub	sp, #28
    1be2:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1be4:	f001 0301 	and.w	r3, r1, #1
{
    1be8:	9205      	str	r2, [sp, #20]
    1bea:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1bee:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1bf2:	9304      	str	r3, [sp, #16]
{
    1bf4:	4607      	mov	r7, r0
    1bf6:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1bf8:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1bfc:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1c00:	f004 fe03 	bl	680a <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1c04:	4602      	mov	r2, r0
    1c06:	2800      	cmp	r0, #0
    1c08:	d044      	beq.n	1c94 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1c0a:	493a      	ldr	r1, [pc, #232]	; (1cf4 <prefix_print+0x118>)
    1c0c:	4638      	mov	r0, r7
    1c0e:	f7ff ff61 	bl	1ad4 <print_formatted>
    1c12:	4605      	mov	r5, r0
	}

	if (stamp) {
    1c14:	f1bb 0f00 	cmp.w	fp, #0
    1c18:	d008      	beq.n	1c2c <prefix_print+0x50>
	if (!format) {
    1c1a:	f018 0f44 	tst.w	r8, #68	; 0x44
    1c1e:	d13b      	bne.n	1c98 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1c20:	4935      	ldr	r1, [pc, #212]	; (1cf8 <prefix_print+0x11c>)
    1c22:	4622      	mov	r2, r4
    1c24:	4638      	mov	r0, r7
    1c26:	f7ff ff55 	bl	1ad4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1c2a:	4405      	add	r5, r0
	if (color) {
    1c2c:	9b04      	ldr	r3, [sp, #16]
    1c2e:	b153      	cbz	r3, 1c46 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1c30:	4b32      	ldr	r3, [pc, #200]	; (1cfc <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    1c32:	4933      	ldr	r1, [pc, #204]	; (1d00 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1c34:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1c38:	4b32      	ldr	r3, [pc, #200]	; (1d04 <prefix_print+0x128>)
    1c3a:	4638      	mov	r0, r7
    1c3c:	2a00      	cmp	r2, #0
    1c3e:	bf08      	it	eq
    1c40:	461a      	moveq	r2, r3
    1c42:	f7ff ff47 	bl	1ad4 <print_formatted>
	if (level_on) {
    1c46:	b13e      	cbz	r6, 1c58 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1c48:	4b2f      	ldr	r3, [pc, #188]	; (1d08 <prefix_print+0x12c>)
    1c4a:	4930      	ldr	r1, [pc, #192]	; (1d0c <prefix_print+0x130>)
    1c4c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1c50:	4638      	mov	r0, r7
    1c52:	f7ff ff3f 	bl	1ad4 <print_formatted>
    1c56:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1c58:	f1ba 0f00 	cmp.w	sl, #0
    1c5c:	db16      	blt.n	1c8c <prefix_print+0xb0>
		total += print_formatted(output,
    1c5e:	9b05      	ldr	r3, [sp, #20]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d045      	beq.n	1cf0 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1c64:	2301      	movs	r3, #1
    1c66:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    1c6a:	4b29      	ldr	r3, [pc, #164]	; (1d10 <prefix_print+0x134>)
    1c6c:	4c29      	ldr	r4, [pc, #164]	; (1d14 <prefix_print+0x138>)
    1c6e:	f019 0f10 	tst.w	r9, #16
    1c72:	bf18      	it	ne
    1c74:	461c      	movne	r4, r3
    1c76:	4651      	mov	r1, sl
    1c78:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1c7c:	f7ff ff0e 	bl	1a9c <log_source_name_get>
    1c80:	4621      	mov	r1, r4
    1c82:	4602      	mov	r2, r0
    1c84:	4638      	mov	r0, r7
    1c86:	f7ff ff25 	bl	1ad4 <print_formatted>
    1c8a:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1c8c:	1970      	adds	r0, r6, r5
    1c8e:	b007      	add	sp, #28
    1c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1c94:	4605      	mov	r5, r0
    1c96:	e7bd      	b.n	1c14 <prefix_print+0x38>
	} else if (freq != 0U) {
    1c98:	4b1f      	ldr	r3, [pc, #124]	; (1d18 <prefix_print+0x13c>)
    1c9a:	6818      	ldr	r0, [r3, #0]
    1c9c:	2800      	cmp	r0, #0
    1c9e:	d0c4      	beq.n	1c2a <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1ca0:	4b1e      	ldr	r3, [pc, #120]	; (1d1c <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1ca2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1ca6:	681b      	ldr	r3, [r3, #0]
    1ca8:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1cac:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1cb0:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1cb4:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1cb8:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1cbc:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1cc0:	fbb3 f2f1 	udiv	r2, r3, r1
    1cc4:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1cc8:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1ccc:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1cd0:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1cd4:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1cd8:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1cdc:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1cde:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    1ce2:	490f      	ldr	r1, [pc, #60]	; (1d20 <prefix_print+0x144>)
    1ce4:	e9cd e001 	strd	lr, r0, [sp, #4]
    1ce8:	4638      	mov	r0, r7
    1cea:	f7ff fef3 	bl	1ad4 <print_formatted>
    1cee:	e79c      	b.n	1c2a <prefix_print+0x4e>
		total += print_formatted(output,
    1cf0:	4c08      	ldr	r4, [pc, #32]	; (1d14 <prefix_print+0x138>)
    1cf2:	e7c0      	b.n	1c76 <prefix_print+0x9a>
    1cf4:	000077b7 	.word	0x000077b7
    1cf8:	000077bb 	.word	0x000077bb
    1cfc:	000074e8 	.word	0x000074e8
    1d00:	00007729 	.word	0x00007729
    1d04:	000077a9 	.word	0x000077a9
    1d08:	000074fc 	.word	0x000074fc
    1d0c:	000077e0 	.word	0x000077e0
    1d10:	000077b3 	.word	0x000077b3
    1d14:	000077ae 	.word	0x000077ae
    1d18:	20000890 	.word	0x20000890
    1d1c:	20000894 	.word	0x20000894
    1d20:	000077c4 	.word	0x000077c4

00001d24 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1d24:	b538      	push	{r3, r4, r5, lr}
    1d26:	460c      	mov	r4, r1
	if (color) {
    1d28:	07e1      	lsls	r1, r4, #31
{
    1d2a:	4605      	mov	r5, r0
	if (color) {
    1d2c:	d503      	bpl.n	1d36 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1d2e:	4a08      	ldr	r2, [pc, #32]	; (1d50 <postfix_print+0x2c>)
    1d30:	4908      	ldr	r1, [pc, #32]	; (1d54 <postfix_print+0x30>)
    1d32:	f7ff fecf 	bl	1ad4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1d36:	06e2      	lsls	r2, r4, #27
    1d38:	d408      	bmi.n	1d4c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1d3a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1d3c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1d3e:	bf4c      	ite	mi
    1d40:	4905      	ldrmi	r1, [pc, #20]	; (1d58 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1d42:	4906      	ldrpl	r1, [pc, #24]	; (1d5c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1d48:	f7ff bec4 	b.w	1ad4 <print_formatted>
}
    1d4c:	bd38      	pop	{r3, r4, r5, pc}
    1d4e:	bf00      	nop
    1d50:	000077a9 	.word	0x000077a9
    1d54:	00007729 	.word	0x00007729
    1d58:	00007798 	.word	0x00007798
    1d5c:	00007797 	.word	0x00007797

00001d60 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1d64:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1d66:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1d6a:	4606      	mov	r6, r0
    1d6c:	460c      	mov	r4, r1
    1d6e:	4690      	mov	r8, r2
    1d70:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1d74:	d04d      	beq.n	1e12 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1d76:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    1d78:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1d7a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d044      	beq.n	1e0c <log_output_msg2_process+0xac>
    1d82:	4925      	ldr	r1, [pc, #148]	; (1e18 <log_output_msg2_process+0xb8>)
    1d84:	1a5b      	subs	r3, r3, r1
    1d86:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1d8a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1d8e:	f8cd 9000 	str.w	r9, [sp]
    1d92:	68a3      	ldr	r3, [r4, #8]
    1d94:	2200      	movs	r2, #0
    1d96:	4641      	mov	r1, r8
    1d98:	4630      	mov	r0, r6
    1d9a:	f7ff ff1f 	bl	1bdc <prefix_print>
    1d9e:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1da0:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1da2:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1da6:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1daa:	b153      	cbz	r3, 1dc2 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1dac:	4f1b      	ldr	r7, [pc, #108]	; (1e1c <log_output_msg2_process+0xbc>)
    1dae:	481c      	ldr	r0, [pc, #112]	; (1e20 <log_output_msg2_process+0xc0>)
    1db0:	491c      	ldr	r1, [pc, #112]	; (1e24 <log_output_msg2_process+0xc4>)
    1db2:	462b      	mov	r3, r5
    1db4:	4632      	mov	r2, r6
    1db6:	f1b9 0f00 	cmp.w	r9, #0
    1dba:	bf08      	it	eq
    1dbc:	4638      	moveq	r0, r7
    1dbe:	f004 f9bd 	bl	613c <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1dc2:	8867      	ldrh	r7, [r4, #2]
    1dc4:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1dc8:	b197      	cbz	r7, 1df0 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1dca:	6823      	ldr	r3, [r4, #0]
    1dcc:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1dd0:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1dd2:	2f10      	cmp	r7, #16
    1dd4:	463c      	mov	r4, r7
    1dd6:	bf28      	it	cs
    1dd8:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1dda:	4629      	mov	r1, r5
    1ddc:	f8cd 8000 	str.w	r8, [sp]
    1de0:	4653      	mov	r3, sl
    1de2:	4622      	mov	r2, r4
    1de4:	4630      	mov	r0, r6
    1de6:	f7ff fe87 	bl	1af8 <hexdump_line_print>
	} while (len);
    1dea:	1b3f      	subs	r7, r7, r4
		data += length;
    1dec:	4425      	add	r5, r4
	} while (len);
    1dee:	d1f0      	bne.n	1dd2 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1df0:	f1b9 0f00 	cmp.w	r9, #0
    1df4:	d004      	beq.n	1e00 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1df6:	464a      	mov	r2, r9
    1df8:	4641      	mov	r1, r8
    1dfa:	4630      	mov	r0, r6
    1dfc:	f7ff ff92 	bl	1d24 <postfix_print>
	}

	log_output_flush(output);
    1e00:	4630      	mov	r0, r6
}
    1e02:	b004      	add	sp, #16
    1e04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1e08:	f004 bd0e 	b.w	6828 <log_output_flush>
		int16_t source_id = source ?
    1e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1e10:	e7bb      	b.n	1d8a <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1e12:	46ca      	mov	sl, r9
    1e14:	e7c4      	b.n	1da0 <log_output_msg2_process+0x40>
    1e16:	bf00      	nop
    1e18:	00007428 	.word	0x00007428
    1e1c:	00006879 	.word	0x00006879
    1e20:	00006843 	.word	0x00006843
    1e24:	00000f81 	.word	0x00000f81

00001e28 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1e2a:	f242 730f 	movw	r3, #9999	; 0x270f
    1e2e:	428b      	cmp	r3, r1
    1e30:	bf28      	it	cs
    1e32:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1e34:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1e36:	4a0f      	ldr	r2, [pc, #60]	; (1e74 <log_output_dropped_process+0x4c>)
{
    1e38:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1e3a:	2105      	movs	r1, #5
    1e3c:	4668      	mov	r0, sp
    1e3e:	f004 f9ea 	bl	6216 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1e42:	6863      	ldr	r3, [r4, #4]
    1e44:	490c      	ldr	r1, [pc, #48]	; (1e78 <log_output_dropped_process+0x50>)
    1e46:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1e48:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1e4a:	220b      	movs	r2, #11
    1e4c:	4628      	mov	r0, r5
    1e4e:	f004 fcde 	bl	680e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1e52:	6863      	ldr	r3, [r4, #4]
    1e54:	4632      	mov	r2, r6
    1e56:	4669      	mov	r1, sp
    1e58:	4628      	mov	r0, r5
    1e5a:	685b      	ldr	r3, [r3, #4]
    1e5c:	f004 fcd7 	bl	680e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1e60:	6863      	ldr	r3, [r4, #4]
    1e62:	4906      	ldr	r1, [pc, #24]	; (1e7c <log_output_dropped_process+0x54>)
    1e64:	685b      	ldr	r3, [r3, #4]
    1e66:	221b      	movs	r2, #27
    1e68:	4628      	mov	r0, r5
    1e6a:	f004 fcd0 	bl	680e <buffer_write>
		     output->control_block->ctx);
}
    1e6e:	b002      	add	sp, #8
    1e70:	bd70      	pop	{r4, r5, r6, pc}
    1e72:	bf00      	nop
    1e74:	00007ee9 	.word	0x00007ee9
    1e78:	00007822 	.word	0x00007822
    1e7c:	00007806 	.word	0x00007806

00001e80 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1e80:	4a08      	ldr	r2, [pc, #32]	; (1ea4 <log_output_timestamp_freq_set+0x24>)
{
    1e82:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1e84:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1e86:	4c08      	ldr	r4, [pc, #32]	; (1ea8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1e88:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1e8a:	2100      	movs	r1, #0
    1e8c:	42a0      	cmp	r0, r4
    1e8e:	d804      	bhi.n	1e9a <log_output_timestamp_freq_set+0x1a>
    1e90:	b101      	cbz	r1, 1e94 <log_output_timestamp_freq_set+0x14>
    1e92:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1e94:	4b05      	ldr	r3, [pc, #20]	; (1eac <log_output_timestamp_freq_set+0x2c>)
    1e96:	6018      	str	r0, [r3, #0]
}
    1e98:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1e9a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1e9c:	005b      	lsls	r3, r3, #1
    1e9e:	2101      	movs	r1, #1
    1ea0:	e7f4      	b.n	1e8c <log_output_timestamp_freq_set+0xc>
    1ea2:	bf00      	nop
    1ea4:	20000894 	.word	0x20000894
    1ea8:	000f4240 	.word	0x000f4240
    1eac:	20000890 	.word	0x20000890

00001eb0 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1eb4:	b087      	sub	sp, #28
    1eb6:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
    1eba:	469a      	mov	sl, r3
    1ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1ebe:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    1ec2:	9303      	str	r3, [sp, #12]
    1ec4:	4604      	mov	r4, r0
    1ec6:	4689      	mov	r9, r1
    1ec8:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
    1eca:	b3cf      	cbz	r7, 1f40 <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1ecc:	f8cd b000 	str.w	fp, [sp]
    1ed0:	463b      	mov	r3, r7
    1ed2:	462a      	mov	r2, r5
    1ed4:	2110      	movs	r1, #16
    1ed6:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1ed8:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1edc:	f7fe fb74 	bl	5c8 <cbvprintf_package>
    1ee0:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    1ee2:	9a03      	ldr	r2, [sp, #12]
    1ee4:	f008 0307 	and.w	r3, r8, #7
    1ee8:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1eec:	f102 0017 	add.w	r0, r2, #23
	struct log_msg2_desc desc =
    1ef0:	4c14      	ldr	r4, [pc, #80]	; (1f44 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    1ef2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    1ef6:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1efa:	4430      	add	r0, r6
	struct log_msg2_desc desc =
    1efc:	4b12      	ldr	r3, [pc, #72]	; (1f48 <z_impl_z_log_msg2_runtime_vcreate+0x98>)
    1efe:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1f02:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    1f06:	ea48 0804 	orr.w	r8, r8, r4
    1f0a:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    1f0e:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    1f10:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
    1f14:	f7ff fcc2 	bl	189c <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    1f18:	4604      	mov	r4, r0
    1f1a:	b140      	cbz	r0, 1f2e <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1f1c:	b13f      	cbz	r7, 1f2e <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1f1e:	f8cd b000 	str.w	fp, [sp]
    1f22:	463b      	mov	r3, r7
    1f24:	462a      	mov	r2, r5
    1f26:	4631      	mov	r1, r6
    1f28:	3010      	adds	r0, #16
    1f2a:	f7fe fb4d 	bl	5c8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    1f2e:	4653      	mov	r3, sl
    1f30:	4642      	mov	r2, r8
    1f32:	4649      	mov	r1, r9
    1f34:	4620      	mov	r0, r4
	}
}
    1f36:	b007      	add	sp, #28
    1f38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
    1f3c:	f004 bca9 	b.w	6892 <z_log_msg2_finalize>
		plen = 0;
    1f40:	463e      	mov	r6, r7
    1f42:	e7ce      	b.n	1ee2 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    1f44:	0007fe00 	.word	0x0007fe00
    1f48:	7ff80000 	.word	0x7ff80000

00001f4c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1f4c:	4b01      	ldr	r3, [pc, #4]	; (1f54 <log_backend_rtt_init+0x8>)
    1f4e:	2201      	movs	r2, #1
    1f50:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1f52:	4770      	bx	lr
    1f54:	2000118b 	.word	0x2000118b

00001f58 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1f58:	4b01      	ldr	r3, [pc, #4]	; (1f60 <format_set+0x8>)
	return 0;
}
    1f5a:	2000      	movs	r0, #0
	log_format_current = log_type;
    1f5c:	6019      	str	r1, [r3, #0]
}
    1f5e:	4770      	bx	lr
    1f60:	200008a0 	.word	0x200008a0

00001f64 <panic>:
	panic_mode = true;
    1f64:	4b02      	ldr	r3, [pc, #8]	; (1f70 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1f66:	4803      	ldr	r0, [pc, #12]	; (1f74 <panic+0x10>)
    1f68:	2201      	movs	r2, #1
    1f6a:	701a      	strb	r2, [r3, #0]
    1f6c:	f004 bc5c 	b.w	6828 <log_output_flush>
    1f70:	2000118c 	.word	0x2000118c
    1f74:	00007530 	.word	0x00007530

00001f78 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1f78:	4801      	ldr	r0, [pc, #4]	; (1f80 <dropped+0x8>)
    1f7a:	f7ff bf55 	b.w	1e28 <log_output_dropped_process>
    1f7e:	bf00      	nop
    1f80:	00007530 	.word	0x00007530

00001f84 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1f84:	4b06      	ldr	r3, [pc, #24]	; (1fa0 <process+0x1c>)
{
    1f86:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1f88:	6818      	ldr	r0, [r3, #0]
{
    1f8a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1f8c:	f7ff fbda 	bl	1744 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1f90:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1f92:	4603      	mov	r3, r0
}
    1f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1f98:	4802      	ldr	r0, [pc, #8]	; (1fa4 <process+0x20>)
    1f9a:	220f      	movs	r2, #15
    1f9c:	4718      	bx	r3
    1f9e:	bf00      	nop
    1fa0:	200008a0 	.word	0x200008a0
    1fa4:	00007530 	.word	0x00007530

00001fa8 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1fa8:	4b05      	ldr	r3, [pc, #20]	; (1fc0 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    1faa:	781b      	ldrb	r3, [r3, #0]
    1fac:	b11b      	cbz	r3, 1fb6 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    1fae:	f241 3088 	movw	r0, #5000	; 0x1388
    1fb2:	f005 b897 	b.w	70e4 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    1fb6:	20a4      	movs	r0, #164	; 0xa4
    1fb8:	2100      	movs	r1, #0
    1fba:	f003 bc7d 	b.w	58b8 <z_impl_k_sleep>
    1fbe:	bf00      	nop
    1fc0:	2000118c 	.word	0x2000118c

00001fc4 <data_out_block_mode>:
{
    1fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1fc8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2058 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    1fcc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 205c <data_out_block_mode+0x98>
{
    1fd0:	4680      	mov	r8, r0
    1fd2:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1fd4:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    1fd6:	f899 5000 	ldrb.w	r5, [r9]
    1fda:	b9cd      	cbnz	r5, 2010 <data_out_block_mode+0x4c>
    1fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1fe4:	4650      	mov	r0, sl
    1fe6:	f003 f88d 	bl	5104 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1fea:	463a      	mov	r2, r7
    1fec:	4641      	mov	r1, r8
    1fee:	4628      	mov	r0, r5
    1ff0:	f002 fd4e 	bl	4a90 <SEGGER_RTT_WriteSkipNoLock>
    1ff4:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    1ff6:	4650      	mov	r0, sl
    1ff8:	f003 f8fc 	bl	51f4 <z_impl_k_mutex_unlock>
		if (ret) {
    1ffc:	4d18      	ldr	r5, [pc, #96]	; (2060 <data_out_block_mode+0x9c>)
    1ffe:	b1fe      	cbz	r6, 2040 <data_out_block_mode+0x7c>
	host_present = true;
    2000:	2301      	movs	r3, #1
    2002:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    2004:	f899 3000 	ldrb.w	r3, [r9]
    2008:	b96b      	cbnz	r3, 2026 <data_out_block_mode+0x62>
}
    200a:	4638      	mov	r0, r7
    200c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2010:	463a      	mov	r2, r7
    2012:	4641      	mov	r1, r8
    2014:	2000      	movs	r0, #0
    2016:	f002 fd3b 	bl	4a90 <SEGGER_RTT_WriteSkipNoLock>
    201a:	4606      	mov	r6, r0
    201c:	e7ee      	b.n	1ffc <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    201e:	b95c      	cbnz	r4, 2038 <data_out_block_mode+0x74>
		host_present = false;
    2020:	702c      	strb	r4, [r5, #0]
    2022:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2026:	2000      	movs	r0, #0
    2028:	f002 fdae 	bl	4b88 <SEGGER_RTT_HasDataUp>
    202c:	2800      	cmp	r0, #0
    202e:	d0ec      	beq.n	200a <data_out_block_mode+0x46>
    2030:	782b      	ldrb	r3, [r5, #0]
    2032:	2b00      	cmp	r3, #0
    2034:	d1f3      	bne.n	201e <data_out_block_mode+0x5a>
    2036:	e7e8      	b.n	200a <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    2038:	3c01      	subs	r4, #1
    203a:	f7ff ffb5 	bl	1fa8 <on_failed_write.part.0>
    203e:	e7f2      	b.n	2026 <data_out_block_mode+0x62>
		} else if (host_present) {
    2040:	782b      	ldrb	r3, [r5, #0]
    2042:	b113      	cbz	r3, 204a <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    2044:	3c01      	subs	r4, #1
    2046:	d104      	bne.n	2052 <data_out_block_mode+0x8e>
		host_present = false;
    2048:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    204a:	782b      	ldrb	r3, [r5, #0]
    204c:	2b00      	cmp	r3, #0
    204e:	d1c2      	bne.n	1fd6 <data_out_block_mode+0x12>
    2050:	e7db      	b.n	200a <data_out_block_mode+0x46>
    2052:	f7ff ffa9 	bl	1fa8 <on_failed_write.part.0>
    2056:	e7f8      	b.n	204a <data_out_block_mode+0x86>
    2058:	2000118c 	.word	0x2000118c
    205c:	20000224 	.word	0x20000224
    2060:	2000118b 	.word	0x2000118b

00002064 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    2064:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    2066:	4c04      	ldr	r4, [pc, #16]	; (2078 <__do_init_array_aux+0x14>)
    2068:	4d04      	ldr	r5, [pc, #16]	; (207c <__do_init_array_aux+0x18>)
    206a:	42ac      	cmp	r4, r5
    206c:	d300      	bcc.n	2070 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    206e:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    2070:	f854 3b04 	ldr.w	r3, [r4], #4
    2074:	4798      	blx	r3
		func++) {
    2076:	e7f8      	b.n	206a <__do_init_array_aux+0x6>
    2078:	00007428 	.word	0x00007428
    207c:	00007428 	.word	0x00007428

00002080 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    2080:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    2082:	4c05      	ldr	r4, [pc, #20]	; (2098 <__do_global_ctors_aux+0x18>)
    2084:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    2086:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    208a:	b905      	cbnz	r5, 208e <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    208c:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    208e:	f854 3904 	ldr.w	r3, [r4], #-4
    2092:	3d01      	subs	r5, #1
    2094:	4798      	blx	r3
    2096:	e7f8      	b.n	208a <__do_global_ctors_aux+0xa>
    2098:	00007420 	.word	0x00007420

0000209c <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
    209c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    209e:	4804      	ldr	r0, [pc, #16]	; (20b0 <disk_init+0x14>)
    20a0:	f004 ff02 	bl	6ea8 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    20a4:	4b03      	ldr	r3, [pc, #12]	; (20b4 <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
    20a6:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
    20a8:	e9c3 3300 	strd	r3, r3, [r3]
    20ac:	bd08      	pop	{r3, pc}
    20ae:	bf00      	nop
    20b0:	200008b8 	.word	0x200008b8
    20b4:	200008b0 	.word	0x200008b0

000020b8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    20b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    20bc:	4605      	mov	r5, r0
	__asm__ volatile(
    20be:	f04f 0320 	mov.w	r3, #32
    20c2:	f3ef 8611 	mrs	r6, BASEPRI
    20c6:	f383 8812 	msr	BASEPRI_MAX, r3
    20ca:	f3bf 8f6f 	isb	sy
	return list->head;
    20ce:	4b0e      	ldr	r3, [pc, #56]	; (2108 <pm_state_notify+0x50>)
    20d0:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    20d2:	b19c      	cbz	r4, 20fc <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    20d4:	4f0d      	ldr	r7, [pc, #52]	; (210c <pm_state_notify+0x54>)
    20d6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2110 <pm_state_notify+0x58>
    20da:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    20de:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    20e2:	2d00      	cmp	r5, #0
    20e4:	bf08      	it	eq
    20e6:	4613      	moveq	r3, r2
		if (callback) {
    20e8:	b12b      	cbz	r3, 20f6 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    20ea:	f898 2014 	ldrb.w	r2, [r8, #20]
    20ee:	fb09 f202 	mul.w	r2, r9, r2
    20f2:	5cb8      	ldrb	r0, [r7, r2]
    20f4:	4798      	blx	r3
	return node->next;
    20f6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    20f8:	2c00      	cmp	r4, #0
    20fa:	d1f0      	bne.n	20de <pm_state_notify+0x26>
	__asm__ volatile(
    20fc:	f386 8811 	msr	BASEPRI, r6
    2100:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2108:	200008cc 	.word	0x200008cc
    210c:	200008d4 	.word	0x200008d4
    2110:	20000f68 	.word	0x20000f68

00002114 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2114:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    2116:	2301      	movs	r3, #1
    2118:	f000 001f 	and.w	r0, r0, #31
    211c:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2120:	4b07      	ldr	r3, [pc, #28]	; (2140 <atomic_clear_bit.constprop.0+0x2c>)
    2122:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2126:	43c0      	mvns	r0, r0
    2128:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    212c:	e853 2f00 	ldrex	r2, [r3]
    2130:	4002      	ands	r2, r0
    2132:	e843 2100 	strex	r1, r2, [r3]
    2136:	2900      	cmp	r1, #0
    2138:	d1f8      	bne.n	212c <atomic_clear_bit.constprop.0+0x18>
    213a:	f3bf 8f5b 	dmb	ish
}
    213e:	4770      	bx	lr
    2140:	200008e0 	.word	0x200008e0

00002144 <pm_system_resume>:

void pm_system_resume(void)
{
    2144:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2146:	4b1a      	ldr	r3, [pc, #104]	; (21b0 <pm_system_resume+0x6c>)
    2148:	7d1c      	ldrb	r4, [r3, #20]
    214a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    214e:	f004 031f 	and.w	r3, r4, #31
    2152:	2201      	movs	r2, #1
    2154:	409a      	lsls	r2, r3
    2156:	4b17      	ldr	r3, [pc, #92]	; (21b4 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2158:	0961      	lsrs	r1, r4, #5
    215a:	43d0      	mvns	r0, r2
    215c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2160:	e853 1f00 	ldrex	r1, [r3]
    2164:	ea01 0500 	and.w	r5, r1, r0
    2168:	e843 5c00 	strex	ip, r5, [r3]
    216c:	f1bc 0f00 	cmp.w	ip, #0
    2170:	d1f6      	bne.n	2160 <pm_system_resume+0x1c>
    2172:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2176:	4211      	tst	r1, r2
    2178:	d013      	beq.n	21a2 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    217a:	4b0f      	ldr	r3, [pc, #60]	; (21b8 <pm_system_resume+0x74>)
    217c:	4d0f      	ldr	r5, [pc, #60]	; (21bc <pm_system_resume+0x78>)
    217e:	b18b      	cbz	r3, 21a4 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2180:	230c      	movs	r3, #12
    2182:	4363      	muls	r3, r4
    2184:	18ea      	adds	r2, r5, r3
    2186:	5ce8      	ldrb	r0, [r5, r3]
    2188:	7851      	ldrb	r1, [r2, #1]
    218a:	f004 fc10 	bl	69ae <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    218e:	2000      	movs	r0, #0
    2190:	f7ff ff92 	bl	20b8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2194:	230c      	movs	r3, #12
    2196:	435c      	muls	r4, r3
    2198:	192a      	adds	r2, r5, r4
    219a:	2300      	movs	r3, #0
    219c:	512b      	str	r3, [r5, r4]
    219e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    21a2:	bd38      	pop	{r3, r4, r5, pc}
    21a4:	f383 8811 	msr	BASEPRI, r3
    21a8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    21ac:	e7ef      	b.n	218e <pm_system_resume+0x4a>
    21ae:	bf00      	nop
    21b0:	20000f68 	.word	0x20000f68
    21b4:	200008e4 	.word	0x200008e4
    21b8:	000069af 	.word	0x000069af
    21bc:	200008d4 	.word	0x200008d4

000021c0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    21c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    21c4:	4b32      	ldr	r3, [pc, #200]	; (2290 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    21c6:	4a33      	ldr	r2, [pc, #204]	; (2294 <pm_system_suspend+0xd4>)
    21c8:	7d1c      	ldrb	r4, [r3, #20]
    21ca:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    21ce:	0963      	lsrs	r3, r4, #5
    21d0:	ea4f 0983 	mov.w	r9, r3, lsl #2
    21d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21d8:	4e2f      	ldr	r6, [pc, #188]	; (2298 <pm_system_suspend+0xd8>)
    21da:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    21de:	f004 081f 	and.w	r8, r4, #31
    21e2:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    21e6:	f013 0f01 	tst.w	r3, #1
{
    21ea:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    21ec:	d10a      	bne.n	2204 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    21ee:	4601      	mov	r1, r0
    21f0:	4620      	mov	r0, r4
    21f2:	f000 f869 	bl	22c8 <pm_policy_next_state>
		if (info != NULL) {
    21f6:	b128      	cbz	r0, 2204 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    21f8:	c807      	ldmia	r0, {r0, r1, r2}
    21fa:	230c      	movs	r3, #12
    21fc:	fb03 6304 	mla	r3, r3, r4, r6
    2200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2204:	230c      	movs	r3, #12
    2206:	4363      	muls	r3, r4
    2208:	18f2      	adds	r2, r6, r3
    220a:	5cf5      	ldrb	r5, [r6, r3]
    220c:	b92d      	cbnz	r5, 221a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    220e:	4620      	mov	r0, r4
    2210:	f7ff ff80 	bl	2114 <atomic_clear_bit.constprop.0>
		ret = false;
    2214:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    221a:	1c7b      	adds	r3, r7, #1
    221c:	d00f      	beq.n	223e <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    221e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2222:	481e      	ldr	r0, [pc, #120]	; (229c <pm_system_suspend+0xdc>)
    2224:	4a1e      	ldr	r2, [pc, #120]	; (22a0 <pm_system_suspend+0xe0>)
    2226:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    222a:	2100      	movs	r1, #0
    222c:	2300      	movs	r3, #0
    222e:	fbec 0105 	umlal	r0, r1, ip, r5
    2232:	f7fd ff65 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2236:	2101      	movs	r1, #1
    2238:	1a38      	subs	r0, r7, r0
    223a:	f004 ff35 	bl	70a8 <z_set_timeout_expiry>
	k_sched_lock();
    223e:	f003 f8bb 	bl	53b8 <k_sched_lock>
	pm_state_notify(true);
    2242:	2001      	movs	r0, #1
    2244:	f7ff ff38 	bl	20b8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2248:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    224c:	2301      	movs	r3, #1
    224e:	fa03 f808 	lsl.w	r8, r3, r8
    2252:	4b14      	ldr	r3, [pc, #80]	; (22a4 <pm_system_suspend+0xe4>)
    2254:	4499      	add	r9, r3
    2256:	e859 3f00 	ldrex	r3, [r9]
    225a:	ea43 0308 	orr.w	r3, r3, r8
    225e:	e849 3200 	strex	r2, r3, [r9]
    2262:	2a00      	cmp	r2, #0
    2264:	d1f7      	bne.n	2256 <pm_system_suspend+0x96>
    2266:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    226a:	4b0f      	ldr	r3, [pc, #60]	; (22a8 <pm_system_suspend+0xe8>)
    226c:	b133      	cbz	r3, 227c <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    226e:	230c      	movs	r3, #12
    2270:	4363      	muls	r3, r4
    2272:	18f2      	adds	r2, r6, r3
    2274:	5cf0      	ldrb	r0, [r6, r3]
    2276:	7851      	ldrb	r1, [r2, #1]
    2278:	f004 fb8d 	bl	6996 <pm_state_set>
	pm_system_resume();
    227c:	f7ff ff62 	bl	2144 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    2280:	4620      	mov	r0, r4
    2282:	f7ff ff47 	bl	2114 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    2286:	f003 fa67 	bl	5758 <k_sched_unlock>
	bool ret = true;
    228a:	2001      	movs	r0, #1
    228c:	e7c3      	b.n	2216 <pm_system_suspend+0x56>
    228e:	bf00      	nop
    2290:	20000f68 	.word	0x20000f68
    2294:	200008e0 	.word	0x200008e0
    2298:	200008d4 	.word	0x200008d4
    229c:	000f423f 	.word	0x000f423f
    22a0:	000f4240 	.word	0x000f4240
    22a4:	200008e4 	.word	0x200008e4
    22a8:	00006997 	.word	0x00006997

000022ac <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    22ac:	4b05      	ldr	r3, [pc, #20]	; (22c4 <pm_policy_state_lock_is_active+0x18>)
    22ae:	f3bf 8f5b 	dmb	ish
    22b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    22b6:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    22ba:	3800      	subs	r0, #0
    22bc:	bf18      	it	ne
    22be:	2001      	movne	r0, #1
    22c0:	4770      	bx	lr
    22c2:	bf00      	nop
    22c4:	200008e8 	.word	0x200008e8

000022c8 <pm_policy_next_state>:
{
    22c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22cc:	b085      	sub	sp, #20
    22ce:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    22d0:	a903      	add	r1, sp, #12
    22d2:	f000 f847 	bl	2364 <pm_state_cpu_get_all>
    22d6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2358 <pm_policy_next_state+0x90>
    22da:	f8df a080 	ldr.w	sl, [pc, #128]	; 235c <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    22de:	1e44      	subs	r4, r0, #1
    22e0:	b224      	sxth	r4, r4
    22e2:	f04f 0b00 	mov.w	fp, #0
    22e6:	1c63      	adds	r3, r4, #1
    22e8:	d104      	bne.n	22f4 <pm_policy_next_state+0x2c>
	return NULL;
    22ea:	2600      	movs	r6, #0
}
    22ec:	4630      	mov	r0, r6
    22ee:	b005      	add	sp, #20
    22f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    22f4:	9a03      	ldr	r2, [sp, #12]
    22f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    22fa:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    22fe:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2302:	f7ff ffd3 	bl	22ac <pm_policy_state_lock_is_active>
    2306:	4605      	mov	r5, r0
    2308:	bb10      	cbnz	r0, 2350 <pm_policy_next_state+0x88>
    230a:	6870      	ldr	r0, [r6, #4]
    230c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2310:	46c4      	mov	ip, r8
    2312:	4629      	mov	r1, r5
    2314:	fbe0 c109 	umlal	ip, r1, r0, r9
    2318:	4652      	mov	r2, sl
    231a:	465b      	mov	r3, fp
    231c:	4660      	mov	r0, ip
    231e:	f7fd feef 	bl	100 <__aeabi_uldivmod>
    2322:	9001      	str	r0, [sp, #4]
    2324:	68b0      	ldr	r0, [r6, #8]
    2326:	46c4      	mov	ip, r8
    2328:	4629      	mov	r1, r5
    232a:	fbe0 c109 	umlal	ip, r1, r0, r9
    232e:	465b      	mov	r3, fp
    2330:	4652      	mov	r2, sl
    2332:	4660      	mov	r0, ip
    2334:	f7fd fee4 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2338:	4b09      	ldr	r3, [pc, #36]	; (2360 <pm_policy_next_state+0x98>)
    233a:	681b      	ldr	r3, [r3, #0]
    233c:	1c59      	adds	r1, r3, #1
    233e:	d001      	beq.n	2344 <pm_policy_next_state+0x7c>
    2340:	4283      	cmp	r3, r0
    2342:	d905      	bls.n	2350 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    2344:	1c7a      	adds	r2, r7, #1
    2346:	d0d1      	beq.n	22ec <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    2348:	9b01      	ldr	r3, [sp, #4]
    234a:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    234c:	42b8      	cmp	r0, r7
    234e:	d9cd      	bls.n	22ec <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2350:	3c01      	subs	r4, #1
    2352:	b224      	sxth	r4, r4
    2354:	e7c7      	b.n	22e6 <pm_policy_next_state+0x1e>
    2356:	bf00      	nop
    2358:	000f423f 	.word	0x000f423f
    235c:	000f4240 	.word	0x000f4240
    2360:	200000c4 	.word	0x200000c4

00002364 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2364:	b908      	cbnz	r0, 236a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2366:	4b02      	ldr	r3, [pc, #8]	; (2370 <pm_state_cpu_get_all+0xc>)
    2368:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    236a:	2000      	movs	r0, #0
    236c:	4770      	bx	lr
    236e:	bf00      	nop
    2370:	00007540 	.word	0x00007540

00002374 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2374:	4801      	ldr	r0, [pc, #4]	; (237c <nrf_cc3xx_platform_abort_init+0x8>)
    2376:	f003 bd4f 	b.w	5e18 <nrf_cc3xx_platform_set_abort>
    237a:	bf00      	nop
    237c:	00007540 	.word	0x00007540

00002380 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2380:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2382:	4604      	mov	r4, r0
    2384:	b918      	cbnz	r0, 238e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2386:	4b0d      	ldr	r3, [pc, #52]	; (23bc <mutex_free_platform+0x3c>)
    2388:	480d      	ldr	r0, [pc, #52]	; (23c0 <mutex_free_platform+0x40>)
    238a:	685b      	ldr	r3, [r3, #4]
    238c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    238e:	6861      	ldr	r1, [r4, #4]
    2390:	2908      	cmp	r1, #8
    2392:	d00d      	beq.n	23b0 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2394:	f031 0304 	bics.w	r3, r1, #4
    2398:	d00a      	beq.n	23b0 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    239a:	f011 0102 	ands.w	r1, r1, #2
    239e:	d008      	beq.n	23b2 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    23a0:	4808      	ldr	r0, [pc, #32]	; (23c4 <mutex_free_platform+0x44>)
    23a2:	4621      	mov	r1, r4
    23a4:	f004 fd3d 	bl	6e22 <k_mem_slab_free>
        mutex->mutex = NULL;
    23a8:	2300      	movs	r3, #0
    23aa:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    23ac:	2300      	movs	r3, #0
    23ae:	6063      	str	r3, [r4, #4]
}
    23b0:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    23b2:	6820      	ldr	r0, [r4, #0]
    23b4:	2214      	movs	r2, #20
    23b6:	f004 fee4 	bl	7182 <memset>
    23ba:	e7f7      	b.n	23ac <mutex_free_platform+0x2c>
    23bc:	20000174 	.word	0x20000174
    23c0:	00007846 	.word	0x00007846
    23c4:	20000904 	.word	0x20000904

000023c8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    23c8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    23ca:	b308      	cbz	r0, 2410 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    23cc:	6843      	ldr	r3, [r0, #4]
    23ce:	2b04      	cmp	r3, #4
    23d0:	d110      	bne.n	23f4 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    23d2:	2201      	movs	r2, #1
    23d4:	6803      	ldr	r3, [r0, #0]
    23d6:	f3bf 8f5b 	dmb	ish
    23da:	e853 1f00 	ldrex	r1, [r3]
    23de:	2900      	cmp	r1, #0
    23e0:	d103      	bne.n	23ea <mutex_lock_platform+0x22>
    23e2:	e843 2000 	strex	r0, r2, [r3]
    23e6:	2800      	cmp	r0, #0
    23e8:	d1f7      	bne.n	23da <mutex_lock_platform+0x12>
    23ea:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    23ee:	d10b      	bne.n	2408 <mutex_lock_platform+0x40>
    23f0:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    23f2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    23f4:	b153      	cbz	r3, 240c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    23f6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    23f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    23fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2400:	f002 fe80 	bl	5104 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2404:	2800      	cmp	r0, #0
    2406:	d0f3      	beq.n	23f0 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2408:	4803      	ldr	r0, [pc, #12]	; (2418 <mutex_lock_platform+0x50>)
    240a:	e7f2      	b.n	23f2 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    240c:	4803      	ldr	r0, [pc, #12]	; (241c <mutex_lock_platform+0x54>)
    240e:	e7f0      	b.n	23f2 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2410:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2414:	e7ed      	b.n	23f2 <mutex_lock_platform+0x2a>
    2416:	bf00      	nop
    2418:	ffff8fe9 	.word	0xffff8fe9
    241c:	ffff8fea 	.word	0xffff8fea

00002420 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2420:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2422:	b1d0      	cbz	r0, 245a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2424:	6843      	ldr	r3, [r0, #4]
    2426:	2b04      	cmp	r3, #4
    2428:	d111      	bne.n	244e <mutex_unlock_platform+0x2e>
    242a:	2200      	movs	r2, #0
    242c:	6803      	ldr	r3, [r0, #0]
    242e:	f3bf 8f5b 	dmb	ish
    2432:	e853 1f00 	ldrex	r1, [r3]
    2436:	2901      	cmp	r1, #1
    2438:	d103      	bne.n	2442 <mutex_unlock_platform+0x22>
    243a:	e843 2000 	strex	r0, r2, [r3]
    243e:	2800      	cmp	r0, #0
    2440:	d1f7      	bne.n	2432 <mutex_unlock_platform+0x12>
    2442:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2446:	4807      	ldr	r0, [pc, #28]	; (2464 <mutex_unlock_platform+0x44>)
    2448:	bf08      	it	eq
    244a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    244c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    244e:	b13b      	cbz	r3, 2460 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2450:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2452:	f002 fecf 	bl	51f4 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2456:	2000      	movs	r0, #0
    2458:	e7f8      	b.n	244c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    245a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    245e:	e7f5      	b.n	244c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2460:	4801      	ldr	r0, [pc, #4]	; (2468 <mutex_unlock_platform+0x48>)
    2462:	e7f3      	b.n	244c <mutex_unlock_platform+0x2c>
    2464:	ffff8fe9 	.word	0xffff8fe9
    2468:	ffff8fea 	.word	0xffff8fea

0000246c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    246c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    246e:	4604      	mov	r4, r0
    2470:	b918      	cbnz	r0, 247a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2472:	4b16      	ldr	r3, [pc, #88]	; (24cc <mutex_init_platform+0x60>)
    2474:	4816      	ldr	r0, [pc, #88]	; (24d0 <mutex_init_platform+0x64>)
    2476:	685b      	ldr	r3, [r3, #4]
    2478:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    247a:	6863      	ldr	r3, [r4, #4]
    247c:	2b04      	cmp	r3, #4
    247e:	d023      	beq.n	24c8 <mutex_init_platform+0x5c>
    2480:	2b08      	cmp	r3, #8
    2482:	d021      	beq.n	24c8 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2484:	b9cb      	cbnz	r3, 24ba <mutex_init_platform+0x4e>
    2486:	6823      	ldr	r3, [r4, #0]
    2488:	b9bb      	cbnz	r3, 24ba <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    248a:	4812      	ldr	r0, [pc, #72]	; (24d4 <mutex_init_platform+0x68>)
    248c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2494:	4621      	mov	r1, r4
    2496:	f002 fd33 	bl	4f00 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    249a:	b908      	cbnz	r0, 24a0 <mutex_init_platform+0x34>
    249c:	6823      	ldr	r3, [r4, #0]
    249e:	b91b      	cbnz	r3, 24a8 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    24a0:	4b0a      	ldr	r3, [pc, #40]	; (24cc <mutex_init_platform+0x60>)
    24a2:	480d      	ldr	r0, [pc, #52]	; (24d8 <mutex_init_platform+0x6c>)
    24a4:	685b      	ldr	r3, [r3, #4]
    24a6:	4798      	blx	r3
    24a8:	6820      	ldr	r0, [r4, #0]
    24aa:	2214      	movs	r2, #20
    24ac:	2100      	movs	r1, #0
    24ae:	f004 fe68 	bl	7182 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    24b2:	6863      	ldr	r3, [r4, #4]
    24b4:	f043 0302 	orr.w	r3, r3, #2
    24b8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    24ba:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    24bc:	f004 fcf4 	bl	6ea8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    24c0:	6863      	ldr	r3, [r4, #4]
    24c2:	f043 0301 	orr.w	r3, r3, #1
    24c6:	6063      	str	r3, [r4, #4]
}
    24c8:	bd10      	pop	{r4, pc}
    24ca:	bf00      	nop
    24cc:	20000174 	.word	0x20000174
    24d0:	00007846 	.word	0x00007846
    24d4:	20000904 	.word	0x20000904
    24d8:	0000786c 	.word	0x0000786c

000024dc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    24dc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    24de:	4906      	ldr	r1, [pc, #24]	; (24f8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    24e0:	4806      	ldr	r0, [pc, #24]	; (24fc <nrf_cc3xx_platform_mutex_init+0x20>)
    24e2:	2340      	movs	r3, #64	; 0x40
    24e4:	2214      	movs	r2, #20
    24e6:	f004 fc80 	bl	6dea <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    24ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    24ee:	4904      	ldr	r1, [pc, #16]	; (2500 <nrf_cc3xx_platform_mutex_init+0x24>)
    24f0:	4804      	ldr	r0, [pc, #16]	; (2504 <nrf_cc3xx_platform_mutex_init+0x28>)
    24f2:	f003 bcf1 	b.w	5ed8 <nrf_cc3xx_platform_set_mutexes>
    24f6:	bf00      	nop
    24f8:	20000924 	.word	0x20000924
    24fc:	20000904 	.word	0x20000904
    2500:	00007558 	.word	0x00007558
    2504:	00007548 	.word	0x00007548

00002508 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2508:	4901      	ldr	r1, [pc, #4]	; (2510 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    250a:	2210      	movs	r2, #16
	str	r2, [r1]
    250c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    250e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2510:	e000ed10 	.word	0xe000ed10

00002514 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2514:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2516:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2518:	f380 8811 	msr	BASEPRI, r0
	isb
    251c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2520:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2524:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2526:	b662      	cpsie	i
	isb
    2528:	f3bf 8f6f 	isb	sy

	bx	lr
    252c:	4770      	bx	lr
    252e:	bf00      	nop

00002530 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2534:	4681      	mov	r9, r0
    2536:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    2538:	460c      	mov	r4, r1
    253a:	2900      	cmp	r1, #0
    253c:	d04c      	beq.n	25d8 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    253e:	466e      	mov	r6, sp
    2540:	b08a      	sub	sp, #40	; 0x28
    2542:	466d      	mov	r5, sp
    2544:	e9d1 1200 	ldrd	r1, r2, [r1]
    2548:	68a3      	ldr	r3, [r4, #8]
    254a:	4827      	ldr	r0, [pc, #156]	; (25e8 <z_arm_fatal_error+0xb8>)
    254c:	46a8      	mov	r8, r5
    254e:	f04f 0a05 	mov.w	sl, #5
    2552:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2556:	e9c5 2307 	strd	r2, r3, [r5, #28]
    255a:	f848 af10 	str.w	sl, [r8, #16]!
    255e:	4823      	ldr	r0, [pc, #140]	; (25ec <z_arm_fatal_error+0xbc>)
    2560:	4642      	mov	r2, r8
    2562:	2300      	movs	r3, #0
    2564:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2568:	f004 f9ae 	bl	68c8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    256c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    2570:	6963      	ldr	r3, [r4, #20]
    2572:	481f      	ldr	r0, [pc, #124]	; (25f0 <z_arm_fatal_error+0xc0>)
    2574:	f8c5 a010 	str.w	sl, [r5, #16]
    2578:	46b5      	mov	sp, r6
    257a:	e9c5 0105 	strd	r0, r1, [r5, #20]
    257e:	46ad      	mov	sp, r5
    2580:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2584:	4819      	ldr	r0, [pc, #100]	; (25ec <z_arm_fatal_error+0xbc>)
    2586:	4642      	mov	r2, r8
    2588:	2300      	movs	r3, #0
    258a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    258e:	f004 f99b 	bl	68c8 <z_impl_z_log_msg2_static_create>
    2592:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2594:	b088      	sub	sp, #32
    2596:	466d      	mov	r5, sp
    2598:	69e3      	ldr	r3, [r4, #28]
    259a:	4a16      	ldr	r2, [pc, #88]	; (25f4 <z_arm_fatal_error+0xc4>)
    259c:	46a8      	mov	r8, r5
    259e:	f04f 0a03 	mov.w	sl, #3
    25a2:	e9c5 2305 	strd	r2, r3, [r5, #20]
    25a6:	f848 af10 	str.w	sl, [r8, #16]!
    25aa:	4810      	ldr	r0, [pc, #64]	; (25ec <z_arm_fatal_error+0xbc>)
    25ac:	4642      	mov	r2, r8
    25ae:	2300      	movs	r3, #0
    25b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    25b4:	f004 f988 	bl	68c8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    25b8:	4a0f      	ldr	r2, [pc, #60]	; (25f8 <z_arm_fatal_error+0xc8>)
    25ba:	69a3      	ldr	r3, [r4, #24]
    25bc:	f8c5 a010 	str.w	sl, [r5, #16]
    25c0:	46b5      	mov	sp, r6
    25c2:	e9c5 2305 	strd	r2, r3, [r5, #20]
    25c6:	46ad      	mov	sp, r5
    25c8:	4808      	ldr	r0, [pc, #32]	; (25ec <z_arm_fatal_error+0xbc>)
    25ca:	2300      	movs	r3, #0
    25cc:	4642      	mov	r2, r8
    25ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    25d2:	f004 f979 	bl	68c8 <z_impl_z_log_msg2_static_create>
    25d6:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    25d8:	4621      	mov	r1, r4
    25da:	4648      	mov	r0, r9
    25dc:	f002 fb28 	bl	4c30 <z_fatal_error>
}
    25e0:	46bd      	mov	sp, r7
    25e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    25e6:	bf00      	nop
    25e8:	00007899 	.word	0x00007899
    25ec:	00007470 	.word	0x00007470
    25f0:	000078c8 	.word	0x000078c8
    25f4:	000078f7 	.word	0x000078f7
    25f8:	00007906 	.word	0x00007906

000025fc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    25fc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    25fe:	2b00      	cmp	r3, #0
    2600:	db08      	blt.n	2614 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2602:	2201      	movs	r2, #1
    2604:	f000 001f 	and.w	r0, r0, #31
    2608:	fa02 f000 	lsl.w	r0, r2, r0
    260c:	095b      	lsrs	r3, r3, #5
    260e:	4a02      	ldr	r2, [pc, #8]	; (2618 <arch_irq_enable+0x1c>)
    2610:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2614:	4770      	bx	lr
    2616:	bf00      	nop
    2618:	e000e100 	.word	0xe000e100

0000261c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    261c:	4b05      	ldr	r3, [pc, #20]	; (2634 <arch_irq_is_enabled+0x18>)
    261e:	0942      	lsrs	r2, r0, #5
    2620:	f000 001f 	and.w	r0, r0, #31
    2624:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2628:	2301      	movs	r3, #1
    262a:	fa03 f000 	lsl.w	r0, r3, r0
}
    262e:	4010      	ands	r0, r2
    2630:	4770      	bx	lr
    2632:	bf00      	nop
    2634:	e000e100 	.word	0xe000e100

00002638 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2638:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    263a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    263c:	bfa8      	it	ge
    263e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2642:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2646:	bfb8      	it	lt
    2648:	4b06      	ldrlt	r3, [pc, #24]	; (2664 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    264a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    264e:	bfac      	ite	ge
    2650:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2654:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2658:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    265a:	bfb4      	ite	lt
    265c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    265e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2662:	4770      	bx	lr
    2664:	e000ed14 	.word	0xe000ed14

00002668 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2668:	bf30      	wfi
    b z_SysNmiOnReset
    266a:	f7ff bffd 	b.w	2668 <z_SysNmiOnReset>
    266e:	bf00      	nop

00002670 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2670:	4a0b      	ldr	r2, [pc, #44]	; (26a0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2672:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2674:	4b0b      	ldr	r3, [pc, #44]	; (26a4 <z_arm_prep_c+0x34>)
    2676:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    267a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    267c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2680:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2684:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2688:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    268c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2690:	f002 fb68 	bl	4d64 <z_bss_zero>
	z_data_copy();
    2694:	f003 f982 	bl	599c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2698:	f000 fb82 	bl	2da0 <z_arm_interrupt_init>
	z_cstart();
    269c:	f002 fba2 	bl	4de4 <z_cstart>
    26a0:	00000000 	.word	0x00000000
    26a4:	e000ed00 	.word	0xe000ed00

000026a8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    26a8:	4a09      	ldr	r2, [pc, #36]	; (26d0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    26aa:	490a      	ldr	r1, [pc, #40]	; (26d4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    26ac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    26ae:	6809      	ldr	r1, [r1, #0]
    26b0:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26b2:	4909      	ldr	r1, [pc, #36]	; (26d8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    26b4:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26b6:	684b      	ldr	r3, [r1, #4]
    26b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26bc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    26be:	2300      	movs	r3, #0
    26c0:	f383 8811 	msr	BASEPRI, r3
    26c4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    26c8:	6893      	ldr	r3, [r2, #8]
}
    26ca:	6f98      	ldr	r0, [r3, #120]	; 0x78
    26cc:	4770      	bx	lr
    26ce:	bf00      	nop
    26d0:	20000f68 	.word	0x20000f68
    26d4:	00007638 	.word	0x00007638
    26d8:	e000ed00 	.word	0xe000ed00

000026dc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    26dc:	490f      	ldr	r1, [pc, #60]	; (271c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    26de:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    26e0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    26e4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    26e6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    26ea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    26ee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    26f0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    26f4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    26f8:	4f09      	ldr	r7, [pc, #36]	; (2720 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    26fa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    26fe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2700:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2702:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2704:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2706:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2708:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    270a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    270e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2712:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2716:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    271a:	4770      	bx	lr
    ldr r1, =_kernel
    271c:	20000f68 	.word	0x20000f68
    ldr v4, =_SCS_ICSR
    2720:	e000ed04 	.word	0xe000ed04

00002724 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2724:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2728:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    272a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    272e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2732:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2734:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2738:	2902      	cmp	r1, #2
    beq _oops
    273a:	d0ff      	beq.n	273c <_oops>

0000273c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    273c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    273e:	f004 f913 	bl	6968 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2742:	bd01      	pop	{r0, pc}

00002744 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2744:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2748:	9b00      	ldr	r3, [sp, #0]
    274a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    274e:	490a      	ldr	r1, [pc, #40]	; (2778 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2750:	9b01      	ldr	r3, [sp, #4]
    2752:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2756:	9b02      	ldr	r3, [sp, #8]
    2758:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    275c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2764:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2768:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    276c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    276e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2770:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2772:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2774:	4770      	bx	lr
    2776:	bf00      	nop
    2778:	00006387 	.word	0x00006387

0000277c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    277c:	4b07      	ldr	r3, [pc, #28]	; (279c <arch_switch_to_main_thread+0x20>)
    277e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2780:	4610      	mov	r0, r2
    2782:	f381 8809 	msr	PSP, r1
    2786:	2100      	movs	r1, #0
    2788:	b663      	cpsie	if
    278a:	f381 8811 	msr	BASEPRI, r1
    278e:	f3bf 8f6f 	isb	sy
    2792:	2200      	movs	r2, #0
    2794:	2300      	movs	r3, #0
    2796:	f003 fdf6 	bl	6386 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    279a:	bf00      	nop
    279c:	20000f68 	.word	0x20000f68

000027a0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    27a0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    27a2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    27a4:	4a0b      	ldr	r2, [pc, #44]	; (27d4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    27a6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    27a8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    27aa:	bf1e      	ittt	ne
	movne	r1, #0
    27ac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    27ae:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    27b0:	f004 fb6b 	blne	6e8a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    27b4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    27b6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    27ba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    27be:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    27c2:	4905      	ldr	r1, [pc, #20]	; (27d8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    27c4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    27c6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    27c8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    27ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    27ce:	4903      	ldr	r1, [pc, #12]	; (27dc <_isr_wrapper+0x3c>)
	bx r1
    27d0:	4708      	bx	r1
    27d2:	0000      	.short	0x0000
	ldr r2, =_kernel
    27d4:	20000f68 	.word	0x20000f68
	ldr r1, =_sw_isr_table
    27d8:	000072a0 	.word	0x000072a0
	ldr r1, =z_arm_int_exit
    27dc:	000027e1 	.word	0x000027e1

000027e0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    27e0:	4b04      	ldr	r3, [pc, #16]	; (27f4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    27e2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    27e4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    27e6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    27e8:	d003      	beq.n	27f2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    27ea:	4903      	ldr	r1, [pc, #12]	; (27f8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    27ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    27f0:	600a      	str	r2, [r1, #0]

000027f2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    27f2:	4770      	bx	lr
	ldr r3, =_kernel
    27f4:	20000f68 	.word	0x20000f68
	ldr r1, =_SCS_ICSR
    27f8:	e000ed04 	.word	0xe000ed04

000027fc <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    27fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2800:	b086      	sub	sp, #24
    2802:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    2804:	4b42      	ldr	r3, [pc, #264]	; (2910 <mem_manage_fault.constprop.0+0x114>)
    2806:	617b      	str	r3, [r7, #20]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2808:	4606      	mov	r6, r0
    280a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    280c:	4841      	ldr	r0, [pc, #260]	; (2914 <mem_manage_fault.constprop.0+0x118>)
    280e:	2402      	movs	r4, #2
    2810:	f107 0210 	add.w	r2, r7, #16
    2814:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2818:	613c      	str	r4, [r7, #16]
    281a:	f004 f8b4 	bl	6986 <z_log_msg2_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    281e:	4b3e      	ldr	r3, [pc, #248]	; (2918 <mem_manage_fault.constprop.0+0x11c>)
    2820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2822:	06db      	lsls	r3, r3, #27
    2824:	d509      	bpl.n	283a <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2826:	4b3d      	ldr	r3, [pc, #244]	; (291c <mem_manage_fault.constprop.0+0x120>)
    2828:	483a      	ldr	r0, [pc, #232]	; (2914 <mem_manage_fault.constprop.0+0x118>)
    282a:	f107 0210 	add.w	r2, r7, #16
    282e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2832:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2836:	f004 f8a6 	bl	6986 <z_log_msg2_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    283a:	4b37      	ldr	r3, [pc, #220]	; (2918 <mem_manage_fault.constprop.0+0x11c>)
    283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    283e:	0718      	lsls	r0, r3, #28
    2840:	d50a      	bpl.n	2858 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2842:	4b37      	ldr	r3, [pc, #220]	; (2920 <mem_manage_fault.constprop.0+0x124>)
    2844:	617b      	str	r3, [r7, #20]
    2846:	4833      	ldr	r0, [pc, #204]	; (2914 <mem_manage_fault.constprop.0+0x118>)
    2848:	2302      	movs	r3, #2
    284a:	f107 0210 	add.w	r2, r7, #16
    284e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2852:	613b      	str	r3, [r7, #16]
    2854:	f004 f897 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2858:	4c2f      	ldr	r4, [pc, #188]	; (2918 <mem_manage_fault.constprop.0+0x11c>)
    285a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    285c:	0799      	lsls	r1, r3, #30
    285e:	d522      	bpl.n	28a6 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    2860:	4b30      	ldr	r3, [pc, #192]	; (2924 <mem_manage_fault.constprop.0+0x128>)
    2862:	617b      	str	r3, [r7, #20]
    2864:	f107 0210 	add.w	r2, r7, #16
    2868:	2302      	movs	r3, #2
    286a:	482a      	ldr	r0, [pc, #168]	; (2914 <mem_manage_fault.constprop.0+0x118>)
    286c:	613b      	str	r3, [r7, #16]
    286e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2872:	f004 f888 	bl	6986 <z_log_msg2_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2876:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2878:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    287a:	0612      	lsls	r2, r2, #24
		PR_FAULT_INFO("  Data Access Violation");
    287c:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    287e:	d512      	bpl.n	28a6 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2880:	b088      	sub	sp, #32
    2882:	4929      	ldr	r1, [pc, #164]	; (2928 <mem_manage_fault.constprop.0+0x12c>)
    2884:	4823      	ldr	r0, [pc, #140]	; (2914 <mem_manage_fault.constprop.0+0x118>)
    2886:	466a      	mov	r2, sp
    2888:	e9c2 1305 	strd	r1, r3, [r2, #20]
    288c:	2303      	movs	r3, #3
    288e:	f842 3f10 	str.w	r3, [r2, #16]!
    2892:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2896:	f004 f876 	bl	6986 <z_log_msg2_static_create.constprop.0>
    289a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    289c:	b11e      	cbz	r6, 28a6 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    289e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    28a4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    28a6:	4b1c      	ldr	r3, [pc, #112]	; (2918 <mem_manage_fault.constprop.0+0x11c>)
    28a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28aa:	07dc      	lsls	r4, r3, #31
    28ac:	d50a      	bpl.n	28c4 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    28ae:	4b1f      	ldr	r3, [pc, #124]	; (292c <mem_manage_fault.constprop.0+0x130>)
    28b0:	617b      	str	r3, [r7, #20]
    28b2:	4818      	ldr	r0, [pc, #96]	; (2914 <mem_manage_fault.constprop.0+0x118>)
    28b4:	2302      	movs	r3, #2
    28b6:	f107 0210 	add.w	r2, r7, #16
    28ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28be:	613b      	str	r3, [r7, #16]
    28c0:	f004 f861 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    28c4:	4b14      	ldr	r3, [pc, #80]	; (2918 <mem_manage_fault.constprop.0+0x11c>)
    28c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28c8:	0698      	lsls	r0, r3, #26
    28ca:	d50a      	bpl.n	28e2 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    28cc:	4b18      	ldr	r3, [pc, #96]	; (2930 <mem_manage_fault.constprop.0+0x134>)
    28ce:	617b      	str	r3, [r7, #20]
    28d0:	4810      	ldr	r0, [pc, #64]	; (2914 <mem_manage_fault.constprop.0+0x118>)
    28d2:	2302      	movs	r3, #2
    28d4:	f107 0210 	add.w	r2, r7, #16
    28d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28dc:	613b      	str	r3, [r7, #16]
    28de:	f004 f852 	bl	6986 <z_log_msg2_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    28e2:	4b0d      	ldr	r3, [pc, #52]	; (2918 <mem_manage_fault.constprop.0+0x11c>)
    28e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    28e6:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    28e8:	bf58      	it	pl
    28ea:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    28ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    28ee:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    28f0:	bf42      	ittt	mi
    28f2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    28f4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    28f8:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    28fa:	4a07      	ldr	r2, [pc, #28]	; (2918 <mem_manage_fault.constprop.0+0x11c>)
    28fc:	6a93      	ldr	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    28fe:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2900:	f043 03ff 	orr.w	r3, r3, #255	; 0xff

	return reason;
}
    2904:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2906:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2908:	7028      	strb	r0, [r5, #0]
}
    290a:	46bd      	mov	sp, r7
    290c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2910:	00007934 	.word	0x00007934
    2914:	00007470 	.word	0x00007470
    2918:	e000ed00 	.word	0xe000ed00
    291c:	0000794a 	.word	0x0000794a
    2920:	0000797d 	.word	0x0000797d
    2924:	00007990 	.word	0x00007990
    2928:	000079a8 	.word	0x000079a8
    292c:	000079be 	.word	0x000079be
    2930:	000079dd 	.word	0x000079dd

00002934 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2938:	b086      	sub	sp, #24
    293a:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    293c:	4b3f      	ldr	r3, [pc, #252]	; (2a3c <bus_fault.constprop.0+0x108>)
    293e:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2940:	4606      	mov	r6, r0
    2942:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2944:	483e      	ldr	r0, [pc, #248]	; (2a40 <bus_fault.constprop.0+0x10c>)
    2946:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    294a:	2402      	movs	r4, #2
    294c:	f107 0210 	add.w	r2, r7, #16
    2950:	613c      	str	r4, [r7, #16]
    2952:	f004 f818 	bl	6986 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2956:	4b3b      	ldr	r3, [pc, #236]	; (2a44 <bus_fault.constprop.0+0x110>)
    2958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    295a:	04d9      	lsls	r1, r3, #19
    295c:	d509      	bpl.n	2972 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    295e:	4b3a      	ldr	r3, [pc, #232]	; (2a48 <bus_fault.constprop.0+0x114>)
    2960:	4837      	ldr	r0, [pc, #220]	; (2a40 <bus_fault.constprop.0+0x10c>)
    2962:	f107 0210 	add.w	r2, r7, #16
    2966:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    296a:	e9c7 4304 	strd	r4, r3, [r7, #16]
    296e:	f004 f80a 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2972:	4b34      	ldr	r3, [pc, #208]	; (2a44 <bus_fault.constprop.0+0x110>)
    2974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2976:	051a      	lsls	r2, r3, #20
    2978:	d50a      	bpl.n	2990 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    297a:	4b34      	ldr	r3, [pc, #208]	; (2a4c <bus_fault.constprop.0+0x118>)
    297c:	617b      	str	r3, [r7, #20]
    297e:	4830      	ldr	r0, [pc, #192]	; (2a40 <bus_fault.constprop.0+0x10c>)
    2980:	2302      	movs	r3, #2
    2982:	f107 0210 	add.w	r2, r7, #16
    2986:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    298a:	613b      	str	r3, [r7, #16]
    298c:	f003 fffb 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2990:	4c2c      	ldr	r4, [pc, #176]	; (2a44 <bus_fault.constprop.0+0x110>)
    2992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2994:	059b      	lsls	r3, r3, #22
    2996:	d522      	bpl.n	29de <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    2998:	4b2d      	ldr	r3, [pc, #180]	; (2a50 <bus_fault.constprop.0+0x11c>)
    299a:	4829      	ldr	r0, [pc, #164]	; (2a40 <bus_fault.constprop.0+0x10c>)
    299c:	617b      	str	r3, [r7, #20]
    299e:	f107 0210 	add.w	r2, r7, #16
    29a2:	2302      	movs	r3, #2
    29a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29a8:	613b      	str	r3, [r7, #16]
    29aa:	f003 ffec 	bl	6986 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    29ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    29b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    29b2:	0410      	lsls	r0, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    29b4:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    29b6:	d512      	bpl.n	29de <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    29b8:	b088      	sub	sp, #32
    29ba:	4926      	ldr	r1, [pc, #152]	; (2a54 <bus_fault.constprop.0+0x120>)
    29bc:	4820      	ldr	r0, [pc, #128]	; (2a40 <bus_fault.constprop.0+0x10c>)
    29be:	466a      	mov	r2, sp
    29c0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    29c4:	2303      	movs	r3, #3
    29c6:	f842 3f10 	str.w	r3, [r2, #16]!
    29ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    29ce:	f003 ffda 	bl	6986 <z_log_msg2_static_create.constprop.0>
    29d2:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    29d4:	b11e      	cbz	r6, 29de <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    29d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    29d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    29dc:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    29de:	4b19      	ldr	r3, [pc, #100]	; (2a44 <bus_fault.constprop.0+0x110>)
    29e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29e2:	0559      	lsls	r1, r3, #21
    29e4:	d50a      	bpl.n	29fc <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    29e6:	4b1c      	ldr	r3, [pc, #112]	; (2a58 <bus_fault.constprop.0+0x124>)
    29e8:	617b      	str	r3, [r7, #20]
    29ea:	4815      	ldr	r0, [pc, #84]	; (2a40 <bus_fault.constprop.0+0x10c>)
    29ec:	2302      	movs	r3, #2
    29ee:	f107 0210 	add.w	r2, r7, #16
    29f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29f6:	613b      	str	r3, [r7, #16]
    29f8:	f003 ffc5 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    29fc:	4b11      	ldr	r3, [pc, #68]	; (2a44 <bus_fault.constprop.0+0x110>)
    29fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2a00:	05d2      	lsls	r2, r2, #23
    2a02:	d515      	bpl.n	2a30 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    2a04:	4b15      	ldr	r3, [pc, #84]	; (2a5c <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2a06:	617b      	str	r3, [r7, #20]
    2a08:	480d      	ldr	r0, [pc, #52]	; (2a40 <bus_fault.constprop.0+0x10c>)
    2a0a:	2302      	movs	r3, #2
    2a0c:	f107 0210 	add.w	r2, r7, #16
    2a10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a14:	613b      	str	r3, [r7, #16]
    2a16:	f003 ffb6 	bl	6986 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2a1a:	4a0a      	ldr	r2, [pc, #40]	; (2a44 <bus_fault.constprop.0+0x110>)
    2a1c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2a1e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2a20:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    2a24:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2a26:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2a28:	7028      	strb	r0, [r5, #0]
}
    2a2a:	46bd      	mov	sp, r7
    2a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a32:	049b      	lsls	r3, r3, #18
    2a34:	d5f1      	bpl.n	2a1a <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2a36:	4b0a      	ldr	r3, [pc, #40]	; (2a60 <bus_fault.constprop.0+0x12c>)
    2a38:	e7e5      	b.n	2a06 <bus_fault.constprop.0+0xd2>
    2a3a:	bf00      	nop
    2a3c:	00007a0c 	.word	0x00007a0c
    2a40:	00007470 	.word	0x00007470
    2a44:	e000ed00 	.word	0xe000ed00
    2a48:	00007a22 	.word	0x00007a22
    2a4c:	0000797d 	.word	0x0000797d
    2a50:	00007a33 	.word	0x00007a33
    2a54:	00007a4c 	.word	0x00007a4c
    2a58:	00007a61 	.word	0x00007a61
    2a5c:	00007a7c 	.word	0x00007a7c
    2a60:	000079dd 	.word	0x000079dd

00002a64 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2a64:	b510      	push	{r4, lr}
    2a66:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2a68:	4b33      	ldr	r3, [pc, #204]	; (2b38 <usage_fault.constprop.0+0xd4>)
    2a6a:	4834      	ldr	r0, [pc, #208]	; (2b3c <usage_fault.constprop.0+0xd8>)
    2a6c:	9305      	str	r3, [sp, #20]
    2a6e:	2402      	movs	r4, #2
    2a70:	aa04      	add	r2, sp, #16
    2a72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a76:	9404      	str	r4, [sp, #16]
    2a78:	f003 ff85 	bl	6986 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2a7c:	4b30      	ldr	r3, [pc, #192]	; (2b40 <usage_fault.constprop.0+0xdc>)
    2a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a80:	019b      	lsls	r3, r3, #6
    2a82:	d508      	bpl.n	2a96 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    2a84:	4b2f      	ldr	r3, [pc, #188]	; (2b44 <usage_fault.constprop.0+0xe0>)
    2a86:	482d      	ldr	r0, [pc, #180]	; (2b3c <usage_fault.constprop.0+0xd8>)
    2a88:	aa04      	add	r2, sp, #16
    2a8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a8e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    2a92:	f003 ff78 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2a96:	4b2a      	ldr	r3, [pc, #168]	; (2b40 <usage_fault.constprop.0+0xdc>)
    2a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a9a:	01dc      	lsls	r4, r3, #7
    2a9c:	d509      	bpl.n	2ab2 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    2a9e:	4b2a      	ldr	r3, [pc, #168]	; (2b48 <usage_fault.constprop.0+0xe4>)
    2aa0:	9305      	str	r3, [sp, #20]
    2aa2:	4826      	ldr	r0, [pc, #152]	; (2b3c <usage_fault.constprop.0+0xd8>)
    2aa4:	2302      	movs	r3, #2
    2aa6:	aa04      	add	r2, sp, #16
    2aa8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2aac:	9304      	str	r3, [sp, #16]
    2aae:	f003 ff6a 	bl	6986 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2ab2:	4b23      	ldr	r3, [pc, #140]	; (2b40 <usage_fault.constprop.0+0xdc>)
    2ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ab6:	0318      	lsls	r0, r3, #12
    2ab8:	d509      	bpl.n	2ace <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2aba:	4b24      	ldr	r3, [pc, #144]	; (2b4c <usage_fault.constprop.0+0xe8>)
    2abc:	9305      	str	r3, [sp, #20]
    2abe:	481f      	ldr	r0, [pc, #124]	; (2b3c <usage_fault.constprop.0+0xd8>)
    2ac0:	2302      	movs	r3, #2
    2ac2:	aa04      	add	r2, sp, #16
    2ac4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ac8:	9304      	str	r3, [sp, #16]
    2aca:	f003 ff5c 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2ace:	4b1c      	ldr	r3, [pc, #112]	; (2b40 <usage_fault.constprop.0+0xdc>)
    2ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ad2:	0359      	lsls	r1, r3, #13
    2ad4:	d509      	bpl.n	2aea <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2ad6:	4b1e      	ldr	r3, [pc, #120]	; (2b50 <usage_fault.constprop.0+0xec>)
    2ad8:	9305      	str	r3, [sp, #20]
    2ada:	4818      	ldr	r0, [pc, #96]	; (2b3c <usage_fault.constprop.0+0xd8>)
    2adc:	2302      	movs	r3, #2
    2ade:	aa04      	add	r2, sp, #16
    2ae0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ae4:	9304      	str	r3, [sp, #16]
    2ae6:	f003 ff4e 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2aea:	4b15      	ldr	r3, [pc, #84]	; (2b40 <usage_fault.constprop.0+0xdc>)
    2aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2aee:	039a      	lsls	r2, r3, #14
    2af0:	d509      	bpl.n	2b06 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2af2:	4b18      	ldr	r3, [pc, #96]	; (2b54 <usage_fault.constprop.0+0xf0>)
    2af4:	9305      	str	r3, [sp, #20]
    2af6:	4811      	ldr	r0, [pc, #68]	; (2b3c <usage_fault.constprop.0+0xd8>)
    2af8:	2302      	movs	r3, #2
    2afa:	aa04      	add	r2, sp, #16
    2afc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b00:	9304      	str	r3, [sp, #16]
    2b02:	f003 ff40 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2b06:	4b0e      	ldr	r3, [pc, #56]	; (2b40 <usage_fault.constprop.0+0xdc>)
    2b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b0a:	03db      	lsls	r3, r3, #15
    2b0c:	d509      	bpl.n	2b22 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2b0e:	4b12      	ldr	r3, [pc, #72]	; (2b58 <usage_fault.constprop.0+0xf4>)
    2b10:	9305      	str	r3, [sp, #20]
    2b12:	480a      	ldr	r0, [pc, #40]	; (2b3c <usage_fault.constprop.0+0xd8>)
    2b14:	2302      	movs	r3, #2
    2b16:	aa04      	add	r2, sp, #16
    2b18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b1c:	9304      	str	r3, [sp, #16]
    2b1e:	f003 ff32 	bl	6986 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2b22:	4a07      	ldr	r2, [pc, #28]	; (2b40 <usage_fault.constprop.0+0xdc>)
    2b24:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b26:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2b2a:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    2b2e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2b30:	6293      	str	r3, [r2, #40]	; 0x28
}
    2b32:	b006      	add	sp, #24
    2b34:	bd10      	pop	{r4, pc}
    2b36:	bf00      	nop
    2b38:	00007a94 	.word	0x00007a94
    2b3c:	00007470 	.word	0x00007470
    2b40:	e000ed00 	.word	0xe000ed00
    2b44:	00007aac 	.word	0x00007aac
    2b48:	00007abf 	.word	0x00007abf
    2b4c:	00007ad9 	.word	0x00007ad9
    2b50:	00007af7 	.word	0x00007af7
    2b54:	00007b1c 	.word	0x00007b1c
    2b58:	00007b36 	.word	0x00007b36

00002b5c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2b60:	4b79      	ldr	r3, [pc, #484]	; (2d48 <z_arm_fault+0x1ec>)
{
    2b62:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2b64:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    2b68:	af00      	add	r7, sp, #0
    2b6a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2b6c:	f3c8 0408 	ubfx	r4, r8, #0, #9
    2b70:	2600      	movs	r6, #0
    2b72:	f386 8811 	msr	BASEPRI, r6
    2b76:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2b7a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2b7e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2b82:	d10e      	bne.n	2ba2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2b84:	f002 030c 	and.w	r3, r2, #12
    2b88:	2b08      	cmp	r3, #8
    2b8a:	d10c      	bne.n	2ba6 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2b8c:	4b6f      	ldr	r3, [pc, #444]	; (2d4c <z_arm_fault+0x1f0>)
    2b8e:	61fb      	str	r3, [r7, #28]
    2b90:	486f      	ldr	r0, [pc, #444]	; (2d50 <z_arm_fault+0x1f4>)
    2b92:	2302      	movs	r3, #2
    2b94:	f107 0218 	add.w	r2, r7, #24
    2b98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b9c:	61bb      	str	r3, [r7, #24]
    2b9e:	f003 fef2 	bl	6986 <z_log_msg2_static_create.constprop.0>
		return NULL;
    2ba2:	4635      	mov	r5, r6
    2ba4:	e003      	b.n	2bae <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2ba6:	0712      	lsls	r2, r2, #28
    2ba8:	d401      	bmi.n	2bae <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    2baa:	4605      	mov	r5, r0
			*nested_exc = true;
    2bac:	2601      	movs	r6, #1
	*recoverable = false;
    2bae:	2300      	movs	r3, #0
    2bb0:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    2bb2:	1ee3      	subs	r3, r4, #3
    2bb4:	2b09      	cmp	r3, #9
    2bb6:	f200 80a6 	bhi.w	2d06 <z_arm_fault+0x1aa>
    2bba:	e8df f003 	tbb	[pc, r3]
    2bbe:	9905      	.short	0x9905
    2bc0:	a4a4969c 	.word	0xa4a4969c
    2bc4:	9fa4a4a4 	.word	0x9fa4a4a4
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2bc8:	f8df 817c 	ldr.w	r8, [pc, #380]	; 2d48 <z_arm_fault+0x1ec>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2bcc:	4b61      	ldr	r3, [pc, #388]	; (2d54 <z_arm_fault+0x1f8>)
    2bce:	4860      	ldr	r0, [pc, #384]	; (2d50 <z_arm_fault+0x1f4>)
    2bd0:	61fb      	str	r3, [r7, #28]
    2bd2:	f04f 0a02 	mov.w	sl, #2
    2bd6:	f107 0218 	add.w	r2, r7, #24
    2bda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2bde:	f8c7 a018 	str.w	sl, [r7, #24]
    2be2:	f003 fed0 	bl	6986 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2be6:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    2bea:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2bee:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    2bf2:	46e9      	mov	r9, sp
	*recoverable = false;
    2bf4:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2bf8:	d00b      	beq.n	2c12 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    2bfa:	4b57      	ldr	r3, [pc, #348]	; (2d58 <z_arm_fault+0x1fc>)
    2bfc:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    2c00:	4853      	ldr	r0, [pc, #332]	; (2d50 <z_arm_fault+0x1f4>)
    2c02:	f107 0218 	add.w	r2, r7, #24
    2c06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c0a:	f003 febc 	bl	6986 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2c0e:	2400      	movs	r4, #0
}
    2c10:	e00d      	b.n	2c2e <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2c12:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2c16:	2b00      	cmp	r3, #0
    2c18:	da2b      	bge.n	2c72 <z_arm_fault+0x116>
		PR_EXC("  Debug event");
    2c1a:	4b50      	ldr	r3, [pc, #320]	; (2d5c <z_arm_fault+0x200>)
    2c1c:	484c      	ldr	r0, [pc, #304]	; (2d50 <z_arm_fault+0x1f4>)
    2c1e:	f107 0218 	add.w	r2, r7, #24
    2c22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c26:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2c2a:	f003 feac 	bl	6986 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2c2e:	79fb      	ldrb	r3, [r7, #7]
    2c30:	b9db      	cbnz	r3, 2c6a <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2c32:	f107 0208 	add.w	r2, r7, #8
    2c36:	f105 0c20 	add.w	ip, r5, #32
    2c3a:	6828      	ldr	r0, [r5, #0]
    2c3c:	6869      	ldr	r1, [r5, #4]
    2c3e:	4613      	mov	r3, r2
    2c40:	c303      	stmia	r3!, {r0, r1}
    2c42:	3508      	adds	r5, #8
    2c44:	4565      	cmp	r5, ip
    2c46:	461a      	mov	r2, r3
    2c48:	d1f7      	bne.n	2c3a <z_arm_fault+0xde>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c4c:	2e00      	cmp	r6, #0
    2c4e:	d075      	beq.n	2d3c <z_arm_fault+0x1e0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2c50:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2c54:	b922      	cbnz	r2, 2c60 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2c56:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2c5a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2c5e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2c60:	f107 0108 	add.w	r1, r7, #8
    2c64:	4620      	mov	r0, r4
    2c66:	f7ff fc63 	bl	2530 <z_arm_fatal_error>
}
    2c6a:	372c      	adds	r7, #44	; 0x2c
    2c6c:	46bd      	mov	sp, r7
    2c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2c72:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2c76:	005b      	lsls	r3, r3, #1
    2c78:	d5d9      	bpl.n	2c2e <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    2c7a:	4b39      	ldr	r3, [pc, #228]	; (2d60 <z_arm_fault+0x204>)
    2c7c:	4834      	ldr	r0, [pc, #208]	; (2d50 <z_arm_fault+0x1f4>)
    2c7e:	f107 0218 	add.w	r2, r7, #24
    2c82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c86:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2c8a:	f003 fe7c 	bl	6986 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    2c8e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2c90:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2c94:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2c98:	429a      	cmp	r2, r3
    2c9a:	d008      	beq.n	2cae <z_arm_fault+0x152>
		} else if (SCB_MMFSR != 0) {
    2c9c:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    2ca0:	b1b3      	cbz	r3, 2cd0 <z_arm_fault+0x174>
			reason = mem_manage_fault(esf, 1, recoverable);
    2ca2:	1df9      	adds	r1, r7, #7
    2ca4:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2ca6:	f7ff fda9 	bl	27fc <mem_manage_fault.constprop.0>
    2caa:	4604      	mov	r4, r0
		break;
    2cac:	e7bf      	b.n	2c2e <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2cae:	b088      	sub	sp, #32
    2cb0:	682b      	ldr	r3, [r5, #0]
    2cb2:	492c      	ldr	r1, [pc, #176]	; (2d64 <z_arm_fault+0x208>)
    2cb4:	4826      	ldr	r0, [pc, #152]	; (2d50 <z_arm_fault+0x1f4>)
    2cb6:	466a      	mov	r2, sp
    2cb8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2cbc:	2303      	movs	r3, #3
    2cbe:	f842 3f10 	str.w	r3, [r2, #16]!
    2cc2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2cc6:	f003 fe5e 	bl	6986 <z_log_msg2_static_create.constprop.0>
    2cca:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    2ccc:	682c      	ldr	r4, [r5, #0]
    2cce:	e7ae      	b.n	2c2e <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    2cd0:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    2cd4:	b123      	cbz	r3, 2ce0 <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
    2cd6:	1df9      	adds	r1, r7, #7
    2cd8:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2cda:	f7ff fe2b 	bl	2934 <bus_fault.constprop.0>
    2cde:	e7e4      	b.n	2caa <z_arm_fault+0x14e>
		} else if (SCB_UFSR != 0) {
    2ce0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    2ce4:	b29b      	uxth	r3, r3
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d0a1      	beq.n	2c2e <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    2cea:	f7ff febb 	bl	2a64 <usage_fault.constprop.0>
    2cee:	e7dc      	b.n	2caa <z_arm_fault+0x14e>
		reason = mem_manage_fault(esf, 0, recoverable);
    2cf0:	1df9      	adds	r1, r7, #7
    2cf2:	2000      	movs	r0, #0
    2cf4:	e7d7      	b.n	2ca6 <z_arm_fault+0x14a>
		reason = bus_fault(esf, 0, recoverable);
    2cf6:	1df9      	adds	r1, r7, #7
    2cf8:	2000      	movs	r0, #0
    2cfa:	e7ee      	b.n	2cda <z_arm_fault+0x17e>
	PR_FAULT_INFO(
    2cfc:	4b1a      	ldr	r3, [pc, #104]	; (2d68 <z_arm_fault+0x20c>)
    2cfe:	61fb      	str	r3, [r7, #28]
    2d00:	2302      	movs	r3, #2
    2d02:	61bb      	str	r3, [r7, #24]
    2d04:	e77c      	b.n	2c00 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    2d06:	4a19      	ldr	r2, [pc, #100]	; (2d6c <z_arm_fault+0x210>)
    2d08:	4b19      	ldr	r3, [pc, #100]	; (2d70 <z_arm_fault+0x214>)
    2d0a:	491a      	ldr	r1, [pc, #104]	; (2d74 <z_arm_fault+0x218>)
    2d0c:	4810      	ldr	r0, [pc, #64]	; (2d50 <z_arm_fault+0x1f4>)
    2d0e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2d12:	46e8      	mov	r8, sp
    2d14:	b08a      	sub	sp, #40	; 0x28
    2d16:	bf18      	it	ne
    2d18:	4613      	movne	r3, r2
    2d1a:	466a      	mov	r2, sp
    2d1c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2d20:	2302      	movs	r3, #2
    2d22:	f882 3020 	strb.w	r3, [r2, #32]
    2d26:	3c10      	subs	r4, #16
    2d28:	4b13      	ldr	r3, [pc, #76]	; (2d78 <z_arm_fault+0x21c>)
    2d2a:	61d4      	str	r4, [r2, #28]
    2d2c:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    2d30:	f842 3f10 	str.w	r3, [r2, #16]!
    2d34:	f003 fe27 	bl	6986 <z_log_msg2_static_create.constprop.0>
    2d38:	46c5      	mov	sp, r8
    2d3a:	e768      	b.n	2c0e <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2d3c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2d40:	f023 0301 	bic.w	r3, r3, #1
    2d44:	e78b      	b.n	2c5e <z_arm_fault+0x102>
    2d46:	bf00      	nop
    2d48:	e000ed00 	.word	0xe000ed00
    2d4c:	00007b8f 	.word	0x00007b8f
    2d50:	00007470 	.word	0x00007470
    2d54:	00007bba 	.word	0x00007bba
    2d58:	00007bd1 	.word	0x00007bd1
    2d5c:	00007bf2 	.word	0x00007bf2
    2d60:	00007c00 	.word	0x00007c00
    2d64:	00007c1f 	.word	0x00007c1f
    2d68:	00007c3b 	.word	0x00007c3b
    2d6c:	00007b76 	.word	0x00007b76
    2d70:	00007b61 	.word	0x00007b61
    2d74:	00007c5f 	.word	0x00007c5f
    2d78:	01000004 	.word	0x01000004

00002d7c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2d7c:	4a02      	ldr	r2, [pc, #8]	; (2d88 <z_arm_fault_init+0xc>)
    2d7e:	6953      	ldr	r3, [r2, #20]
    2d80:	f043 0310 	orr.w	r3, r3, #16
    2d84:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2d86:	4770      	bx	lr
    2d88:	e000ed00 	.word	0xe000ed00

00002d8c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2d8c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2d90:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2d94:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2d96:	4672      	mov	r2, lr
	bl z_arm_fault
    2d98:	f7ff fee0 	bl	2b5c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2d9c:	bd01      	pop	{r0, pc}
    2d9e:	bf00      	nop

00002da0 <z_arm_interrupt_init>:
    2da0:	4804      	ldr	r0, [pc, #16]	; (2db4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2da2:	2300      	movs	r3, #0
    2da4:	2120      	movs	r1, #32
    2da6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2da8:	3301      	adds	r3, #1
    2daa:	2b30      	cmp	r3, #48	; 0x30
    2dac:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2db0:	d1f9      	bne.n	2da6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2db2:	4770      	bx	lr
    2db4:	e000e100 	.word	0xe000e100

00002db8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2db8:	2000      	movs	r0, #0
    msr CONTROL, r0
    2dba:	f380 8814 	msr	CONTROL, r0
    isb
    2dbe:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2dc2:	f004 f9fb 	bl	71bc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2dc6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2dc8:	490d      	ldr	r1, [pc, #52]	; (2e00 <__start+0x48>)
    str r0, [r1]
    2dca:	6008      	str	r0, [r1, #0]
    dsb
    2dcc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2dd0:	480c      	ldr	r0, [pc, #48]	; (2e04 <__start+0x4c>)
    msr msp, r0
    2dd2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2dd6:	f000 f82b 	bl	2e30 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2dda:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2ddc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2de0:	4809      	ldr	r0, [pc, #36]	; (2e08 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2de6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2de8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2dec:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2df0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2df2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2df4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2df8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2dfc:	f7ff fc38 	bl	2670 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2e00:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2e04:	20001ca8 	.word	0x20001ca8
    ldr r0, =z_interrupt_stacks
    2e08:	20001de8 	.word	0x20001de8

00002e0c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2e0c:	4907      	ldr	r1, [pc, #28]	; (2e2c <z_arm_clear_arm_mpu_config+0x20>)
    2e0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2e12:	2300      	movs	r3, #0
	int num_regions =
    2e14:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2e18:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2e1a:	4293      	cmp	r3, r2
    2e1c:	d100      	bne.n	2e20 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2e1e:	4770      	bx	lr
  MPU->RNR = rnr;
    2e20:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2e24:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2e28:	3301      	adds	r3, #1
    2e2a:	e7f6      	b.n	2e1a <z_arm_clear_arm_mpu_config+0xe>
    2e2c:	e000ed00 	.word	0xe000ed00

00002e30 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2e30:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2e32:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2e34:	2300      	movs	r3, #0
    2e36:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2e3a:	f7ff ffe7 	bl	2e0c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2e3e:	4b14      	ldr	r3, [pc, #80]	; (2e90 <z_arm_init_arch_hw_at_boot+0x60>)
    2e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2e58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2e5c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2e60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2e64:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2e68:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2e6c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2e70:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2e74:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2e78:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2e7c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2e80:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2e84:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2e86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e8a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2e8e:	bd08      	pop	{r3, pc}
    2e90:	e000e100 	.word	0xe000e100

00002e94 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2e94:	4b08      	ldr	r3, [pc, #32]	; (2eb8 <z_impl_k_thread_abort+0x24>)
    2e96:	689b      	ldr	r3, [r3, #8]
    2e98:	4283      	cmp	r3, r0
    2e9a:	d10b      	bne.n	2eb4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2e9c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2ea0:	b143      	cbz	r3, 2eb4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ea2:	4b06      	ldr	r3, [pc, #24]	; (2ebc <z_impl_k_thread_abort+0x28>)
    2ea4:	685a      	ldr	r2, [r3, #4]
    2ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2eaa:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2eb2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2eb4:	f002 bd20 	b.w	58f8 <z_thread_abort>
    2eb8:	20000f68 	.word	0x20000f68
    2ebc:	e000ed00 	.word	0xe000ed00

00002ec0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2ec0:	4b02      	ldr	r3, [pc, #8]	; (2ecc <z_arm_configure_static_mpu_regions+0xc>)
    2ec2:	4a03      	ldr	r2, [pc, #12]	; (2ed0 <z_arm_configure_static_mpu_regions+0x10>)
    2ec4:	4803      	ldr	r0, [pc, #12]	; (2ed4 <z_arm_configure_static_mpu_regions+0x14>)
    2ec6:	2101      	movs	r1, #1
    2ec8:	f000 b880 	b.w	2fcc <arm_core_mpu_configure_static_mpu_regions>
    2ecc:	20040000 	.word	0x20040000
    2ed0:	20000000 	.word	0x20000000
    2ed4:	0000756c 	.word	0x0000756c

00002ed8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2eda:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 2f90 <mpu_configure_regions+0xb8>
    2ede:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2ee0:	2500      	movs	r5, #0
    2ee2:	428d      	cmp	r5, r1
    2ee4:	da1a      	bge.n	2f1c <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    2ee6:	6844      	ldr	r4, [r0, #4]
    2ee8:	2c00      	cmp	r4, #0
    2eea:	d04d      	beq.n	2f88 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2eec:	b1fb      	cbz	r3, 2f2e <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2eee:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2ef2:	ea14 0f0e 	tst.w	r4, lr
    2ef6:	d014      	beq.n	2f22 <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2ef8:	4b26      	ldr	r3, [pc, #152]	; (2f94 <mpu_configure_regions+0xbc>)
    2efa:	466c      	mov	r4, sp
    2efc:	b088      	sub	sp, #32
    2efe:	466a      	mov	r2, sp
    2f00:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2f04:	2303      	movs	r3, #3
    2f06:	f842 3f10 	str.w	r3, [r2, #16]!
    2f0a:	4823      	ldr	r0, [pc, #140]	; (2f98 <mpu_configure_regions+0xc0>)
    2f0c:	2300      	movs	r3, #0
    2f0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2f12:	f003 fcd9 	bl	68c8 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2f16:	f06f 0215 	mvn.w	r2, #21
    2f1a:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2f1c:	4610      	mov	r0, r2
    2f1e:	46bd      	mov	sp, r7
    2f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2f22:	2c1f      	cmp	r4, #31
    2f24:	d9e8      	bls.n	2ef8 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    2f26:	6806      	ldr	r6, [r0, #0]
		&&
    2f28:	ea1e 0f06 	tst.w	lr, r6
    2f2c:	d1e4      	bne.n	2ef8 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2f2e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2f30:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2f32:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2f36:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2f38:	d914      	bls.n	2f64 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    2f3a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2f3e:	d813      	bhi.n	2f68 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2f40:	3c01      	subs	r4, #1
    2f42:	fab4 f484 	clz	r4, r4
    2f46:	f1c4 041f 	rsb	r4, r4, #31
    2f4a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2f4c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2f4e:	ea4e 0404 	orr.w	r4, lr, r4
    2f52:	d90b      	bls.n	2f6c <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2f54:	4911      	ldr	r1, [pc, #68]	; (2f9c <mpu_configure_regions+0xc4>)
    2f56:	466c      	mov	r4, sp
    2f58:	b088      	sub	sp, #32
    2f5a:	466b      	mov	r3, sp
    2f5c:	e9c3 1205 	strd	r1, r2, [r3, #20]
    2f60:	461a      	mov	r2, r3
    2f62:	e7cf      	b.n	2f04 <mpu_configure_regions+0x2c>
		return REGION_32B;
    2f64:	2408      	movs	r4, #8
    2f66:	e7f1      	b.n	2f4c <mpu_configure_regions+0x74>
		return REGION_4G;
    2f68:	243e      	movs	r4, #62	; 0x3e
    2f6a:	e7ef      	b.n	2f4c <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2f6c:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    2f70:	4316      	orrs	r6, r2
    2f72:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2f76:	f044 0401 	orr.w	r4, r4, #1
    2f7a:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2f7e:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    2f82:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2f84:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2f88:	3501      	adds	r5, #1
    2f8a:	300c      	adds	r0, #12
    2f8c:	e7a9      	b.n	2ee2 <mpu_configure_regions+0xa>
    2f8e:	bf00      	nop
    2f90:	e000ed00 	.word	0xe000ed00
    2f94:	00007c76 	.word	0x00007c76
    2f98:	00007468 	.word	0x00007468
    2f9c:	00007c99 	.word	0x00007c99

00002fa0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2fa0:	4b04      	ldr	r3, [pc, #16]	; (2fb4 <arm_core_mpu_enable+0x14>)
    2fa2:	2205      	movs	r2, #5
    2fa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2fa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fac:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2fb0:	4770      	bx	lr
    2fb2:	bf00      	nop
    2fb4:	e000ed00 	.word	0xe000ed00

00002fb8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2fb8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2fbc:	4b02      	ldr	r3, [pc, #8]	; (2fc8 <arm_core_mpu_disable+0x10>)
    2fbe:	2200      	movs	r2, #0
    2fc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2fc4:	4770      	bx	lr
    2fc6:	bf00      	nop
    2fc8:	e000ed00 	.word	0xe000ed00

00002fcc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2fcc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2fce:	4c03      	ldr	r4, [pc, #12]	; (2fdc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2fd0:	2301      	movs	r3, #1
    2fd2:	7822      	ldrb	r2, [r4, #0]
    2fd4:	f7ff ff80 	bl	2ed8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2fd8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2fda:	bd10      	pop	{r4, pc}
    2fdc:	2000118d 	.word	0x2000118d

00002fe0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2fe0:	4914      	ldr	r1, [pc, #80]	; (3034 <z_arm_mpu_init+0x54>)
    2fe2:	6808      	ldr	r0, [r1, #0]
    2fe4:	2808      	cmp	r0, #8
{
    2fe6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2fe8:	d821      	bhi.n	302e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2fea:	f7ff ffe5 	bl	2fb8 <arm_core_mpu_disable>
    2fee:	4c12      	ldr	r4, [pc, #72]	; (3038 <z_arm_mpu_init+0x58>)
    2ff0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2ff2:	2200      	movs	r2, #0
    2ff4:	4290      	cmp	r0, r2
    2ff6:	f101 010c 	add.w	r1, r1, #12
    2ffa:	d105      	bne.n	3008 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2ffc:	4b0f      	ldr	r3, [pc, #60]	; (303c <z_arm_mpu_init+0x5c>)
    2ffe:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3000:	f7ff ffce 	bl	2fa0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3004:	2000      	movs	r0, #0
}
    3006:	bd10      	pop	{r4, pc}
    3008:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    300c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3010:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3014:	4313      	orrs	r3, r2
    3016:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    301a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    301e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3022:	f043 0301 	orr.w	r3, r3, #1
    3026:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    302a:	3201      	adds	r2, #1
    302c:	e7e2      	b.n	2ff4 <z_arm_mpu_init+0x14>
		return -1;
    302e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3032:	e7e8      	b.n	3006 <z_arm_mpu_init+0x26>
    3034:	00007578 	.word	0x00007578
    3038:	e000ed00 	.word	0xe000ed00
    303c:	2000118d 	.word	0x2000118d

00003040 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3040:	4b01      	ldr	r3, [pc, #4]	; (3048 <__stdout_hook_install+0x8>)
    3042:	6018      	str	r0, [r3, #0]
}
    3044:	4770      	bx	lr
    3046:	bf00      	nop
    3048:	200000e8 	.word	0x200000e8

0000304c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    304e:	4f0a      	ldr	r7, [pc, #40]	; (3078 <z_impl_zephyr_write_stdout+0x2c>)
    3050:	460d      	mov	r5, r1
    3052:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    3054:	f1c0 0401 	rsb	r4, r0, #1
    3058:	19a3      	adds	r3, r4, r6
    305a:	429d      	cmp	r5, r3
    305c:	dc01      	bgt.n	3062 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    305e:	4628      	mov	r0, r5
    3060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    3062:	7873      	ldrb	r3, [r6, #1]
    3064:	2b0a      	cmp	r3, #10
    3066:	d102      	bne.n	306e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    3068:	683b      	ldr	r3, [r7, #0]
    306a:	200d      	movs	r0, #13
    306c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    306e:	683b      	ldr	r3, [r7, #0]
    3070:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3074:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    3076:	e7ef      	b.n	3058 <z_impl_zephyr_write_stdout+0xc>
    3078:	200000e8 	.word	0x200000e8

0000307c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    307c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    307e:	211d      	movs	r1, #29
    3080:	4804      	ldr	r0, [pc, #16]	; (3094 <__chk_fail+0x18>)
    3082:	f7ff ffe3 	bl	304c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    3086:	4040      	eors	r0, r0
    3088:	f380 8811 	msr	BASEPRI, r0
    308c:	f04f 0003 	mov.w	r0, #3
    3090:	df02      	svc	2
	CODE_UNREACHABLE;
    3092:	bf00      	nop
    3094:	00007cbf 	.word	0x00007cbf

00003098 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3098:	f04f 0320 	mov.w	r3, #32
    309c:	f3ef 8211 	mrs	r2, BASEPRI
    30a0:	f383 8812 	msr	BASEPRI_MAX, r3
    30a4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    30a8:	4906      	ldr	r1, [pc, #24]	; (30c4 <nordicsemi_nrf52_init+0x2c>)
    30aa:	2301      	movs	r3, #1
    30ac:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    30b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    30b4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    30b8:	f382 8811 	msr	BASEPRI, r2
    30bc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    30c0:	2000      	movs	r0, #0
    30c2:	4770      	bx	lr
    30c4:	4001e000 	.word	0x4001e000

000030c8 <sys_arch_reboot>:
    *p_gpregret = val;
    30c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30cc:	b2c0      	uxtb	r0, r0
    30ce:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    30d2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    30d6:	4905      	ldr	r1, [pc, #20]	; (30ec <sys_arch_reboot+0x24>)
    30d8:	4b05      	ldr	r3, [pc, #20]	; (30f0 <sys_arch_reboot+0x28>)
    30da:	68ca      	ldr	r2, [r1, #12]
    30dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    30e0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    30e2:	60cb      	str	r3, [r1, #12]
    30e4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    30e8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    30ea:	e7fd      	b.n	30e8 <sys_arch_reboot+0x20>
    30ec:	e000ed00 	.word	0xe000ed00
    30f0:	05fa0004 	.word	0x05fa0004

000030f4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    30f4:	b120      	cbz	r0, 3100 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    30f6:	4b03      	ldr	r3, [pc, #12]	; (3104 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    30f8:	0180      	lsls	r0, r0, #6
    30fa:	f043 0301 	orr.w	r3, r3, #1
    30fe:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3100:	4770      	bx	lr
    3102:	bf00      	nop
    3104:	000074c0 	.word	0x000074c0

00003108 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3108:	4b04      	ldr	r3, [pc, #16]	; (311c <adc_context_start_sampling.isra.0+0x14>)
    310a:	2201      	movs	r2, #1
    310c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3110:	b108      	cbz	r0, 3116 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3112:	60da      	str	r2, [r3, #12]
}
    3114:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3116:	601a      	str	r2, [r3, #0]
    3118:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    311a:	4770      	bx	lr
    311c:	40007000 	.word	0x40007000

00003120 <adc_nrfx_channel_setup>:
{
    3120:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    3122:	7908      	ldrb	r0, [r1, #4]
    3124:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    3128:	2c07      	cmp	r4, #7
{
    312a:	b086      	sub	sp, #24
	if (channel_id >= SAADC_CH_NUM) {
    312c:	d820      	bhi.n	3170 <adc_nrfx_channel_setup+0x50>
	switch (channel_cfg->gain) {
    312e:	780b      	ldrb	r3, [r1, #0]
    3130:	2b09      	cmp	r3, #9
    3132:	d812      	bhi.n	315a <adc_nrfx_channel_setup+0x3a>
    3134:	e8df f003 	tbb	[pc, r3]
    3138:	06060606 	.word	0x06060606
    313c:	0d051106 	.word	0x0d051106
    3140:	0f11      	.short	0x0f11
		config.gain = NRF_SAADC_GAIN1;
    3142:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    3144:	784a      	ldrb	r2, [r1, #1]
    3146:	2a03      	cmp	r2, #3
    3148:	d015      	beq.n	3176 <adc_nrfx_channel_setup+0x56>
    314a:	2a04      	cmp	r2, #4
    314c:	d025      	beq.n	319a <adc_nrfx_channel_setup+0x7a>
		LOG_ERR("Selected ADC reference is not valid");
    314e:	4b30      	ldr	r3, [pc, #192]	; (3210 <adc_nrfx_channel_setup+0xf0>)
    3150:	e004      	b.n	315c <adc_nrfx_channel_setup+0x3c>
		config.gain = NRF_SAADC_GAIN2;
    3152:	2306      	movs	r3, #6
		break;
    3154:	e7f6      	b.n	3144 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
    3156:	2307      	movs	r3, #7
		break;
    3158:	e7f4      	b.n	3144 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
    315a:	4b2e      	ldr	r3, [pc, #184]	; (3214 <adc_nrfx_channel_setup+0xf4>)
		LOG_ERR("Selected ADC acquisition time is not valid");
    315c:	9305      	str	r3, [sp, #20]
    315e:	2302      	movs	r3, #2
    3160:	9304      	str	r3, [sp, #16]
    3162:	482d      	ldr	r0, [pc, #180]	; (3218 <adc_nrfx_channel_setup+0xf8>)
    3164:	2300      	movs	r3, #0
    3166:	aa04      	add	r2, sp, #16
    3168:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    316c:	f003 fbac 	bl	68c8 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
    3170:	f06f 0015 	mvn.w	r0, #21
    3174:	e042      	b.n	31fc <adc_nrfx_channel_setup+0xdc>
	switch (channel_cfg->reference) {
    3176:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
    3178:	884a      	ldrh	r2, [r1, #2]
    317a:	f244 060a 	movw	r6, #16394	; 0x400a
    317e:	42b2      	cmp	r2, r6
    3180:	d040      	beq.n	3204 <adc_nrfx_channel_setup+0xe4>
    3182:	d80c      	bhi.n	319e <adc_nrfx_channel_setup+0x7e>
    3184:	f244 0603 	movw	r6, #16387	; 0x4003
    3188:	42b2      	cmp	r2, r6
    318a:	d016      	beq.n	31ba <adc_nrfx_channel_setup+0x9a>
    318c:	f244 0605 	movw	r6, #16389	; 0x4005
    3190:	42b2      	cmp	r2, r6
    3192:	d035      	beq.n	3200 <adc_nrfx_channel_setup+0xe0>
    3194:	b3b2      	cbz	r2, 3204 <adc_nrfx_channel_setup+0xe4>
		LOG_ERR("Selected ADC acquisition time is not valid");
    3196:	4b21      	ldr	r3, [pc, #132]	; (321c <adc_nrfx_channel_setup+0xfc>)
    3198:	e7e0      	b.n	315c <adc_nrfx_channel_setup+0x3c>
	nrf_saadc_channel_config_t config = {
    319a:	2500      	movs	r5, #0
    319c:	e7ec      	b.n	3178 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->acquisition_time) {
    319e:	f244 0614 	movw	r6, #16404	; 0x4014
    31a2:	42b2      	cmp	r2, r6
    31a4:	d030      	beq.n	3208 <adc_nrfx_channel_setup+0xe8>
    31a6:	f244 0628 	movw	r6, #16424	; 0x4028
    31aa:	42b2      	cmp	r2, r6
    31ac:	d02e      	beq.n	320c <adc_nrfx_channel_setup+0xec>
    31ae:	f244 060f 	movw	r6, #16399	; 0x400f
    31b2:	42b2      	cmp	r2, r6
    31b4:	d1ef      	bne.n	3196 <adc_nrfx_channel_setup+0x76>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    31b6:	2203      	movs	r2, #3
    31b8:	e000      	b.n	31bc <adc_nrfx_channel_setup+0x9c>
	nrf_saadc_channel_config_t config = {
    31ba:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    31bc:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    31c0:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    31c2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    31c6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    31ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    31ce:	0122      	lsls	r2, r4, #4
    31d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    31d4:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    31d8:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    31da:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    31de:	0123      	lsls	r3, r4, #4
    31e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    31e4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    31e8:	798a      	ldrb	r2, [r1, #6]
    31ea:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    31ee:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    31f2:	4b0b      	ldr	r3, [pc, #44]	; (3220 <adc_nrfx_channel_setup+0x100>)
    31f4:	441c      	add	r4, r3
    31f6:	794b      	ldrb	r3, [r1, #5]
    31f8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
    31fc:	b006      	add	sp, #24
    31fe:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    3200:	2201      	movs	r2, #1
    3202:	e7db      	b.n	31bc <adc_nrfx_channel_setup+0x9c>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    3204:	2202      	movs	r2, #2
    3206:	e7d9      	b.n	31bc <adc_nrfx_channel_setup+0x9c>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    3208:	2204      	movs	r2, #4
    320a:	e7d7      	b.n	31bc <adc_nrfx_channel_setup+0x9c>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    320c:	2205      	movs	r2, #5
    320e:	e7d5      	b.n	31bc <adc_nrfx_channel_setup+0x9c>
    3210:	00007d0f 	.word	0x00007d0f
    3214:	00007cf0 	.word	0x00007cf0
    3218:	00007430 	.word	0x00007430
    321c:	00007d33 	.word	0x00007d33
    3220:	20000000 	.word	0x20000000

00003224 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    3224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3228:	b088      	sub	sp, #32
    322a:	460d      	mov	r5, r1
    322c:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
    322e:	487a      	ldr	r0, [pc, #488]	; (3418 <adc_nrfx_read+0x1f4>)
    3230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3238:	f002 f83e 	bl	52b8 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    323c:	686c      	ldr	r4, [r5, #4]
	if (!selected_channels ||
    323e:	b114      	cbz	r4, 3246 <adc_nrfx_read+0x22>
    3240:	f034 01ff 	bics.w	r1, r4, #255	; 0xff
    3244:	d00c      	beq.n	3260 <adc_nrfx_read+0x3c>
		LOG_ERR("Invalid selection of channels");
    3246:	4b75      	ldr	r3, [pc, #468]	; (341c <adc_nrfx_read+0x1f8>)
		LOG_ERR(
    3248:	617b      	str	r3, [r7, #20]
    324a:	2302      	movs	r3, #2
    324c:	613b      	str	r3, [r7, #16]
    324e:	4874      	ldr	r0, [pc, #464]	; (3420 <adc_nrfx_read+0x1fc>)
    3250:	2300      	movs	r3, #0
    3252:	f107 0210 	add.w	r2, r7, #16
    3256:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    325a:	f003 fb35 	bl	68c8 <z_impl_z_log_msg2_static_create>
	if (error) {
    325e:	e01c      	b.n	329a <adc_nrfx_read+0x76>
    p_reg->CH[channel].PSELP = pselp;
    3260:	4e70      	ldr	r6, [pc, #448]	; (3424 <adc_nrfx_read+0x200>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    3262:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 3428 <adc_nrfx_read+0x204>
	active_channels = 0U;
    3266:	460a      	mov	r2, r1
		if (selected_channels & BIT(channel_id)) {
    3268:	fa24 f301 	lsr.w	r3, r4, r1
    326c:	f013 0301 	ands.w	r3, r3, #1
    3270:	d042      	beq.n	32f8 <adc_nrfx_read+0xd4>
			if (m_data.positive_inputs[channel_id] == 0U) {
    3272:	eb0c 0301 	add.w	r3, ip, r1
    3276:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    327a:	b9c3      	cbnz	r3, 32ae <adc_nrfx_read+0x8a>
				LOG_ERR("Channel %u not configured",
    327c:	486b      	ldr	r0, [pc, #428]	; (342c <adc_nrfx_read+0x208>)
    327e:	466c      	mov	r4, sp
    3280:	b088      	sub	sp, #32
    3282:	aa02      	add	r2, sp, #8
    3284:	e9c2 0105 	strd	r0, r1, [r2, #20]
    3288:	2103      	movs	r1, #3
    328a:	f842 1f10 	str.w	r1, [r2, #16]!
    328e:	4864      	ldr	r0, [pc, #400]	; (3420 <adc_nrfx_read+0x1fc>)
    3290:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3294:	f003 fb18 	bl	68c8 <z_impl_z_log_msg2_static_create>
    3298:	46a5      	mov	sp, r4
		return -EINVAL;
    329a:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    329e:	485e      	ldr	r0, [pc, #376]	; (3418 <adc_nrfx_read+0x1f4>)
    32a0:	f001 ffea 	bl	5278 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    32a4:	4620      	mov	r0, r4
    32a6:	3718      	adds	r7, #24
    32a8:	46bd      	mov	sp, r7
    32aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    32ae:	eb06 1801 	add.w	r8, r6, r1, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    32b2:	f895 e011 	ldrb.w	lr, [r5, #17]
    32b6:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
    32ba:	f1be 0e00 	subs.w	lr, lr, #0
    32be:	bf18      	it	ne
    32c0:	f04f 0e01 	movne.w	lr, #1
    32c4:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    32c8:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
    32cc:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    32d0:	f101 0051 	add.w	r0, r1, #81	; 0x51
    32d4:	0100      	lsls	r0, r0, #4
			++active_channels;
    32d6:	3201      	adds	r2, #1
    32d8:	5033      	str	r3, [r6, r0]
    32da:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
    32dc:	3101      	adds	r1, #1
    32de:	2908      	cmp	r1, #8
    32e0:	d1c2      	bne.n	3268 <adc_nrfx_read+0x44>
	error = set_resolution(sequence);
    32e2:	7c2b      	ldrb	r3, [r5, #16]
	switch (sequence->resolution) {
    32e4:	f1a3 0108 	sub.w	r1, r3, #8
    32e8:	2906      	cmp	r1, #6
    32ea:	d816      	bhi.n	331a <adc_nrfx_read+0xf6>
    32ec:	e8df f001 	tbb	[pc, r1]
    32f0:	15091520 	.word	0x15091520
    32f4:	1522      	.short	0x1522
    32f6:	13          	.byte	0x13
    32f7:	00          	.byte	0x00
    32f8:	f101 0051 	add.w	r0, r1, #81	; 0x51
    32fc:	0100      	lsls	r0, r0, #4
    32fe:	5033      	str	r3, [r6, r0]
}
    3300:	e7ec      	b.n	32dc <adc_nrfx_read+0xb8>
    3302:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
    3304:	4947      	ldr	r1, [pc, #284]	; (3424 <adc_nrfx_read+0x200>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3306:	2a01      	cmp	r2, #1
    3308:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    330c:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    330e:	d913      	bls.n	3338 <adc_nrfx_read+0x114>
    3310:	b1a3      	cbz	r3, 333c <adc_nrfx_read+0x118>
		LOG_ERR(
    3312:	4b47      	ldr	r3, [pc, #284]	; (3430 <adc_nrfx_read+0x20c>)
    3314:	e798      	b.n	3248 <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3316:	2303      	movs	r3, #3
		break;
    3318:	e7f4      	b.n	3304 <adc_nrfx_read+0xe0>
		LOG_ERR("ADC resolution value %d is not valid",
    331a:	466c      	mov	r4, sp
    331c:	4945      	ldr	r1, [pc, #276]	; (3434 <adc_nrfx_read+0x210>)
    331e:	b088      	sub	sp, #32
    3320:	aa02      	add	r2, sp, #8
	switch (sequence->resolution) {
    3322:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("ADC resolution value %d is not valid",
    3326:	2303      	movs	r3, #3
    3328:	f842 3f10 	str.w	r3, [r2, #16]!
    332c:	2300      	movs	r3, #0
    332e:	e7ae      	b.n	328e <adc_nrfx_read+0x6a>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    3330:	2300      	movs	r3, #0
    3332:	e7e7      	b.n	3304 <adc_nrfx_read+0xe0>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3334:	2302      	movs	r3, #2
    3336:	e7e5      	b.n	3304 <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
    3338:	2b08      	cmp	r3, #8
    333a:	d81b      	bhi.n	3374 <adc_nrfx_read+0x150>
    p_reg->OVERSAMPLE = oversample;
    333c:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
    3340:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    3342:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
    3344:	b9d9      	cbnz	r1, 337e <adc_nrfx_read+0x15a>
	if (sequence->buffer_size < needed_buffer_size) {
    3346:	68e9      	ldr	r1, [r5, #12]
    3348:	4299      	cmp	r1, r3
    334a:	d21c      	bcs.n	3386 <adc_nrfx_read+0x162>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    334c:	466c      	mov	r4, sp
    334e:	b088      	sub	sp, #32
    3350:	aa02      	add	r2, sp, #8
    3352:	4839      	ldr	r0, [pc, #228]	; (3438 <adc_nrfx_read+0x214>)
    3354:	61d3      	str	r3, [r2, #28]
    3356:	2304      	movs	r3, #4
    3358:	e9c2 0105 	strd	r0, r1, [r2, #20]
    335c:	f842 3f10 	str.w	r3, [r2, #16]!
    3360:	482f      	ldr	r0, [pc, #188]	; (3420 <adc_nrfx_read+0x1fc>)
    3362:	2300      	movs	r3, #0
    3364:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3368:	f003 faae 	bl	68c8 <z_impl_z_log_msg2_static_create>
    336c:	46a5      	mov	sp, r4
		return -ENOMEM;
    336e:	f06f 040b 	mvn.w	r4, #11
    3372:	e794      	b.n	329e <adc_nrfx_read+0x7a>
		LOG_ERR("Oversampling value %d is not valid",
    3374:	466c      	mov	r4, sp
    3376:	b088      	sub	sp, #32
    3378:	4930      	ldr	r1, [pc, #192]	; (343c <adc_nrfx_read+0x218>)
    337a:	aa02      	add	r2, sp, #8
    337c:	e7d1      	b.n	3322 <adc_nrfx_read+0xfe>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    337e:	8989      	ldrh	r1, [r1, #12]
    3380:	fb01 3303 	mla	r3, r1, r3, r3
    3384:	e7df      	b.n	3346 <adc_nrfx_read+0x122>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3386:	4b27      	ldr	r3, [pc, #156]	; (3424 <adc_nrfx_read+0x200>)
    3388:	68a9      	ldr	r1, [r5, #8]
    338a:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    338e:	46ac      	mov	ip, r5
    p_reg->RESULT.MAXCNT = size;
    3390:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
    3394:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3398:	4c23      	ldr	r4, [pc, #140]	; (3428 <adc_nrfx_read+0x204>)
    339a:	f104 0664 	add.w	r6, r4, #100	; 0x64
    339e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    33a0:	f8dc 3000 	ldr.w	r3, [ip]
    33a4:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    33a6:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    33a8:	2600      	movs	r6, #0
    33aa:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    33ac:	46a4      	mov	ip, r4
    33ae:	b373      	cbz	r3, 340e <adc_nrfx_read+0x1ea>
		ctx->options = *sequence->options;
    33b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    33b2:	f104 0578 	add.w	r5, r4, #120	; 0x78
    33b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    33ba:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    33bc:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    33c0:	b328      	cbz	r0, 340e <adc_nrfx_read+0x1ea>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    33c2:	f3bf 8f5b 	dmb	ish
    33c6:	e85c 3f00 	ldrex	r3, [ip]
    33ca:	e84c 6200 	strex	r2, r6, [ip]
    33ce:	2a00      	cmp	r2, #0
    33d0:	d1f9      	bne.n	33c6 <adc_nrfx_read+0x1a2>
    33d2:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    33d6:	481a      	ldr	r0, [pc, #104]	; (3440 <adc_nrfx_read+0x21c>)
    33d8:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    33da:	4a1a      	ldr	r2, [pc, #104]	; (3444 <adc_nrfx_read+0x220>)
    33dc:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    33e0:	4631      	mov	r1, r6
    33e2:	2300      	movs	r3, #0
    33e4:	fbe5 010c 	umlal	r0, r1, r5, ip
    33e8:	f7fc fe8a 	bl	100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    33ec:	2200      	movs	r2, #0
    33ee:	e9cd 0100 	strd	r0, r1, [sp]
    33f2:	2300      	movs	r3, #0
    33f4:	f104 0008 	add.w	r0, r4, #8
    33f8:	f002 fc68 	bl	5ccc <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    33fc:	4812      	ldr	r0, [pc, #72]	; (3448 <adc_nrfx_read+0x224>)
    33fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3406:	f001 ff57 	bl	52b8 <z_impl_k_sem_take>
	return ctx->status;
    340a:	6e24      	ldr	r4, [r4, #96]	; 0x60
	return error;
    340c:	e747      	b.n	329e <adc_nrfx_read+0x7a>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    340e:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    3412:	f7ff fe79 	bl	3108 <adc_context_start_sampling.isra.0>
    3416:	e7f1      	b.n	33fc <adc_nrfx_read+0x1d8>
    3418:	20000040 	.word	0x20000040
    341c:	00007d5e 	.word	0x00007d5e
    3420:	00007430 	.word	0x00007430
    3424:	40007000 	.word	0x40007000
    3428:	20000000 	.word	0x20000000
    342c:	00007d7c 	.word	0x00007d7c
    3430:	00007dbb 	.word	0x00007dbb
    3434:	00007d96 	.word	0x00007d96
    3438:	00007e10 	.word	0x00007e10
    343c:	00007ded 	.word	0x00007ded
    3440:	000f423f 	.word	0x000f423f
    3444:	000f4240 	.word	0x000f4240
    3448:	20000050 	.word	0x20000050

0000344c <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    344c:	4b0e      	ldr	r3, [pc, #56]	; (3488 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    344e:	b510      	push	{r4, lr}
    3450:	2400      	movs	r4, #0
    3452:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3456:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    345a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    345e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    3462:	2212      	movs	r2, #18
    3464:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    3468:	2007      	movs	r0, #7
    346a:	f7ff f8c7 	bl	25fc <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    346e:	4622      	mov	r2, r4
    3470:	2101      	movs	r1, #1
    3472:	2007      	movs	r0, #7
    3474:	f7ff f8e0 	bl	2638 <z_arm_irq_priority_set>
	return sem->count;
    3478:	4804      	ldr	r0, [pc, #16]	; (348c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    347a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    347c:	b913      	cbnz	r3, 3484 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
    347e:	3040      	adds	r0, #64	; 0x40
    3480:	f001 fefa 	bl	5278 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3484:	2000      	movs	r0, #0
    3486:	bd10      	pop	{r4, pc}
    3488:	40007000 	.word	0x40007000
    348c:	20000000 	.word	0x20000000

00003490 <saadc_irq_handler>:
{
    3490:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3492:	4b2e      	ldr	r3, [pc, #184]	; (354c <saadc_irq_handler+0xbc>)
    3494:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    3498:	2a00      	cmp	r2, #0
    349a:	d04a      	beq.n	3532 <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    349c:	2200      	movs	r2, #0
    349e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    34a2:	4c2b      	ldr	r4, [pc, #172]	; (3550 <saadc_irq_handler+0xc0>)
    34a4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34a8:	2101      	movs	r1, #1
    34aa:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    34ac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    34b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    34b2:	4625      	mov	r5, r4
    34b4:	b3c3      	cbz	r3, 3528 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    34b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    34b8:	b143      	cbz	r3, 34cc <saadc_irq_handler+0x3c>
			action = callback(dev,
    34ba:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    34be:	f104 0164 	add.w	r1, r4, #100	; 0x64
    34c2:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    34c4:	2801      	cmp	r0, #1
    34c6:	d014      	beq.n	34f2 <saadc_irq_handler+0x62>
    34c8:	2802      	cmp	r0, #2
    34ca:	d028      	beq.n	351e <saadc_irq_handler+0x8e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    34cc:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    34d0:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    34d4:	429a      	cmp	r2, r3
    34d6:	d922      	bls.n	351e <saadc_irq_handler+0x8e>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    34d8:	3301      	adds	r3, #1
    34da:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    34de:	4b1b      	ldr	r3, [pc, #108]	; (354c <saadc_irq_handler+0xbc>)
    34e0:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    34e4:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    34e8:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    34ea:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    34ee:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    34f2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    34f4:	b92b      	cbnz	r3, 3502 <saadc_irq_handler+0x72>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    34f6:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
}
    34fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    34fe:	f7ff be03 	b.w	3108 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3502:	f3bf 8f5b 	dmb	ish
    3506:	e855 3f00 	ldrex	r3, [r5]
    350a:	1e5a      	subs	r2, r3, #1
    350c:	e845 2100 	strex	r1, r2, [r5]
    3510:	2900      	cmp	r1, #0
    3512:	d1f8      	bne.n	3506 <saadc_irq_handler+0x76>
    3514:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3518:	2b01      	cmp	r3, #1
    351a:	dcec      	bgt.n	34f6 <saadc_irq_handler+0x66>
    351c:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    351e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    3520:	b113      	cbz	r3, 3528 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    3522:	480c      	ldr	r0, [pc, #48]	; (3554 <saadc_irq_handler+0xc4>)
    3524:	f003 fdee 	bl	7104 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3528:	480b      	ldr	r0, [pc, #44]	; (3558 <saadc_irq_handler+0xc8>)
    352a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    352e:	f001 bea3 	b.w	5278 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3532:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    3536:	2900      	cmp	r1, #0
    3538:	d0f0      	beq.n	351c <saadc_irq_handler+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    353a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    353e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3542:	2201      	movs	r2, #1
    3544:	609a      	str	r2, [r3, #8]
    3546:	601a      	str	r2, [r3, #0]
    3548:	605a      	str	r2, [r3, #4]
}
    354a:	e7e7      	b.n	351c <saadc_irq_handler+0x8c>
    354c:	40007000 	.word	0x40007000
    3550:	20000000 	.word	0x20000000
    3554:	20000008 	.word	0x20000008
    3558:	20000050 	.word	0x20000050

0000355c <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    355c:	b570      	push	{r4, r5, r6, lr}
    355e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3560:	4906      	ldr	r1, [pc, #24]	; (357c <onoff_stop+0x20>)
    3562:	1a41      	subs	r1, r0, r1
{
    3564:	4604      	mov	r4, r0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3566:	1149      	asrs	r1, r1, #5
    3568:	4805      	ldr	r0, [pc, #20]	; (3580 <onoff_stop+0x24>)
    356a:	2240      	movs	r2, #64	; 0x40
    356c:	f003 fa58 	bl	6a20 <stop>
	notify(mgr, res);
    3570:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3572:	4601      	mov	r1, r0
	notify(mgr, res);
    3574:	4620      	mov	r0, r4
}
    3576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    357a:	4718      	bx	r3
    357c:	20000e34 	.word	0x20000e34
    3580:	00007240 	.word	0x00007240

00003584 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3584:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3586:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3588:	490a      	ldr	r1, [pc, #40]	; (35b4 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    358a:	4a0b      	ldr	r2, [pc, #44]	; (35b8 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    358c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    358e:	2340      	movs	r3, #64	; 0x40
    3590:	9300      	str	r3, [sp, #0]
    3592:	1149      	asrs	r1, r1, #5
{
    3594:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3596:	4623      	mov	r3, r4
    3598:	4808      	ldr	r0, [pc, #32]	; (35bc <onoff_start+0x38>)
    359a:	f003 fa6e 	bl	6a7a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    359e:	1e01      	subs	r1, r0, #0
    35a0:	da05      	bge.n	35ae <onoff_start+0x2a>
		notify(mgr, err);
    35a2:	4628      	mov	r0, r5
    35a4:	4623      	mov	r3, r4
	}
}
    35a6:	b003      	add	sp, #12
    35a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    35ac:	4718      	bx	r3
}
    35ae:	b003      	add	sp, #12
    35b0:	bd30      	pop	{r4, r5, pc}
    35b2:	bf00      	nop
    35b4:	20000e34 	.word	0x20000e34
    35b8:	00006ae9 	.word	0x00006ae9
    35bc:	00007240 	.word	0x00007240

000035c0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    35c0:	2200      	movs	r2, #0
{
    35c2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    35c4:	2101      	movs	r1, #1
{
    35c6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    35c8:	4610      	mov	r0, r2
    35ca:	f7ff f835 	bl	2638 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    35ce:	480f      	ldr	r0, [pc, #60]	; (360c <clk_init+0x4c>)
    35d0:	f000 fe94 	bl	42fc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    35d4:	4b0e      	ldr	r3, [pc, #56]	; (3610 <clk_init+0x50>)
    35d6:	4298      	cmp	r0, r3
    35d8:	d115      	bne.n	3606 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    35da:	f003 fb01 	bl	6be0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    35de:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    35e0:	490c      	ldr	r1, [pc, #48]	; (3614 <clk_init+0x54>)
    35e2:	4630      	mov	r0, r6
    35e4:	f002 fe73 	bl	62ce <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    35e8:	2800      	cmp	r0, #0
    35ea:	db0b      	blt.n	3604 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    35ec:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    35ee:	4909      	ldr	r1, [pc, #36]	; (3614 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    35f0:	2501      	movs	r5, #1
    35f2:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    35f4:	f104 0020 	add.w	r0, r4, #32
    35f8:	f002 fe69 	bl	62ce <onoff_manager_init>
		if (err < 0) {
    35fc:	2800      	cmp	r0, #0
    35fe:	db01      	blt.n	3604 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3600:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3602:	2000      	movs	r0, #0
}
    3604:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3606:	f06f 0004 	mvn.w	r0, #4
    360a:	e7fb      	b.n	3604 <clk_init+0x44>
    360c:	0000364d 	.word	0x0000364d
    3610:	0bad0000 	.word	0x0bad0000
    3614:	000075d4 	.word	0x000075d4

00003618 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3618:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    361a:	230c      	movs	r3, #12
    361c:	4809      	ldr	r0, [pc, #36]	; (3644 <clkstarted_handle.constprop.0+0x2c>)
    361e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3620:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3622:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3624:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3628:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    362a:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    362c:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    362e:	4418      	add	r0, r3
    3630:	f003 f9e3 	bl	69fa <set_on_state>
	if (callback) {
    3634:	b12d      	cbz	r5, 3642 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3636:	4632      	mov	r2, r6
    3638:	462b      	mov	r3, r5
    363a:	4803      	ldr	r0, [pc, #12]	; (3648 <clkstarted_handle.constprop.0+0x30>)
}
    363c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3640:	4718      	bx	r3
}
    3642:	bd70      	pop	{r4, r5, r6, pc}
    3644:	20000e34 	.word	0x20000e34
    3648:	00007240 	.word	0x00007240

0000364c <clock_event_handler>:
	switch (event) {
    364c:	b110      	cbz	r0, 3654 <clock_event_handler+0x8>
    364e:	2801      	cmp	r0, #1
    3650:	d004      	beq.n	365c <clock_event_handler+0x10>
    3652:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3654:	4b03      	ldr	r3, [pc, #12]	; (3664 <clock_event_handler+0x18>)
    3656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3658:	075b      	lsls	r3, r3, #29
    365a:	d101      	bne.n	3660 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    365c:	f7ff bfdc 	b.w	3618 <clkstarted_handle.constprop.0>
}
    3660:	4770      	bx	lr
    3662:	bf00      	nop
    3664:	20000e34 	.word	0x20000e34

00003668 <generic_hfclk_start>:
{
    3668:	b508      	push	{r3, lr}
	__asm__ volatile(
    366a:	f04f 0320 	mov.w	r3, #32
    366e:	f3ef 8111 	mrs	r1, BASEPRI
    3672:	f383 8812 	msr	BASEPRI_MAX, r3
    3676:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    367a:	4a12      	ldr	r2, [pc, #72]	; (36c4 <generic_hfclk_start+0x5c>)
    367c:	6813      	ldr	r3, [r2, #0]
    367e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3682:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3686:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3688:	d00c      	beq.n	36a4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    368a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    368e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3692:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3696:	f013 0301 	ands.w	r3, r3, #1
    369a:	d003      	beq.n	36a4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    369c:	480a      	ldr	r0, [pc, #40]	; (36c8 <generic_hfclk_start+0x60>)
    369e:	f003 f9ac 	bl	69fa <set_on_state>
			already_started = true;
    36a2:	2301      	movs	r3, #1
	__asm__ volatile(
    36a4:	f381 8811 	msr	BASEPRI, r1
    36a8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    36ac:	b123      	cbz	r3, 36b8 <generic_hfclk_start+0x50>
}
    36ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    36b2:	2000      	movs	r0, #0
    36b4:	f7ff bfb0 	b.w	3618 <clkstarted_handle.constprop.0>
}
    36b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    36bc:	2001      	movs	r0, #1
    36be:	f003 ba9c 	b.w	6bfa <nrfx_clock_start>
    36c2:	bf00      	nop
    36c4:	20000e8c 	.word	0x20000e8c
    36c8:	20000e7c 	.word	0x20000e7c

000036cc <api_blocking_start>:
{
    36cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    36ce:	2200      	movs	r2, #0
    36d0:	2301      	movs	r3, #1
    36d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    36d6:	4a09      	ldr	r2, [pc, #36]	; (36fc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    36d8:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    36dc:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    36de:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    36e2:	f003 f9fa 	bl	6ada <api_start>
	if (err < 0) {
    36e6:	2800      	cmp	r0, #0
    36e8:	db05      	blt.n	36f6 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    36ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    36ee:	2300      	movs	r3, #0
    36f0:	4668      	mov	r0, sp
    36f2:	f001 fde1 	bl	52b8 <z_impl_k_sem_take>
}
    36f6:	b005      	add	sp, #20
    36f8:	f85d fb04 	ldr.w	pc, [sp], #4
    36fc:	00006b01 	.word	0x00006b01

00003700 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3700:	4b09      	ldr	r3, [pc, #36]	; (3728 <generic_hfclk_stop+0x28>)
    3702:	f3bf 8f5b 	dmb	ish
    3706:	e853 2f00 	ldrex	r2, [r3]
    370a:	f022 0102 	bic.w	r1, r2, #2
    370e:	e843 1000 	strex	r0, r1, [r3]
    3712:	2800      	cmp	r0, #0
    3714:	d1f7      	bne.n	3706 <generic_hfclk_stop+0x6>
    3716:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    371a:	07d3      	lsls	r3, r2, #31
    371c:	d402      	bmi.n	3724 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    371e:	2001      	movs	r0, #1
    3720:	f003 baa6 	b.w	6c70 <nrfx_clock_stop>
}
    3724:	4770      	bx	lr
    3726:	bf00      	nop
    3728:	20000e8c 	.word	0x20000e8c

0000372c <z_nrf_clock_control_lf_on>:
{
    372c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    372e:	4924      	ldr	r1, [pc, #144]	; (37c0 <z_nrf_clock_control_lf_on+0x94>)
    3730:	f3bf 8f5b 	dmb	ish
    3734:	4604      	mov	r4, r0
    3736:	2201      	movs	r2, #1
    3738:	e851 3f00 	ldrex	r3, [r1]
    373c:	e841 2000 	strex	r0, r2, [r1]
    3740:	2800      	cmp	r0, #0
    3742:	d1f9      	bne.n	3738 <z_nrf_clock_control_lf_on+0xc>
    3744:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3748:	b933      	cbnz	r3, 3758 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    374a:	491e      	ldr	r1, [pc, #120]	; (37c4 <z_nrf_clock_control_lf_on+0x98>)
		err = onoff_request(mgr, &cli);
    374c:	481e      	ldr	r0, [pc, #120]	; (37c8 <z_nrf_clock_control_lf_on+0x9c>)
    374e:	604b      	str	r3, [r1, #4]
    3750:	60cb      	str	r3, [r1, #12]
    3752:	608a      	str	r2, [r1, #8]
    3754:	f002 fdce 	bl	62f4 <onoff_request>
	switch (start_mode) {
    3758:	1e63      	subs	r3, r4, #1
    375a:	2b01      	cmp	r3, #1
    375c:	d822      	bhi.n	37a4 <z_nrf_clock_control_lf_on+0x78>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    375e:	f003 fb89 	bl	6e74 <k_is_in_isr>
    3762:	4603      	mov	r3, r0
    3764:	b910      	cbnz	r0, 376c <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
    3766:	4a19      	ldr	r2, [pc, #100]	; (37cc <z_nrf_clock_control_lf_on+0xa0>)
	int key = isr_mode ? irq_lock() : 0;
    3768:	7812      	ldrb	r2, [r2, #0]
    376a:	bb12      	cbnz	r2, 37b2 <z_nrf_clock_control_lf_on+0x86>
	__asm__ volatile(
    376c:	f04f 0320 	mov.w	r3, #32
    3770:	f3ef 8211 	mrs	r2, BASEPRI
    3774:	f383 8812 	msr	BASEPRI_MAX, r3
    3778:	f3bf 8f6f 	isb	sy
    377c:	2301      	movs	r3, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    377e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3782:	f8d0 1418 	ldr.w	r1, [r0, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3786:	f8d0 5418 	ldr.w	r5, [r0, #1048]	; 0x418
    378a:	03ed      	lsls	r5, r5, #15
    378c:	d5f9      	bpl.n	3782 <z_nrf_clock_control_lf_on+0x56>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    378e:	f001 0103 	and.w	r1, r1, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3792:	2902      	cmp	r1, #2
    3794:	d001      	beq.n	379a <z_nrf_clock_control_lf_on+0x6e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3796:	2c01      	cmp	r4, #1
    3798:	d1f3      	bne.n	3782 <z_nrf_clock_control_lf_on+0x56>
	if (isr_mode) {
    379a:	b123      	cbz	r3, 37a6 <z_nrf_clock_control_lf_on+0x7a>
	__asm__ volatile(
    379c:	f382 8811 	msr	BASEPRI, r2
    37a0:	f3bf 8f6f 	isb	sy
}
    37a4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENSET = mask;
    37a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37aa:	2202      	movs	r2, #2
    37ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    37b0:	e7f8      	b.n	37a4 <z_nrf_clock_control_lf_on+0x78>
    p_reg->INTENCLR = mask;
    37b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    37b6:	2102      	movs	r1, #2
    37b8:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    37bc:	4602      	mov	r2, r0
}
    37be:	e7de      	b.n	377e <z_nrf_clock_control_lf_on+0x52>
    37c0:	20000e90 	.word	0x20000e90
    37c4:	20000e24 	.word	0x20000e24
    37c8:	20000e54 	.word	0x20000e54
    37cc:	2000159f 	.word	0x2000159f

000037d0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    37d0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    37d2:	4c04      	ldr	r4, [pc, #16]	; (37e4 <rtt_console_init+0x14>)
    37d4:	4620      	mov	r0, r4
    37d6:	f7fd fa79 	bl	ccc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    37da:	4620      	mov	r0, r4
    37dc:	f7ff fc30 	bl	3040 <__stdout_hook_install>

	return 0;
}
    37e0:	2000      	movs	r0, #0
    37e2:	bd10      	pop	{r4, pc}
    37e4:	000037e9 	.word	0x000037e9

000037e8 <rtt_console_out>:
{
    37e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    37ec:	f8df 805c 	ldr.w	r8, [pc, #92]	; 384c <rtt_console_out+0x64>
    37f0:	4e17      	ldr	r6, [pc, #92]	; (3850 <rtt_console_out+0x68>)
	char c = (char)character;
    37f2:	f88d 0007 	strb.w	r0, [sp, #7]
{
    37f6:	4604      	mov	r4, r0
	char c = (char)character;
    37f8:	2503      	movs	r5, #3
    37fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    37fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3802:	4640      	mov	r0, r8
    3804:	f001 fc7e 	bl	5104 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    3808:	2201      	movs	r2, #1
    380a:	f10d 0107 	add.w	r1, sp, #7
    380e:	2000      	movs	r0, #0
    3810:	f001 f98a 	bl	4b28 <SEGGER_RTT_WriteNoLock>
    3814:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    3816:	4640      	mov	r0, r8
    3818:	f001 fcec 	bl	51f4 <z_impl_k_mutex_unlock>
		if (cnt) {
    381c:	b12f      	cbz	r7, 382a <rtt_console_out+0x42>
			host_present = true;
    381e:	2301      	movs	r3, #1
    3820:	7033      	strb	r3, [r6, #0]
}
    3822:	4620      	mov	r0, r4
    3824:	b002      	add	sp, #8
    3826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    382a:	7833      	ldrb	r3, [r6, #0]
    382c:	2b00      	cmp	r3, #0
    382e:	d0f8      	beq.n	3822 <rtt_console_out+0x3a>
			if (max_cnt) {
    3830:	3d01      	subs	r5, #1
    3832:	d008      	beq.n	3846 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    3834:	f003 fb1e 	bl	6e74 <k_is_in_isr>
    3838:	2800      	cmp	r0, #0
    383a:	d1de      	bne.n	37fa <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    383c:	2100      	movs	r1, #0
    383e:	2042      	movs	r0, #66	; 0x42
    3840:	f002 f83a 	bl	58b8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3844:	e7d9      	b.n	37fa <rtt_console_out+0x12>
				host_present = false;
    3846:	7035      	strb	r5, [r6, #0]
    3848:	e7eb      	b.n	3822 <rtt_console_out+0x3a>
    384a:	bf00      	nop
    384c:	20000224 	.word	0x20000224
    3850:	2000118e 	.word	0x2000118e

00003854 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3854:	b530      	push	{r4, r5, lr}
	return port->config;
    3856:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3858:	7b04      	ldrb	r4, [r0, #12]
    385a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    385e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3862:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    3866:	b085      	sub	sp, #20
    3868:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    386c:	d104      	bne.n	3878 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    386e:	4628      	mov	r0, r5
    3870:	f000 ffbc 	bl	47ec <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    3874:	2000      	movs	r0, #0
    3876:	e032      	b.n	38de <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3878:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    387c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3880:	d12f      	bne.n	38e2 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3882:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3886:	bf0c      	ite	eq
    3888:	2304      	moveq	r3, #4
    388a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    388c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3890:	6883      	ldr	r3, [r0, #8]
    3892:	fa23 f101 	lsr.w	r1, r3, r1
    3896:	07c9      	lsls	r1, r1, #31
    3898:	d42f      	bmi.n	38fa <gpio_nrfx_pin_interrupt_configure+0xa6>
    389a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    389e:	d12c      	bne.n	38fa <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    38a0:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    38a2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    38a4:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    38a8:	4a1c      	ldr	r2, [pc, #112]	; (391c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    38aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    38ae:	bf18      	it	ne
    38b0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    38b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    38b8:	07db      	lsls	r3, r3, #31
    38ba:	d41e      	bmi.n	38fa <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    38bc:	f10d 0407 	add.w	r4, sp, #7
    38c0:	4621      	mov	r1, r4
    38c2:	4628      	mov	r0, r5
    38c4:	f000 fef6 	bl	46b4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    38c8:	4b15      	ldr	r3, [pc, #84]	; (3920 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    38ca:	4298      	cmp	r0, r3
    38cc:	d114      	bne.n	38f8 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    38ce:	4620      	mov	r0, r4
    38d0:	f000 ff3e 	bl	4750 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    38d4:	4b13      	ldr	r3, [pc, #76]	; (3924 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    38d6:	4298      	cmp	r0, r3
    38d8:	d00e      	beq.n	38f8 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    38da:	f06f 000b 	mvn.w	r0, #11
}
    38de:	b005      	add	sp, #20
    38e0:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    38e2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    38e6:	d005      	beq.n	38f4 <gpio_nrfx_pin_interrupt_configure+0xa0>
    38e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    38ec:	bf0c      	ite	eq
    38ee:	2302      	moveq	r3, #2
    38f0:	2301      	movne	r3, #1
    38f2:	e7cb      	b.n	388c <gpio_nrfx_pin_interrupt_configure+0x38>
    38f4:	2303      	movs	r3, #3
    38f6:	e7c9      	b.n	388c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    38f8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    38fa:	2300      	movs	r3, #0
    38fc:	4619      	mov	r1, r3
    38fe:	aa02      	add	r2, sp, #8
    3900:	4628      	mov	r0, r5
    3902:	f000 fdb1 	bl	4468 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3906:	4b07      	ldr	r3, [pc, #28]	; (3924 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3908:	4298      	cmp	r0, r3
    390a:	d104      	bne.n	3916 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    390c:	2101      	movs	r1, #1
    390e:	4628      	mov	r0, r5
    3910:	f000 ff24 	bl	475c <nrfx_gpiote_trigger_enable>
    3914:	e7ae      	b.n	3874 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    3916:	f06f 0004 	mvn.w	r0, #4
    391a:	e7e0      	b.n	38de <gpio_nrfx_pin_interrupt_configure+0x8a>
    391c:	50000300 	.word	0x50000300
    3920:	0bad0004 	.word	0x0bad0004
    3924:	0bad0000 	.word	0x0bad0000

00003928 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3928:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    392a:	f000 ff01 	bl	4730 <nrfx_gpiote_is_init>
    392e:	4604      	mov	r4, r0
    3930:	b968      	cbnz	r0, 394e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3932:	f000 fed5 	bl	46e0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3936:	4b08      	ldr	r3, [pc, #32]	; (3958 <gpio_nrfx_init+0x30>)
    3938:	4298      	cmp	r0, r3
    393a:	d10a      	bne.n	3952 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    393c:	4807      	ldr	r0, [pc, #28]	; (395c <gpio_nrfx_init+0x34>)
    393e:	4621      	mov	r1, r4
    3940:	f000 feb2 	bl	46a8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3944:	4622      	mov	r2, r4
    3946:	2105      	movs	r1, #5
    3948:	2006      	movs	r0, #6
    394a:	f7fe fe75 	bl	2638 <z_arm_irq_priority_set>
		return 0;
    394e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3950:	bd10      	pop	{r4, pc}
		return -EIO;
    3952:	f06f 0004 	mvn.w	r0, #4
    3956:	e7fb      	b.n	3950 <gpio_nrfx_init+0x28>
    3958:	0bad0000 	.word	0x0bad0000
    395c:	00003961 	.word	0x00003961

00003960 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3960:	0942      	lsrs	r2, r0, #5
{
    3962:	b570      	push	{r4, r5, r6, lr}
    3964:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3966:	d002      	beq.n	396e <nrfx_gpio_handler+0xe>
    3968:	2a01      	cmp	r2, #1
    396a:	d015      	beq.n	3998 <nrfx_gpio_handler+0x38>
}
    396c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    396e:	4e0b      	ldr	r6, [pc, #44]	; (399c <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    3970:	6932      	ldr	r2, [r6, #16]
    3972:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3974:	2900      	cmp	r1, #0
    3976:	d0f9      	beq.n	396c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    3978:	f003 031f 	and.w	r3, r3, #31
    397c:	2501      	movs	r5, #1
    397e:	680c      	ldr	r4, [r1, #0]
    3980:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    3982:	688a      	ldr	r2, [r1, #8]
    3984:	402a      	ands	r2, r5
    3986:	d002      	beq.n	398e <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3988:	684b      	ldr	r3, [r1, #4]
    398a:	4630      	mov	r0, r6
    398c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    398e:	2c00      	cmp	r4, #0
    3990:	d0ec      	beq.n	396c <nrfx_gpio_handler+0xc>
    3992:	4621      	mov	r1, r4
    3994:	6824      	ldr	r4, [r4, #0]
    3996:	e7f4      	b.n	3982 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3998:	4e01      	ldr	r6, [pc, #4]	; (39a0 <nrfx_gpio_handler+0x40>)
    399a:	e7e9      	b.n	3970 <nrfx_gpio_handler+0x10>
    399c:	00007258 	.word	0x00007258
    39a0:	00007270 	.word	0x00007270

000039a4 <gpio_nrfx_pin_configure>:
{
    39a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    39a8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    39aa:	7b3b      	ldrb	r3, [r7, #12]
    39ac:	f001 051f 	and.w	r5, r1, #31
{
    39b0:	b085      	sub	sp, #20
    39b2:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    39b4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    39b8:	4614      	mov	r4, r2
    39ba:	b9ca      	cbnz	r2, 39f0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    39bc:	a902      	add	r1, sp, #8
    39be:	4628      	mov	r0, r5
    39c0:	f000 fe78 	bl	46b4 <nrfx_gpiote_channel_get>
    39c4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    39c6:	4628      	mov	r0, r5
    39c8:	f000 ff38 	bl	483c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    39cc:	4b4a      	ldr	r3, [pc, #296]	; (3af8 <gpio_nrfx_pin_configure+0x154>)
    39ce:	4298      	cmp	r0, r3
    39d0:	d004      	beq.n	39dc <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    39d2:	f06f 0004 	mvn.w	r0, #4
}
    39d6:	b005      	add	sp, #20
    39d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    39dc:	4284      	cmp	r4, r0
    39de:	d105      	bne.n	39ec <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    39e0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    39e4:	f000 feae 	bl	4744 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    39e8:	42a0      	cmp	r0, r4
    39ea:	d1f2      	bne.n	39d2 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    39ec:	2000      	movs	r0, #0
    39ee:	e7f2      	b.n	39d6 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    39f0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    39f4:	f10d 0103 	add.w	r1, sp, #3
    39f8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    39fa:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    39fe:	f000 fe59 	bl	46b4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3a02:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3a04:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3a06:	aa02      	add	r2, sp, #8
    3a08:	4649      	mov	r1, r9
    3a0a:	4628      	mov	r0, r5
    3a0c:	f000 fd2c 	bl	4468 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3a10:	4b39      	ldr	r3, [pc, #228]	; (3af8 <gpio_nrfx_pin_configure+0x154>)
    3a12:	4298      	cmp	r0, r3
    3a14:	d002      	beq.n	3a1c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3a16:	f06f 0015 	mvn.w	r0, #21
    3a1a:	e7dc      	b.n	39d6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3a1c:	4580      	cmp	r8, r0
    3a1e:	d103      	bne.n	3a28 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3a20:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3a24:	f000 fe8e 	bl	4744 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3a28:	03a3      	lsls	r3, r4, #14
    3a2a:	d551      	bpl.n	3ad0 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3a2c:	f240 6306 	movw	r3, #1542	; 0x606
    3a30:	4023      	ands	r3, r4
    3a32:	f240 2206 	movw	r2, #518	; 0x206
    3a36:	4293      	cmp	r3, r2
    3a38:	d03b      	beq.n	3ab2 <gpio_nrfx_pin_configure+0x10e>
    3a3a:	d80c      	bhi.n	3a56 <gpio_nrfx_pin_configure+0xb2>
    3a3c:	2b06      	cmp	r3, #6
    3a3e:	d015      	beq.n	3a6c <gpio_nrfx_pin_configure+0xc8>
    3a40:	d804      	bhi.n	3a4c <gpio_nrfx_pin_configure+0xa8>
    3a42:	b19b      	cbz	r3, 3a6c <gpio_nrfx_pin_configure+0xc8>
    3a44:	2b02      	cmp	r3, #2
    3a46:	d1e6      	bne.n	3a16 <gpio_nrfx_pin_configure+0x72>
    3a48:	2304      	movs	r3, #4
    3a4a:	e00f      	b.n	3a6c <gpio_nrfx_pin_configure+0xc8>
    3a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3a50:	d1e1      	bne.n	3a16 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3a52:	2301      	movs	r3, #1
    3a54:	e00a      	b.n	3a6c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3a56:	f240 4202 	movw	r2, #1026	; 0x402
    3a5a:	4293      	cmp	r3, r2
    3a5c:	d02b      	beq.n	3ab6 <gpio_nrfx_pin_configure+0x112>
    3a5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    3a62:	d02a      	beq.n	3aba <gpio_nrfx_pin_configure+0x116>
    3a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3a68:	d1d5      	bne.n	3a16 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3a6a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3a6c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3a70:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3a74:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3a78:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3a7a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3a7e:	bf54      	ite	pl
    3a80:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3a84:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3a86:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3a88:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3a8c:	d517      	bpl.n	3abe <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	2101      	movs	r1, #1
    3a92:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3a96:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3a9a:	2200      	movs	r2, #0
    3a9c:	a901      	add	r1, sp, #4
    3a9e:	4628      	mov	r0, r5
    3aa0:	f000 fd90 	bl	45c4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3aa4:	4b14      	ldr	r3, [pc, #80]	; (3af8 <gpio_nrfx_pin_configure+0x154>)
    3aa6:	4298      	cmp	r0, r3
    3aa8:	bf14      	ite	ne
    3aaa:	f06f 0015 	mvnne.w	r0, #21
    3aae:	2000      	moveq	r0, #0
    3ab0:	e791      	b.n	39d6 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3ab2:	2307      	movs	r3, #7
    3ab4:	e7da      	b.n	3a6c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    3ab6:	2305      	movs	r3, #5
    3ab8:	e7d8      	b.n	3a6c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    3aba:	2303      	movs	r3, #3
    3abc:	e7d6      	b.n	3a6c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3abe:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3ac0:	bf41      	itttt	mi
    3ac2:	687b      	ldrmi	r3, [r7, #4]
    3ac4:	2101      	movmi	r1, #1
    3ac6:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3aca:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3ace:	e7e4      	b.n	3a9a <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    3ad0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3ad2:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3ad6:	bf54      	ite	pl
    3ad8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3adc:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3ade:	461a      	mov	r2, r3
    3ae0:	a901      	add	r1, sp, #4
    3ae2:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3ae4:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3ae8:	f000 fcbe 	bl	4468 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3aec:	4b02      	ldr	r3, [pc, #8]	; (3af8 <gpio_nrfx_pin_configure+0x154>)
    3aee:	4298      	cmp	r0, r3
    3af0:	f43f af7c 	beq.w	39ec <gpio_nrfx_pin_configure+0x48>
    3af4:	e78f      	b.n	3a16 <gpio_nrfx_pin_configure+0x72>
    3af6:	bf00      	nop
    3af8:	0bad0000 	.word	0x0bad0000

00003afc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3afc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3afe:	2301      	movs	r3, #1
    3b00:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b02:	4a11      	ldr	r2, [pc, #68]	; (3b48 <compare_int_lock+0x4c>)
    3b04:	f3bf 8f5b 	dmb	ish
    3b08:	43dc      	mvns	r4, r3
    3b0a:	e852 1f00 	ldrex	r1, [r2]
    3b0e:	ea01 0c04 	and.w	ip, r1, r4
    3b12:	e842 ce00 	strex	lr, ip, [r2]
    3b16:	f1be 0f00 	cmp.w	lr, #0
    3b1a:	d1f6      	bne.n	3b0a <compare_int_lock+0xe>
    3b1c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b24:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3b28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3b30:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3b34:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b38:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3b3c:	420b      	tst	r3, r1
}
    3b3e:	bf14      	ite	ne
    3b40:	2001      	movne	r0, #1
    3b42:	2000      	moveq	r0, #0
    3b44:	bd10      	pop	{r4, pc}
    3b46:	bf00      	nop
    3b48:	20000eb0 	.word	0x20000eb0

00003b4c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b4c:	4919      	ldr	r1, [pc, #100]	; (3bb4 <sys_clock_timeout_handler+0x68>)
{
    3b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b50:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3b52:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b56:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3b58:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3b5c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b60:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3b62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3b66:	d222      	bcs.n	3bae <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3b68:	4b13      	ldr	r3, [pc, #76]	; (3bb8 <sys_clock_timeout_handler+0x6c>)
    3b6a:	681b      	ldr	r3, [r3, #0]
    3b6c:	0a1a      	lsrs	r2, r3, #8
    3b6e:	061b      	lsls	r3, r3, #24
    3b70:	195e      	adds	r6, r3, r5
    3b72:	4b12      	ldr	r3, [pc, #72]	; (3bbc <sys_clock_timeout_handler+0x70>)
    3b74:	f142 0700 	adc.w	r7, r2, #0
    3b78:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3b7c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3b7e:	f001 ffeb 	bl	5b58 <sys_clock_announce>
    return p_reg->CC[ch];
    3b82:	00a3      	lsls	r3, r4, #2
    3b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3b88:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3b8c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3b90:	42aa      	cmp	r2, r5
    3b92:	d10b      	bne.n	3bac <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3b94:	b91e      	cbnz	r6, 3b9e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3b96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3b9a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3b9e:	4b08      	ldr	r3, [pc, #32]	; (3bc0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3ba0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3ba4:	fa00 f404 	lsl.w	r4, r0, r4
    3ba8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3bae:	2600      	movs	r6, #0
    3bb0:	e7e5      	b.n	3b7e <sys_clock_timeout_handler+0x32>
    3bb2:	bf00      	nop
    3bb4:	20000730 	.word	0x20000730
    3bb8:	20000eb4 	.word	0x20000eb4
    3bbc:	20000718 	.word	0x20000718
    3bc0:	40011000 	.word	0x40011000

00003bc4 <compare_int_unlock>:
	if (key) {
    3bc4:	b319      	cbz	r1, 3c0e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3bc6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3bca:	2301      	movs	r3, #1
    3bcc:	4a10      	ldr	r2, [pc, #64]	; (3c10 <compare_int_unlock+0x4c>)
    3bce:	4083      	lsls	r3, r0
    3bd0:	e852 1f00 	ldrex	r1, [r2]
    3bd4:	4319      	orrs	r1, r3
    3bd6:	e842 1c00 	strex	ip, r1, [r2]
    3bda:	f1bc 0f00 	cmp.w	ip, #0
    3bde:	d1f7      	bne.n	3bd0 <compare_int_unlock+0xc>
    3be0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3be4:	4a0b      	ldr	r2, [pc, #44]	; (3c14 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3bea:	4083      	lsls	r3, r0
    3bec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3bf0:	4b09      	ldr	r3, [pc, #36]	; (3c18 <compare_int_unlock+0x54>)
    3bf2:	f3bf 8f5b 	dmb	ish
    3bf6:	681b      	ldr	r3, [r3, #0]
    3bf8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3bfc:	fa23 f000 	lsr.w	r0, r3, r0
    3c00:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c02:	bf42      	ittt	mi
    3c04:	4b05      	ldrmi	r3, [pc, #20]	; (3c1c <compare_int_unlock+0x58>)
    3c06:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3c0a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3c0e:	4770      	bx	lr
    3c10:	20000eb0 	.word	0x20000eb0
    3c14:	40011000 	.word	0x40011000
    3c18:	20000eac 	.word	0x20000eac
    3c1c:	e000e100 	.word	0xe000e100

00003c20 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3c20:	4b0d      	ldr	r3, [pc, #52]	; (3c58 <z_nrf_rtc_timer_read+0x38>)
    3c22:	6818      	ldr	r0, [r3, #0]
    3c24:	0a01      	lsrs	r1, r0, #8
    3c26:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3c28:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3c2c:	4b0b      	ldr	r3, [pc, #44]	; (3c5c <z_nrf_rtc_timer_read+0x3c>)
    3c2e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3c32:	1818      	adds	r0, r3, r0
    3c34:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3c3c:	d20a      	bcs.n	3c54 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3c3e:	4b08      	ldr	r3, [pc, #32]	; (3c60 <z_nrf_rtc_timer_read+0x40>)
    3c40:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c44:	4290      	cmp	r0, r2
    3c46:	eb71 0303 	sbcs.w	r3, r1, r3
    3c4a:	d203      	bcs.n	3c54 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3c4c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3c50:	f141 0100 	adc.w	r1, r1, #0
}
    3c54:	4770      	bx	lr
    3c56:	bf00      	nop
    3c58:	20000eb4 	.word	0x20000eb4
    3c5c:	40011000 	.word	0x40011000
    3c60:	20000718 	.word	0x20000718

00003c64 <compare_set>:
{
    3c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c68:	b085      	sub	sp, #20
    3c6a:	4616      	mov	r6, r2
    3c6c:	4698      	mov	r8, r3
    3c6e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3c70:	f7ff ff44 	bl	3afc <compare_int_lock>
    3c74:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3c76:	f7ff ffd3 	bl	3c20 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3c7a:	42b0      	cmp	r0, r6
    3c7c:	eb71 0308 	sbcs.w	r3, r1, r8
    3c80:	d278      	bcs.n	3d74 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    3c82:	4b46      	ldr	r3, [pc, #280]	; (3d9c <compare_set+0x138>)
    3c84:	1a30      	subs	r0, r6, r0
    3c86:	eb68 0101 	sbc.w	r1, r8, r1
    3c8a:	4298      	cmp	r0, r3
    3c8c:	f171 0300 	sbcs.w	r3, r1, #0
    3c90:	f080 8081 	bcs.w	3d96 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3c94:	4b42      	ldr	r3, [pc, #264]	; (3da0 <compare_set+0x13c>)
    3c96:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3c9a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    3c9e:	45d8      	cmp	r8, fp
    3ca0:	bf08      	it	eq
    3ca2:	4556      	cmpeq	r6, sl
    3ca4:	d051      	beq.n	3d4a <compare_set+0xe6>
    3ca6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    3caa:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3cae:	f105 0750 	add.w	r7, r5, #80	; 0x50
    3cb2:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    3cb6:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3cb8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3cbc:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3cc0:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3cc2:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3cc6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3cca:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3ccc:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3cd0:	4b34      	ldr	r3, [pc, #208]	; (3da4 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3cd2:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3cd6:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3cd8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3cdc:	1a40      	subs	r0, r0, r1
    3cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3ce2:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3ce6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3ce8:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    3cec:	d107      	bne.n	3cfe <compare_set+0x9a>
    3cee:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3cf2:	2013      	movs	r0, #19
    3cf4:	f003 f9f6 	bl	70e4 <z_impl_k_busy_wait>
    3cf8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3cfc:	4b29      	ldr	r3, [pc, #164]	; (3da4 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3cfe:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3d02:	eba4 000c 	sub.w	r0, r4, ip
    3d06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3d0a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d0e:	bf88      	it	hi
    3d10:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d12:	2000      	movs	r0, #0
    3d14:	6038      	str	r0, [r7, #0]
    3d16:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3d18:	9801      	ldr	r0, [sp, #4]
    3d1a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3d1e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3d22:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3d26:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3d2a:	4281      	cmp	r1, r0
    3d2c:	d006      	beq.n	3d3c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    3d2e:	1a20      	subs	r0, r4, r0
    3d30:	3802      	subs	r0, #2
    3d32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3d36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d3a:	d819      	bhi.n	3d70 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    3d3c:	1aa4      	subs	r4, r4, r2
    3d3e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3d42:	eb14 0a06 	adds.w	sl, r4, r6
    3d46:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    3d4a:	4915      	ldr	r1, [pc, #84]	; (3da0 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3d4c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    3d4e:	012b      	lsls	r3, r5, #4
    3d50:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3d54:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    3d58:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3d5c:	6053      	str	r3, [r2, #4]
	return ret;
    3d5e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    3d60:	4628      	mov	r0, r5
    3d62:	9900      	ldr	r1, [sp, #0]
    3d64:	f7ff ff2e 	bl	3bc4 <compare_int_unlock>
}
    3d68:	4620      	mov	r0, r4
    3d6a:	b005      	add	sp, #20
    3d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d70:	4620      	mov	r0, r4
    3d72:	e7b1      	b.n	3cd8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3d74:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3d76:	4a0c      	ldr	r2, [pc, #48]	; (3da8 <compare_set+0x144>)
    3d78:	f3bf 8f5b 	dmb	ish
    3d7c:	40ab      	lsls	r3, r5
    3d7e:	e852 1f00 	ldrex	r1, [r2]
    3d82:	4319      	orrs	r1, r3
    3d84:	e842 1000 	strex	r0, r1, [r2]
    3d88:	2800      	cmp	r0, #0
    3d8a:	d1f8      	bne.n	3d7e <compare_set+0x11a>
    3d8c:	f3bf 8f5b 	dmb	ish
    3d90:	46b2      	mov	sl, r6
    3d92:	46c3      	mov	fp, r8
    3d94:	e7d9      	b.n	3d4a <compare_set+0xe6>
			return -EINVAL;
    3d96:	f06f 0415 	mvn.w	r4, #21
    3d9a:	e7e1      	b.n	3d60 <compare_set+0xfc>
    3d9c:	01000001 	.word	0x01000001
    3da0:	20000720 	.word	0x20000720
    3da4:	40011000 	.word	0x40011000
    3da8:	20000eac 	.word	0x20000eac

00003dac <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3dae:	4b19      	ldr	r3, [pc, #100]	; (3e14 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3db0:	4d19      	ldr	r5, [pc, #100]	; (3e18 <sys_clock_driver_init+0x6c>)
    3db2:	2400      	movs	r4, #0
    3db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3dbc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3dc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3dc8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3dcc:	4b13      	ldr	r3, [pc, #76]	; (3e1c <sys_clock_driver_init+0x70>)
    3dce:	2602      	movs	r6, #2
    3dd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3dd4:	2101      	movs	r1, #1
    3dd6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3dda:	2011      	movs	r0, #17
    3ddc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3de0:	4622      	mov	r2, r4
    3de2:	f7fe fc29 	bl	2638 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3de6:	2011      	movs	r0, #17
    3de8:	f7fe fc08 	bl	25fc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3dec:	4a0c      	ldr	r2, [pc, #48]	; (3e20 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3dee:	2301      	movs	r3, #1
    3df0:	60ab      	str	r3, [r5, #8]
    3df2:	602b      	str	r3, [r5, #0]
    3df4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3df6:	4b0b      	ldr	r3, [pc, #44]	; (3e24 <sys_clock_driver_init+0x78>)
    3df8:	4a0b      	ldr	r2, [pc, #44]	; (3e28 <sys_clock_driver_init+0x7c>)
    3dfa:	9300      	str	r3, [sp, #0]
    3dfc:	9401      	str	r4, [sp, #4]
    3dfe:	2300      	movs	r3, #0
    3e00:	4620      	mov	r0, r4
    3e02:	f7ff ff2f 	bl	3c64 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3e06:	4630      	mov	r0, r6
    3e08:	f7ff fc90 	bl	372c <z_nrf_clock_control_lf_on>

	return 0;
}
    3e0c:	4620      	mov	r0, r4
    3e0e:	b002      	add	sp, #8
    3e10:	bd70      	pop	{r4, r5, r6, pc}
    3e12:	bf00      	nop
    3e14:	20000720 	.word	0x20000720
    3e18:	40011000 	.word	0x40011000
    3e1c:	e000e100 	.word	0xe000e100
    3e20:	20000eb0 	.word	0x20000eb0
    3e24:	00003b4d 	.word	0x00003b4d
    3e28:	007fffff 	.word	0x007fffff

00003e2c <rtc_nrf_isr>:
{
    3e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3e30:	4c35      	ldr	r4, [pc, #212]	; (3f08 <rtc_nrf_isr+0xdc>)
    3e32:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3e36:	079a      	lsls	r2, r3, #30
    3e38:	d50b      	bpl.n	3e52 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e3a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3e3e:	b143      	cbz	r3, 3e52 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3e40:	4a32      	ldr	r2, [pc, #200]	; (3f0c <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e42:	2300      	movs	r3, #0
    3e44:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3e48:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3e4c:	6813      	ldr	r3, [r2, #0]
    3e4e:	3301      	adds	r3, #1
    3e50:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3e52:	f04f 0320 	mov.w	r3, #32
    3e56:	f3ef 8211 	mrs	r2, BASEPRI
    3e5a:	f383 8812 	msr	BASEPRI_MAX, r3
    3e5e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3e62:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3e66:	03db      	lsls	r3, r3, #15
    3e68:	d512      	bpl.n	3e90 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e6a:	f3bf 8f5b 	dmb	ish
    3e6e:	4b28      	ldr	r3, [pc, #160]	; (3f10 <rtc_nrf_isr+0xe4>)
    3e70:	e853 1f00 	ldrex	r1, [r3]
    3e74:	f021 0001 	bic.w	r0, r1, #1
    3e78:	e843 0600 	strex	r6, r0, [r3]
    3e7c:	2e00      	cmp	r6, #0
    3e7e:	d1f7      	bne.n	3e70 <rtc_nrf_isr+0x44>
    3e80:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3e84:	2900      	cmp	r1, #0
    3e86:	d136      	bne.n	3ef6 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e88:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d132      	bne.n	3ef6 <rtc_nrf_isr+0xca>
{
    3e90:	2300      	movs	r3, #0
	__asm__ volatile(
    3e92:	f382 8811 	msr	BASEPRI, r2
    3e96:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3e9a:	b34b      	cbz	r3, 3ef0 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    3e9c:	f7ff fec0 	bl	3c20 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3ea0:	f04f 0320 	mov.w	r3, #32
    3ea4:	f3ef 8c11 	mrs	ip, BASEPRI
    3ea8:	f383 8812 	msr	BASEPRI_MAX, r3
    3eac:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3eb0:	4b18      	ldr	r3, [pc, #96]	; (3f14 <rtc_nrf_isr+0xe8>)
    3eb2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3eb6:	42b0      	cmp	r0, r6
    3eb8:	eb71 0207 	sbcs.w	r2, r1, r7
    3ebc:	f04f 0200 	mov.w	r2, #0
    3ec0:	d320      	bcc.n	3f04 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3ec2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ec6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    3eca:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3ece:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3ed2:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ed8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3edc:	f38c 8811 	msr	BASEPRI, ip
    3ee0:	f3bf 8f6f 	isb	sy
		if (handler) {
    3ee4:	b121      	cbz	r1, 3ef0 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3ee6:	9500      	str	r5, [sp, #0]
    3ee8:	4632      	mov	r2, r6
    3eea:	463b      	mov	r3, r7
    3eec:	2000      	movs	r0, #0
    3eee:	4788      	blx	r1
}
    3ef0:	b003      	add	sp, #12
    3ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ef6:	2300      	movs	r3, #0
    3ef8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    3efc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3f00:	2301      	movs	r3, #1
}
    3f02:	e7c6      	b.n	3e92 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3f04:	4611      	mov	r1, r2
    3f06:	e7e9      	b.n	3edc <rtc_nrf_isr+0xb0>
    3f08:	40011000 	.word	0x40011000
    3f0c:	20000eb4 	.word	0x20000eb4
    3f10:	20000eac 	.word	0x20000eac
    3f14:	20000720 	.word	0x20000720

00003f18 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f18:	1c43      	adds	r3, r0, #1
{
    3f1a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f1c:	d021      	beq.n	3f62 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3f1e:	2801      	cmp	r0, #1
    3f20:	dd21      	ble.n	3f66 <sys_clock_set_timeout+0x4e>
    3f22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f26:	da20      	bge.n	3f6a <sys_clock_set_timeout+0x52>
    3f28:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3f2a:	f7ff fe79 	bl	3c20 <z_nrf_rtc_timer_read>
    3f2e:	4b10      	ldr	r3, [pc, #64]	; (3f70 <sys_clock_set_timeout+0x58>)
    3f30:	e9d3 1300 	ldrd	r1, r3, [r3]
    3f34:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3f36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f3a:	bf28      	it	cs
    3f3c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3f3e:	3001      	adds	r0, #1
    3f40:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3f42:	480c      	ldr	r0, [pc, #48]	; (3f74 <sys_clock_set_timeout+0x5c>)
    3f44:	4282      	cmp	r2, r0
    3f46:	bf28      	it	cs
    3f48:	4602      	movcs	r2, r0
    3f4a:	1852      	adds	r2, r2, r1
    3f4c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3f50:	4909      	ldr	r1, [pc, #36]	; (3f78 <sys_clock_set_timeout+0x60>)
    3f52:	9001      	str	r0, [sp, #4]
    3f54:	9100      	str	r1, [sp, #0]
    3f56:	f143 0300 	adc.w	r3, r3, #0
    3f5a:	f7ff fe83 	bl	3c64 <compare_set>
}
    3f5e:	b002      	add	sp, #8
    3f60:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f62:	4804      	ldr	r0, [pc, #16]	; (3f74 <sys_clock_set_timeout+0x5c>)
    3f64:	e7e0      	b.n	3f28 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3f66:	2400      	movs	r4, #0
    3f68:	e7df      	b.n	3f2a <sys_clock_set_timeout+0x12>
    3f6a:	4c02      	ldr	r4, [pc, #8]	; (3f74 <sys_clock_set_timeout+0x5c>)
    3f6c:	e7dd      	b.n	3f2a <sys_clock_set_timeout+0x12>
    3f6e:	bf00      	nop
    3f70:	20000730 	.word	0x20000730
    3f74:	007fffff 	.word	0x007fffff
    3f78:	00003b4d 	.word	0x00003b4d

00003f7c <sys_clock_elapsed>:
{
    3f7c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3f7e:	f7ff fe4f 	bl	3c20 <z_nrf_rtc_timer_read>
    3f82:	4b02      	ldr	r3, [pc, #8]	; (3f8c <sys_clock_elapsed+0x10>)
    3f84:	681b      	ldr	r3, [r3, #0]
}
    3f86:	1ac0      	subs	r0, r0, r3
    3f88:	bd08      	pop	{r3, pc}
    3f8a:	bf00      	nop
    3f8c:	20000730 	.word	0x20000730

00003f90 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3f90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    3f92:	f7fd fd5f 	bl	1a54 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3f96:	4b07      	ldr	r3, [pc, #28]	; (3fb4 <k_sys_fatal_error_handler+0x24>)
    3f98:	9305      	str	r3, [sp, #20]
    3f9a:	2302      	movs	r3, #2
    3f9c:	9304      	str	r3, [sp, #16]
    3f9e:	4806      	ldr	r0, [pc, #24]	; (3fb8 <k_sys_fatal_error_handler+0x28>)
    3fa0:	2300      	movs	r3, #0
    3fa2:	aa04      	add	r2, sp, #16
    3fa4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3fa8:	f002 fc8e 	bl	68c8 <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    3fac:	2000      	movs	r0, #0
    3fae:	f7ff f88b 	bl	30c8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3fb2:	bf00      	nop
    3fb4:	00007e71 	.word	0x00007e71
    3fb8:	00007458 	.word	0x00007458

00003fbc <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3fbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3fc0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3fc4:	2a08      	cmp	r2, #8
    3fc6:	d106      	bne.n	3fd6 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3fc8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    3fcc:	2b05      	cmp	r3, #5
    3fce:	d802      	bhi.n	3fd6 <nrf52_errata_103+0x1a>
    3fd0:	4a02      	ldr	r2, [pc, #8]	; (3fdc <nrf52_errata_103+0x20>)
    3fd2:	5cd0      	ldrb	r0, [r2, r3]
    3fd4:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3fd6:	2000      	movs	r0, #0
    #endif
}
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop
    3fdc:	00007e94 	.word	0x00007e94

00003fe0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3fe0:	4a02      	ldr	r2, [pc, #8]	; (3fec <nvmc_wait+0xc>)
    3fe2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d0fb      	beq.n	3fe2 <nvmc_wait+0x2>
}
    3fea:	4770      	bx	lr
    3fec:	4001e000 	.word	0x4001e000

00003ff0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3ff0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3ff2:	f002 fde9 	bl	6bc8 <nrf52_errata_136>
    3ff6:	b140      	cbz	r0, 400a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ffc:	2200      	movs	r2, #0
    3ffe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4002:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4006:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    400a:	f002 fddd 	bl	6bc8 <nrf52_errata_136>
    400e:	2800      	cmp	r0, #0
    4010:	d046      	beq.n	40a0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4016:	4b60      	ldr	r3, [pc, #384]	; (4198 <SystemInit+0x1a8>)
    4018:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    401c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4020:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4024:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4028:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    402c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4030:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4034:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4038:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    403c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4040:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4044:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4048:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    404c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4050:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4054:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4058:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    405c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4060:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4064:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4068:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    406c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4070:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4074:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4078:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    407c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4080:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4084:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4088:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    408c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4090:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4094:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4098:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    409c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    40a0:	f7ff ff8c 	bl	3fbc <nrf52_errata_103>
    40a4:	b118      	cbz	r0, 40ae <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    40a6:	4b3d      	ldr	r3, [pc, #244]	; (419c <SystemInit+0x1ac>)
    40a8:	4a3d      	ldr	r2, [pc, #244]	; (41a0 <SystemInit+0x1b0>)
    40aa:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    40ae:	f7ff ff85 	bl	3fbc <nrf52_errata_103>
    40b2:	b118      	cbz	r0, 40bc <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    40b4:	4b3b      	ldr	r3, [pc, #236]	; (41a4 <SystemInit+0x1b4>)
    40b6:	22fb      	movs	r2, #251	; 0xfb
    40b8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    40bc:	f7ff ff7e 	bl	3fbc <nrf52_errata_103>
    40c0:	b170      	cbz	r0, 40e0 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    40c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    40c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    40ca:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    40ce:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    40d2:	f022 020f 	bic.w	r2, r2, #15
    40d6:	f003 030f 	and.w	r3, r3, #15
    40da:	4313      	orrs	r3, r2
    40dc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    40e0:	f7ff ff6c 	bl	3fbc <nrf52_errata_103>
    40e4:	b120      	cbz	r0, 40f0 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    40e6:	4b30      	ldr	r3, [pc, #192]	; (41a8 <SystemInit+0x1b8>)
    40e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    40ec:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    40f0:	f002 fd6a 	bl	6bc8 <nrf52_errata_136>
    40f4:	b148      	cbz	r0, 410a <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    40f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    40fe:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4100:	bf44      	itt	mi
    4102:	f06f 0201 	mvnmi.w	r2, #1
    4106:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    410a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    410e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4112:	2a08      	cmp	r2, #8
    4114:	d10e      	bne.n	4134 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4116:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    411a:	2b05      	cmp	r3, #5
    411c:	d802      	bhi.n	4124 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    411e:	4a23      	ldr	r2, [pc, #140]	; (41ac <SystemInit+0x1bc>)
    4120:	5cd3      	ldrb	r3, [r2, r3]
    4122:	b13b      	cbz	r3, 4134 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4124:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4128:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    412c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4130:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4134:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4138:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    413c:	2a00      	cmp	r2, #0
    413e:	db03      	blt.n	4148 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4140:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4144:	2b00      	cmp	r3, #0
    4146:	da22      	bge.n	418e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4148:	4919      	ldr	r1, [pc, #100]	; (41b0 <SystemInit+0x1c0>)
    414a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    414c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4150:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4154:	2412      	movs	r4, #18
    nvmc_wait();
    4156:	f7ff ff43 	bl	3fe0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    415a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    415e:	f7ff ff3f 	bl	3fe0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4162:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4166:	f7ff ff3b 	bl	3fe0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    416a:	2300      	movs	r3, #0
    416c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4170:	f7ff ff36 	bl	3fe0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4174:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4178:	490e      	ldr	r1, [pc, #56]	; (41b4 <SystemInit+0x1c4>)
    417a:	4b0f      	ldr	r3, [pc, #60]	; (41b8 <SystemInit+0x1c8>)
    417c:	68ca      	ldr	r2, [r1, #12]
    417e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4182:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4184:	60cb      	str	r3, [r1, #12]
    4186:	f3bf 8f4f 	dsb	sy
    __NOP();
    418a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    418c:	e7fd      	b.n	418a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    418e:	4b0b      	ldr	r3, [pc, #44]	; (41bc <SystemInit+0x1cc>)
    4190:	4a0b      	ldr	r2, [pc, #44]	; (41c0 <SystemInit+0x1d0>)
    4192:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4194:	bd10      	pop	{r4, pc}
    4196:	bf00      	nop
    4198:	4000c000 	.word	0x4000c000
    419c:	40005000 	.word	0x40005000
    41a0:	00038148 	.word	0x00038148
    41a4:	4000f000 	.word	0x4000f000
    41a8:	40029000 	.word	0x40029000
    41ac:	00007e8e 	.word	0x00007e8e
    41b0:	4001e000 	.word	0x4001e000
    41b4:	e000ed00 	.word	0xe000ed00
    41b8:	05fa0004 	.word	0x05fa0004
    41bc:	200000ec 	.word	0x200000ec
    41c0:	03d09000 	.word	0x03d09000

000041c4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    41c4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    41c6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    41c8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    41ca:	fab2 f382 	clz	r3, r2
    41ce:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    41d2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    41d4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    41d6:	d014      	beq.n	4202 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    41d8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    41dc:	fa05 f303 	lsl.w	r3, r5, r3
    41e0:	ea22 0303 	bic.w	r3, r2, r3
    41e4:	e850 6f00 	ldrex	r6, [r0]
    41e8:	4296      	cmp	r6, r2
    41ea:	d104      	bne.n	41f6 <nrfx_flag32_alloc+0x32>
    41ec:	e840 3c00 	strex	ip, r3, [r0]
    41f0:	f1bc 0f00 	cmp.w	ip, #0
    41f4:	d1f6      	bne.n	41e4 <nrfx_flag32_alloc+0x20>
    41f6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    41fa:	d1e5      	bne.n	41c8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    41fc:	4802      	ldr	r0, [pc, #8]	; (4208 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    41fe:	700c      	strb	r4, [r1, #0]
}
    4200:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    4202:	4802      	ldr	r0, [pc, #8]	; (420c <nrfx_flag32_alloc+0x48>)
    4204:	e7fc      	b.n	4200 <nrfx_flag32_alloc+0x3c>
    4206:	bf00      	nop
    4208:	0bad0000 	.word	0x0bad0000
    420c:	0bad0002 	.word	0x0bad0002

00004210 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4210:	6803      	ldr	r3, [r0, #0]
    4212:	40cb      	lsrs	r3, r1
    4214:	07db      	lsls	r3, r3, #31
{
    4216:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4218:	d415      	bmi.n	4246 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    421a:	2301      	movs	r3, #1
    421c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    4220:	6803      	ldr	r3, [r0, #0]
    4222:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4226:	ea41 0203 	orr.w	r2, r1, r3
    422a:	e850 4f00 	ldrex	r4, [r0]
    422e:	429c      	cmp	r4, r3
    4230:	d104      	bne.n	423c <nrfx_flag32_free+0x2c>
    4232:	e840 2c00 	strex	ip, r2, [r0]
    4236:	f1bc 0f00 	cmp.w	ip, #0
    423a:	d1f6      	bne.n	422a <nrfx_flag32_free+0x1a>
    423c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4240:	d1ee      	bne.n	4220 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4242:	4802      	ldr	r0, [pc, #8]	; (424c <nrfx_flag32_free+0x3c>)
}
    4244:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4246:	4802      	ldr	r0, [pc, #8]	; (4250 <nrfx_flag32_free+0x40>)
    4248:	e7fc      	b.n	4244 <nrfx_flag32_free+0x34>
    424a:	bf00      	nop
    424c:	0bad0000 	.word	0x0bad0000
    4250:	0bad0004 	.word	0x0bad0004

00004254 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    4256:	4604      	mov	r4, r0
    4258:	b118      	cbz	r0, 4262 <clock_stop+0xe>
    425a:	2801      	cmp	r0, #1
    425c:	d029      	beq.n	42b2 <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    425e:	b003      	add	sp, #12
    4260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    4262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4266:	2202      	movs	r2, #2
    4268:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    426c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4270:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4274:	2201      	movs	r2, #1
    4276:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4278:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    427a:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    427c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4280:	bf14      	ite	ne
    4282:	2500      	movne	r5, #0
    4284:	f10d 0507 	addeq.w	r5, sp, #7
    4288:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    428c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4290:	b1d4      	cbz	r4, 42c8 <clock_stop+0x74>
    4292:	2c01      	cmp	r4, #1
    4294:	d1e3      	bne.n	425e <clock_stop+0xa>
            if (p_clk_src != NULL)
    4296:	b125      	cbz	r5, 42a2 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4298:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    429c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    42a0:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    42a2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    42a6:	03db      	lsls	r3, r3, #15
    42a8:	d418      	bmi.n	42dc <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    42aa:	4b13      	ldr	r3, [pc, #76]	; (42f8 <clock_stop+0xa4>)
    42ac:	2200      	movs	r2, #0
    42ae:	715a      	strb	r2, [r3, #5]
    42b0:	e7d5      	b.n	425e <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    42b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42b6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    42b8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    42c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42c4:	6058      	str	r0, [r3, #4]
}
    42c6:	e7d7      	b.n	4278 <clock_stop+0x24>
            if (p_clk_src != NULL)
    42c8:	b125      	cbz	r5, 42d4 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    42ca:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    42ce:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    42d2:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    42d4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    42d8:	03da      	lsls	r2, r3, #15
    42da:	d5c0      	bpl.n	425e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    42dc:	b92d      	cbnz	r5, 42ea <clock_stop+0x96>
    42de:	2001      	movs	r0, #1
    42e0:	f002 fc7c 	bl	6bdc <nrfx_busy_wait>
    42e4:	3f01      	subs	r7, #1
    42e6:	d1d3      	bne.n	4290 <clock_stop+0x3c>
    42e8:	e003      	b.n	42f2 <clock_stop+0x9e>
    42ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    42ee:	2b01      	cmp	r3, #1
    42f0:	d0f5      	beq.n	42de <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    42f2:	2c01      	cmp	r4, #1
    42f4:	d0d9      	beq.n	42aa <clock_stop+0x56>
    42f6:	e7b2      	b.n	425e <clock_stop+0xa>
    42f8:	20000eb8 	.word	0x20000eb8

000042fc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    42fc:	4b04      	ldr	r3, [pc, #16]	; (4310 <nrfx_clock_init+0x14>)
    42fe:	791a      	ldrb	r2, [r3, #4]
    4300:	b922      	cbnz	r2, 430c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4302:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4304:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4306:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4308:	4802      	ldr	r0, [pc, #8]	; (4314 <nrfx_clock_init+0x18>)
    430a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    430c:	4802      	ldr	r0, [pc, #8]	; (4318 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    430e:	4770      	bx	lr
    4310:	20000eb8 	.word	0x20000eb8
    4314:	0bad0000 	.word	0x0bad0000
    4318:	0bad000c 	.word	0x0bad000c

0000431c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    431c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4320:	b510      	push	{r4, lr}
    4322:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4326:	b16a      	cbz	r2, 4344 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4328:	2200      	movs	r2, #0
    432a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    432e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4332:	2201      	movs	r2, #1
    4334:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4338:	4b0c      	ldr	r3, [pc, #48]	; (436c <nrfx_power_clock_irq_handler+0x50>)
    433a:	7958      	ldrb	r0, [r3, #5]
    433c:	b910      	cbnz	r0, 4344 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    433e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4340:	681b      	ldr	r3, [r3, #0]
    4342:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4348:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    434c:	b16a      	cbz	r2, 436a <nrfx_power_clock_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    434e:	2200      	movs	r2, #0
    4350:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4354:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    4358:	2202      	movs	r2, #2
    435a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    435e:	4b03      	ldr	r3, [pc, #12]	; (436c <nrfx_power_clock_irq_handler+0x50>)
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4364:	681b      	ldr	r3, [r3, #0]
    4366:	2001      	movs	r0, #1
    4368:	4718      	bx	r3
}
    436a:	bd10      	pop	{r4, pc}
    436c:	20000eb8 	.word	0x20000eb8

00004370 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4370:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4372:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4376:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    4378:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    437a:	6002      	str	r2, [r0, #0]
}
    437c:	4802      	ldr	r0, [pc, #8]	; (4388 <nrf_gpio_pin_port_decode+0x18>)
    437e:	bf18      	it	ne
    4380:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4384:	4770      	bx	lr
    4386:	bf00      	nop
    4388:	50000300 	.word	0x50000300

0000438c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    438c:	4b03      	ldr	r3, [pc, #12]	; (439c <pin_in_use_by_te+0x10>)
    438e:	3008      	adds	r0, #8
    4390:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4394:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4398:	4770      	bx	lr
    439a:	bf00      	nop
    439c:	200000f0 	.word	0x200000f0

000043a0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    43a0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    43a2:	f100 0308 	add.w	r3, r0, #8
    43a6:	4c0c      	ldr	r4, [pc, #48]	; (43d8 <call_handler+0x38>)
    43a8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    43ac:	05da      	lsls	r2, r3, #23
{
    43ae:	4605      	mov	r5, r0
    43b0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    43b2:	d507      	bpl.n	43c4 <call_handler+0x24>
    43b4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    43b8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    43bc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    43c0:	6852      	ldr	r2, [r2, #4]
    43c2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    43c4:	68a3      	ldr	r3, [r4, #8]
    43c6:	b12b      	cbz	r3, 43d4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    43c8:	68e2      	ldr	r2, [r4, #12]
    43ca:	4631      	mov	r1, r6
    43cc:	4628      	mov	r0, r5
    }
}
    43ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    43d2:	4718      	bx	r3
}
    43d4:	bd70      	pop	{r4, r5, r6, pc}
    43d6:	bf00      	nop
    43d8:	200000f0 	.word	0x200000f0

000043dc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    43dc:	4a12      	ldr	r2, [pc, #72]	; (4428 <release_handler+0x4c>)
    43de:	3008      	adds	r0, #8
{
    43e0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    43e2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    43e6:	05d9      	lsls	r1, r3, #23
    43e8:	d51b      	bpl.n	4422 <release_handler+0x46>
    43ea:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    43ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    43f2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    43f6:	f102 0410 	add.w	r4, r2, #16
    43fa:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    43fc:	f834 3b02 	ldrh.w	r3, [r4], #2
    4400:	f413 7f80 	tst.w	r3, #256	; 0x100
    4404:	d003      	beq.n	440e <release_handler+0x32>
    4406:	f3c3 2343 	ubfx	r3, r3, #9, #4
    440a:	4299      	cmp	r1, r3
    440c:	d009      	beq.n	4422 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    440e:	3001      	adds	r0, #1
    4410:	2830      	cmp	r0, #48	; 0x30
    4412:	d1f3      	bne.n	43fc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4414:	2300      	movs	r3, #0
    4416:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    441a:	4804      	ldr	r0, [pc, #16]	; (442c <release_handler+0x50>)
}
    441c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    441e:	f7ff bef7 	b.w	4210 <nrfx_flag32_free>
}
    4422:	bc10      	pop	{r4}
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	200000f0 	.word	0x200000f0
    442c:	20000164 	.word	0x20000164

00004430 <pin_handler_trigger_uninit>:
{
    4430:	b538      	push	{r3, r4, r5, lr}
    4432:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4434:	f7ff ffaa 	bl	438c <pin_in_use_by_te>
    4438:	4c09      	ldr	r4, [pc, #36]	; (4460 <pin_handler_trigger_uninit+0x30>)
    443a:	f102 0508 	add.w	r5, r2, #8
    443e:	b140      	cbz	r0, 4452 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4440:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4444:	4907      	ldr	r1, [pc, #28]	; (4464 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4446:	0b5b      	lsrs	r3, r3, #13
    4448:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    444c:	2000      	movs	r0, #0
    444e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4452:	4610      	mov	r0, r2
    4454:	f7ff ffc2 	bl	43dc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4458:	2300      	movs	r3, #0
    445a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    445e:	bd38      	pop	{r3, r4, r5, pc}
    4460:	200000f0 	.word	0x200000f0
    4464:	40006000 	.word	0x40006000

00004468 <nrfx_gpiote_input_configure>:
{
    4468:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    446c:	4604      	mov	r4, r0
    446e:	4617      	mov	r7, r2
    4470:	461d      	mov	r5, r3
    if (p_input_config)
    4472:	b321      	cbz	r1, 44be <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4474:	4e4e      	ldr	r6, [pc, #312]	; (45b0 <nrfx_gpiote_input_configure+0x148>)
    4476:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    447a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    447e:	079b      	lsls	r3, r3, #30
    4480:	d506      	bpl.n	4490 <nrfx_gpiote_input_configure+0x28>
    4482:	f7ff ff83 	bl	438c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    4486:	b118      	cbz	r0, 4490 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    4488:	484a      	ldr	r0, [pc, #296]	; (45b4 <nrfx_gpiote_input_configure+0x14c>)
}
    448a:	b004      	add	sp, #16
    448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4490:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4492:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4496:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    449a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    449e:	f10d 020f 	add.w	r2, sp, #15
    44a2:	460b      	mov	r3, r1
    44a4:	4620      	mov	r0, r4
    44a6:	f10d 010e 	add.w	r1, sp, #14
    44aa:	f002 fbe3 	bl	6c74 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    44ae:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    44b2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    44b6:	f043 0301 	orr.w	r3, r3, #1
    44ba:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    44be:	b197      	cbz	r7, 44e6 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    44c0:	4b3b      	ldr	r3, [pc, #236]	; (45b0 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    44c2:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    44c4:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    44c6:	f104 0008 	add.w	r0, r4, #8
    44ca:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    44ce:	078f      	lsls	r7, r1, #30
    44d0:	d50c      	bpl.n	44ec <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    44d2:	2a00      	cmp	r2, #0
    44d4:	d1d8      	bne.n	4488 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    44d6:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    44da:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    44de:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    44e2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    44e6:	bbcd      	cbnz	r5, 455c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    44e8:	4833      	ldr	r0, [pc, #204]	; (45b8 <nrfx_gpiote_input_configure+0x150>)
    44ea:	e7ce      	b.n	448a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    44ec:	f021 0120 	bic.w	r1, r1, #32
    44f0:	04c9      	lsls	r1, r1, #19
    44f2:	0cc9      	lsrs	r1, r1, #19
    44f4:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    44f8:	2a00      	cmp	r2, #0
    44fa:	d0ec      	beq.n	44d6 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    44fc:	2e03      	cmp	r6, #3
    44fe:	d8c3      	bhi.n	4488 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4500:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4502:	b92e      	cbnz	r6, 4510 <nrfx_gpiote_input_configure+0xa8>
    4504:	4a2d      	ldr	r2, [pc, #180]	; (45bc <nrfx_gpiote_input_configure+0x154>)
    4506:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    450a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    450e:	e7e2      	b.n	44d6 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4510:	00ba      	lsls	r2, r7, #2
    4512:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4516:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    451a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    451e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4522:	f02c 0c03 	bic.w	ip, ip, #3
    4526:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    452a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    452e:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4532:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4536:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    453a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    453e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4542:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    4546:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    454a:	ea4c 0c0e 	orr.w	ip, ip, lr
    454e:	f041 0120 	orr.w	r1, r1, #32
    4552:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4556:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    455a:	e7bc      	b.n	44d6 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    455c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4560:	4620      	mov	r0, r4
    4562:	f7ff ff3b 	bl	43dc <release_handler>
    if (!handler)
    4566:	2e00      	cmp	r6, #0
    4568:	d0be      	beq.n	44e8 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    456a:	4d11      	ldr	r5, [pc, #68]	; (45b0 <nrfx_gpiote_input_configure+0x148>)
    456c:	682b      	ldr	r3, [r5, #0]
    456e:	429e      	cmp	r6, r3
    4570:	d104      	bne.n	457c <nrfx_gpiote_input_configure+0x114>
    4572:	686b      	ldr	r3, [r5, #4]
    4574:	429f      	cmp	r7, r3
    4576:	d101      	bne.n	457c <nrfx_gpiote_input_configure+0x114>
    4578:	2200      	movs	r2, #0
    457a:	e00a      	b.n	4592 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    457c:	4810      	ldr	r0, [pc, #64]	; (45c0 <nrfx_gpiote_input_configure+0x158>)
    457e:	f10d 010f 	add.w	r1, sp, #15
    4582:	f7ff fe1f 	bl	41c4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4586:	4b0c      	ldr	r3, [pc, #48]	; (45b8 <nrfx_gpiote_input_configure+0x150>)
    4588:	4298      	cmp	r0, r3
    458a:	f47f af7e 	bne.w	448a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    458e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4592:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4596:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    459a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    459c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    459e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    45a2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    45a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    45aa:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    45ae:	e79b      	b.n	44e8 <nrfx_gpiote_input_configure+0x80>
    45b0:	200000f0 	.word	0x200000f0
    45b4:	0bad0004 	.word	0x0bad0004
    45b8:	0bad0000 	.word	0x0bad0000
    45bc:	40006000 	.word	0x40006000
    45c0:	20000164 	.word	0x20000164

000045c4 <nrfx_gpiote_output_configure>:
{
    45c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45c6:	4604      	mov	r4, r0
    45c8:	b085      	sub	sp, #20
    45ca:	4615      	mov	r5, r2
    if (p_config)
    45cc:	b319      	cbz	r1, 4616 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45ce:	4e33      	ldr	r6, [pc, #204]	; (469c <nrfx_gpiote_output_configure+0xd8>)
    45d0:	f100 0708 	add.w	r7, r0, #8
    45d4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    45d8:	0793      	lsls	r3, r2, #30
    45da:	d403      	bmi.n	45e4 <nrfx_gpiote_output_configure+0x20>
    45dc:	f7ff fed6 	bl	438c <pin_in_use_by_te>
    45e0:	2800      	cmp	r0, #0
    45e2:	d158      	bne.n	4696 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    45e4:	f012 0f1c 	tst.w	r2, #28
    45e8:	d002      	beq.n	45f0 <nrfx_gpiote_output_configure+0x2c>
    45ea:	784b      	ldrb	r3, [r1, #1]
    45ec:	2b01      	cmp	r3, #1
    45ee:	d052      	beq.n	4696 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    45f0:	2301      	movs	r3, #1
    45f2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    45f6:	2300      	movs	r3, #0
    45f8:	e9cd 1300 	strd	r1, r3, [sp]
    45fc:	1c4a      	adds	r2, r1, #1
    45fe:	1c8b      	adds	r3, r1, #2
    4600:	4620      	mov	r0, r4
    4602:	f10d 010f 	add.w	r1, sp, #15
    4606:	f002 fb35 	bl	6c74 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    460a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    460e:	f043 0303 	orr.w	r3, r3, #3
    4612:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4616:	b915      	cbnz	r5, 461e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4618:	4821      	ldr	r0, [pc, #132]	; (46a0 <nrfx_gpiote_output_configure+0xdc>)
}
    461a:	b005      	add	sp, #20
    461c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    461e:	4e1f      	ldr	r6, [pc, #124]	; (469c <nrfx_gpiote_output_configure+0xd8>)
    4620:	f104 0708 	add.w	r7, r4, #8
    4624:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4628:	0783      	lsls	r3, r0, #30
    462a:	d534      	bpl.n	4696 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    462c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4630:	4661      	mov	r1, ip
    4632:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4634:	f020 0020 	bic.w	r0, r0, #32
    4638:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    463c:	04c0      	lsls	r0, r0, #19
    463e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4642:	0cc0      	lsrs	r0, r0, #19
    4644:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4648:	2300      	movs	r3, #0
    464a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    464e:	786a      	ldrb	r2, [r5, #1]
    4650:	2a00      	cmp	r2, #0
    4652:	d0e1      	beq.n	4618 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4654:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4658:	78ad      	ldrb	r5, [r5, #2]
    465a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    465e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4662:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4666:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    466a:	0223      	lsls	r3, r4, #8
    466c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4670:	0412      	lsls	r2, r2, #16
    4672:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4676:	ea43 030e 	orr.w	r3, r3, lr
    467a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    467c:	052a      	lsls	r2, r5, #20
    467e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4682:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4686:	4313      	orrs	r3, r2
    4688:	f040 0020 	orr.w	r0, r0, #32
    468c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4690:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4694:	e7c0      	b.n	4618 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    4696:	4803      	ldr	r0, [pc, #12]	; (46a4 <nrfx_gpiote_output_configure+0xe0>)
    4698:	e7bf      	b.n	461a <nrfx_gpiote_output_configure+0x56>
    469a:	bf00      	nop
    469c:	200000f0 	.word	0x200000f0
    46a0:	0bad0000 	.word	0x0bad0000
    46a4:	0bad0004 	.word	0x0bad0004

000046a8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    46a8:	4b01      	ldr	r3, [pc, #4]	; (46b0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    46aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    46ae:	4770      	bx	lr
    46b0:	200000f0 	.word	0x200000f0

000046b4 <nrfx_gpiote_channel_get>:
{
    46b4:	b508      	push	{r3, lr}
    46b6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    46b8:	f7ff fe68 	bl	438c <pin_in_use_by_te>
    46bc:	b138      	cbz	r0, 46ce <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    46be:	4b05      	ldr	r3, [pc, #20]	; (46d4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    46c0:	4805      	ldr	r0, [pc, #20]	; (46d8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    46c2:	3208      	adds	r2, #8
    46c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    46c8:	0b5b      	lsrs	r3, r3, #13
    46ca:	700b      	strb	r3, [r1, #0]
}
    46cc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    46ce:	4803      	ldr	r0, [pc, #12]	; (46dc <nrfx_gpiote_channel_get+0x28>)
    46d0:	e7fc      	b.n	46cc <nrfx_gpiote_channel_get+0x18>
    46d2:	bf00      	nop
    46d4:	200000f0 	.word	0x200000f0
    46d8:	0bad0000 	.word	0x0bad0000
    46dc:	0bad0004 	.word	0x0bad0004

000046e0 <nrfx_gpiote_init>:
{
    46e0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    46e2:	4c0f      	ldr	r4, [pc, #60]	; (4720 <nrfx_gpiote_init+0x40>)
    46e4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    46e8:	b9bd      	cbnz	r5, 471a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    46ea:	2260      	movs	r2, #96	; 0x60
    46ec:	4629      	mov	r1, r5
    46ee:	f104 0010 	add.w	r0, r4, #16
    46f2:	f002 fd46 	bl	7182 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    46f6:	2006      	movs	r0, #6
    46f8:	f7fd ff80 	bl	25fc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    46fc:	4b09      	ldr	r3, [pc, #36]	; (4724 <nrfx_gpiote_init+0x44>)
    return err_code;
    46fe:	480a      	ldr	r0, [pc, #40]	; (4728 <nrfx_gpiote_init+0x48>)
    4700:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4704:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4708:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    470c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4710:	2301      	movs	r3, #1
    4712:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4716:	6763      	str	r3, [r4, #116]	; 0x74
}
    4718:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    471a:	4804      	ldr	r0, [pc, #16]	; (472c <nrfx_gpiote_init+0x4c>)
    471c:	e7fc      	b.n	4718 <nrfx_gpiote_init+0x38>
    471e:	bf00      	nop
    4720:	200000f0 	.word	0x200000f0
    4724:	40006000 	.word	0x40006000
    4728:	0bad0000 	.word	0x0bad0000
    472c:	0bad0005 	.word	0x0bad0005

00004730 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4730:	4b03      	ldr	r3, [pc, #12]	; (4740 <nrfx_gpiote_is_init+0x10>)
    4732:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4736:	3800      	subs	r0, #0
    4738:	bf18      	it	ne
    473a:	2001      	movne	r0, #1
    473c:	4770      	bx	lr
    473e:	bf00      	nop
    4740:	200000f0 	.word	0x200000f0

00004744 <nrfx_gpiote_channel_free>:
{
    4744:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4746:	4801      	ldr	r0, [pc, #4]	; (474c <nrfx_gpiote_channel_free+0x8>)
    4748:	f7ff bd62 	b.w	4210 <nrfx_flag32_free>
    474c:	20000160 	.word	0x20000160

00004750 <nrfx_gpiote_channel_alloc>:
{
    4750:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4752:	4801      	ldr	r0, [pc, #4]	; (4758 <nrfx_gpiote_channel_alloc+0x8>)
    4754:	f7ff bd36 	b.w	41c4 <nrfx_flag32_alloc>
    4758:	20000160 	.word	0x20000160

0000475c <nrfx_gpiote_trigger_enable>:
{
    475c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    475e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4760:	f7ff fe14 	bl	438c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4764:	f104 0208 	add.w	r2, r4, #8
    4768:	4b1e      	ldr	r3, [pc, #120]	; (47e4 <nrfx_gpiote_trigger_enable+0x88>)
    476a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    476e:	b1e8      	cbz	r0, 47ac <nrfx_gpiote_trigger_enable+0x50>
    4770:	f013 0502 	ands.w	r5, r3, #2
    4774:	d11a      	bne.n	47ac <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4776:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4778:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    477a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    477e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4782:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4786:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    478a:	6005      	str	r5, [r0, #0]
    478c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    478e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4792:	f040 0001 	orr.w	r0, r0, #1
    4796:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    479a:	b129      	cbz	r1, 47a8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    479c:	2201      	movs	r2, #1
    479e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    47a2:	4a11      	ldr	r2, [pc, #68]	; (47e8 <nrfx_gpiote_trigger_enable+0x8c>)
    47a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    47a8:	b003      	add	sp, #12
    47aa:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    47ac:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    47b0:	2b04      	cmp	r3, #4
    47b2:	d012      	beq.n	47da <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    47b4:	2b05      	cmp	r3, #5
    47b6:	d012      	beq.n	47de <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    47b8:	a801      	add	r0, sp, #4
    47ba:	9401      	str	r4, [sp, #4]
    47bc:	f7ff fdd8 	bl	4370 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    47c0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    47c2:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    47c6:	40d9      	lsrs	r1, r3
    47c8:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    47cc:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    47ce:	4620      	mov	r0, r4
}
    47d0:	b003      	add	sp, #12
    47d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    47d6:	f002 ba94 	b.w	6d02 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    47da:	2103      	movs	r1, #3
    47dc:	e7f7      	b.n	47ce <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    47de:	2102      	movs	r1, #2
    47e0:	e7f5      	b.n	47ce <nrfx_gpiote_trigger_enable+0x72>
    47e2:	bf00      	nop
    47e4:	200000f0 	.word	0x200000f0
    47e8:	40006000 	.word	0x40006000

000047ec <nrfx_gpiote_trigger_disable>:
{
    47ec:	b508      	push	{r3, lr}
    47ee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    47f0:	f7ff fdcc 	bl	438c <pin_in_use_by_te>
    47f4:	b1c0      	cbz	r0, 4828 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    47f6:	f102 0108 	add.w	r1, r2, #8
    47fa:	4b0e      	ldr	r3, [pc, #56]	; (4834 <nrfx_gpiote_trigger_disable+0x48>)
    47fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4800:	0799      	lsls	r1, r3, #30
    4802:	d411      	bmi.n	4828 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4804:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4806:	2201      	movs	r2, #1
    4808:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    480a:	009b      	lsls	r3, r3, #2
    480c:	490a      	ldr	r1, [pc, #40]	; (4838 <nrfx_gpiote_trigger_disable+0x4c>)
    480e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4812:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4816:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    481a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    481e:	f022 0203 	bic.w	r2, r2, #3
    4822:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4826:	bd08      	pop	{r3, pc}
    4828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    482c:	2100      	movs	r1, #0
    482e:	4610      	mov	r0, r2
    4830:	f002 ba67 	b.w	6d02 <nrf_gpio_cfg_sense_set>
    4834:	200000f0 	.word	0x200000f0
    4838:	40006000 	.word	0x40006000

0000483c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    483c:	4b0e      	ldr	r3, [pc, #56]	; (4878 <nrfx_gpiote_pin_uninit+0x3c>)
    483e:	f100 0208 	add.w	r2, r0, #8
{
    4842:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4844:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4848:	07db      	lsls	r3, r3, #31
{
    484a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    484c:	d511      	bpl.n	4872 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    484e:	f7ff ffcd 	bl	47ec <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4852:	4620      	mov	r0, r4
    4854:	f7ff fdec 	bl	4430 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4858:	a801      	add	r0, sp, #4
    485a:	9401      	str	r4, [sp, #4]
    485c:	f7ff fd88 	bl	4370 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4860:	9b01      	ldr	r3, [sp, #4]
    4862:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4866:	2202      	movs	r2, #2
    4868:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    486c:	4803      	ldr	r0, [pc, #12]	; (487c <nrfx_gpiote_pin_uninit+0x40>)
}
    486e:	b002      	add	sp, #8
    4870:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4872:	4803      	ldr	r0, [pc, #12]	; (4880 <nrfx_gpiote_pin_uninit+0x44>)
    4874:	e7fb      	b.n	486e <nrfx_gpiote_pin_uninit+0x32>
    4876:	bf00      	nop
    4878:	200000f0 	.word	0x200000f0
    487c:	0bad0000 	.word	0x0bad0000
    4880:	0bad0004 	.word	0x0bad0004

00004884 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4888:	4b64      	ldr	r3, [pc, #400]	; (4a1c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    488a:	4865      	ldr	r0, [pc, #404]	; (4a20 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    488c:	4965      	ldr	r1, [pc, #404]	; (4a24 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    488e:	2600      	movs	r6, #0
{
    4890:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4892:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4894:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4896:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4898:	b135      	cbz	r5, 48a8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    489a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    489e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    48a0:	bf1e      	ittt	ne
    48a2:	601c      	strne	r4, [r3, #0]
    48a4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    48a6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    48a8:	3304      	adds	r3, #4
    48aa:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    48ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    48b0:	d1f1      	bne.n	4896 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    48b2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 4a20 <nrfx_gpiote_irq_handler+0x19c>
    48b6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    48ba:	2b00      	cmp	r3, #0
    48bc:	f000 8091 	beq.w	49e2 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    48c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    48c4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    48c8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    48ca:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    48ce:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    48d2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    48d4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    48d8:	2700      	movs	r7, #0
            while (latch[i])
    48da:	f10d 0910 	add.w	r9, sp, #16
    48de:	017b      	lsls	r3, r7, #5
    48e0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    48e2:	f04f 0a01 	mov.w	sl, #1
    48e6:	e049      	b.n	497c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    48e8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    48ea:	4a4f      	ldr	r2, [pc, #316]	; (4a28 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    48ec:	fa94 f4a4 	rbit	r4, r4
    48f0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    48f4:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    48f6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    48fa:	08e0      	lsrs	r0, r4, #3
    48fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4900:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    4902:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4906:	fa0a fc02 	lsl.w	ip, sl, r2
    490a:	f819 2000 	ldrb.w	r2, [r9, r0]
    490e:	ea22 020c 	bic.w	r2, r2, ip
    4912:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4916:	a803      	add	r0, sp, #12
    4918:	f3c3 0582 	ubfx	r5, r3, #2, #3
    491c:	0899      	lsrs	r1, r3, #2
    491e:	f7ff fd27 	bl	4370 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4922:	9a03      	ldr	r2, [sp, #12]
    4924:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    4928:	074b      	lsls	r3, r1, #29
    492a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    492e:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4930:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4934:	d529      	bpl.n	498a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    4936:	4620      	mov	r0, r4
    4938:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    493a:	b2d5      	uxtb	r5, r2
    493c:	f7ff fd30 	bl	43a0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4940:	a803      	add	r0, sp, #12
    4942:	9403      	str	r4, [sp, #12]
    4944:	f7ff fd14 	bl	4370 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4948:	9b03      	ldr	r3, [sp, #12]
    494a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    494e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4952:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4956:	429d      	cmp	r5, r3
    4958:	d107      	bne.n	496a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    495a:	2100      	movs	r1, #0
    495c:	4620      	mov	r0, r4
    495e:	f002 f9d0 	bl	6d02 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4962:	4629      	mov	r1, r5
    4964:	4620      	mov	r0, r4
    4966:	f002 f9cc 	bl	6d02 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    496a:	a803      	add	r0, sp, #12
    496c:	9403      	str	r4, [sp, #12]
    496e:	f7ff fcff 	bl	4370 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4972:	9b03      	ldr	r3, [sp, #12]
    4974:	fa0a f303 	lsl.w	r3, sl, r3
    4978:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    497c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    4980:	2c00      	cmp	r4, #0
    4982:	d1b1      	bne.n	48e8 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4984:	b9cf      	cbnz	r7, 49ba <nrfx_gpiote_irq_handler+0x136>
    4986:	2701      	movs	r7, #1
    4988:	e7a9      	b.n	48de <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    498a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    498c:	bf0c      	ite	eq
    498e:	2103      	moveq	r1, #3
    4990:	2102      	movne	r1, #2
    4992:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4994:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4996:	f002 f9b4 	bl	6d02 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    499a:	2d03      	cmp	r5, #3
    499c:	d004      	beq.n	49a8 <nrfx_gpiote_irq_handler+0x124>
    499e:	9a01      	ldr	r2, [sp, #4]
    49a0:	2a02      	cmp	r2, #2
    49a2:	d106      	bne.n	49b2 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    49a4:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    49a6:	d1e0      	bne.n	496a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    49a8:	4659      	mov	r1, fp
    49aa:	4620      	mov	r0, r4
    49ac:	f7ff fcf8 	bl	43a0 <call_handler>
    49b0:	e7db      	b.n	496a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    49b2:	2a03      	cmp	r2, #3
    49b4:	d1d9      	bne.n	496a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    49b6:	2d02      	cmp	r5, #2
    49b8:	e7f5      	b.n	49a6 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    49ba:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    49be:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    49c2:	491a      	ldr	r1, [pc, #104]	; (4a2c <nrfx_gpiote_irq_handler+0x1a8>)
    49c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    49c8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    49cc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    49ce:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    49d2:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    49d6:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    49d8:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    49dc:	4313      	orrs	r3, r2
    49de:	f47f af7b 	bne.w	48d8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    49e2:	2401      	movs	r4, #1
    while (mask)
    49e4:	b916      	cbnz	r6, 49ec <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    49e6:	b007      	add	sp, #28
    49e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    49ec:	fa96 f3a6 	rbit	r3, r6
    49f0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    49f4:	fa04 f203 	lsl.w	r2, r4, r3
    49f8:	009b      	lsls	r3, r3, #2
    49fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    49fe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4a02:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4a06:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4a0a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4a0e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4a12:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4a16:	f7ff fcc3 	bl	43a0 <call_handler>
    4a1a:	e7e3      	b.n	49e4 <nrfx_gpiote_irq_handler+0x160>
    4a1c:	40006100 	.word	0x40006100
    4a20:	40006000 	.word	0x40006000
    4a24:	40006120 	.word	0x40006120
    4a28:	200000f0 	.word	0x200000f0
    4a2c:	50000300 	.word	0x50000300

00004a30 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4a30:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4a32:	4c11      	ldr	r4, [pc, #68]	; (4a78 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4a34:	4a11      	ldr	r2, [pc, #68]	; (4a7c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4a36:	4912      	ldr	r1, [pc, #72]	; (4a80 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4a38:	2303      	movs	r3, #3
    4a3a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4a3c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4a3e:	4b11      	ldr	r3, [pc, #68]	; (4a84 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    4a40:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4a42:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4a48:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4a4a:	2300      	movs	r3, #0
    4a4c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4a4e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4a50:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4a52:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4a54:	4a0c      	ldr	r2, [pc, #48]	; (4a88 <_DoInit+0x58>)
    4a56:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4a58:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4a5a:	2210      	movs	r2, #16
    4a5c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4a5e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4a60:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4a62:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4a64:	f002 fb95 	bl	7192 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    4a68:	4908      	ldr	r1, [pc, #32]	; (4a8c <_DoInit+0x5c>)
    4a6a:	4620      	mov	r0, r4
    4a6c:	f002 fb91 	bl	7192 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    4a70:	2320      	movs	r3, #32
    4a72:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    4a74:	bd10      	pop	{r4, pc}
    4a76:	bf00      	nop
    4a78:	20000ec0 	.word	0x20000ec0
    4a7c:	00007e9a 	.word	0x00007e9a
    4a80:	00007ea3 	.word	0x00007ea3
    4a84:	2000119f 	.word	0x2000119f
    4a88:	2000118f 	.word	0x2000118f
    4a8c:	00007ea7 	.word	0x00007ea7

00004a90 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    4a94:	4f23      	ldr	r7, [pc, #140]	; (4b24 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    4a96:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4a9a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    4a9c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4aa0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    4aa2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    4aa4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4aa6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4aa8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4aaa:	d834      	bhi.n	4b16 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4aac:	f8d2 a020 	ldr.w	sl, [r2, #32]
    4ab0:	ebaa 0905 	sub.w	r9, sl, r5
    4ab4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    4ab8:	4294      	cmp	r4, r2
    4aba:	d811      	bhi.n	4ae0 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4abc:	f04f 0918 	mov.w	r9, #24
    4ac0:	fb06 9309 	mla	r3, r6, r9, r9
    4ac4:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4ac6:	4622      	mov	r2, r4
    4ac8:	6858      	ldr	r0, [r3, #4]
    4aca:	4641      	mov	r1, r8
    4acc:	4428      	add	r0, r5
    4ace:	f002 fb37 	bl	7140 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    4ad2:	fb09 7606 	mla	r6, r9, r6, r7
    4ad6:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    4ad8:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    4ada:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    4adc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    4ae0:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    4ae2:	429c      	cmp	r4, r3
    4ae4:	d81b      	bhi.n	4b1e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4ae6:	fb00 bb0b 	mla	fp, r0, fp, fp
    4aea:	44bb      	add	fp, r7
    4aec:	464a      	mov	r2, r9
    4aee:	f8db 0004 	ldr.w	r0, [fp, #4]
    4af2:	442c      	add	r4, r5
    4af4:	4428      	add	r0, r5
    4af6:	f002 fb23 	bl	7140 <memcpy>
      if (NumBytes) {
    4afa:	ebb4 040a 	subs.w	r4, r4, sl
    4afe:	d006      	beq.n	4b0e <SEGGER_RTT_WriteSkipNoLock+0x7e>
    4b00:	f8db 0004 	ldr.w	r0, [fp, #4]
    4b04:	4622      	mov	r2, r4
    4b06:	eb08 0109 	add.w	r1, r8, r9
    4b0a:	f002 fb19 	bl	7140 <memcpy>
      pRing->WrOff = NumBytes;
    4b0e:	2018      	movs	r0, #24
    4b10:	fb00 7606 	mla	r6, r0, r6, r7
    4b14:	e7e0      	b.n	4ad8 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    4b16:	3b01      	subs	r3, #1
    4b18:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    4b1a:	42a3      	cmp	r3, r4
    4b1c:	d2ce      	bcs.n	4abc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    4b1e:	2000      	movs	r0, #0
    4b20:	e7dc      	b.n	4adc <SEGGER_RTT_WriteSkipNoLock+0x4c>
    4b22:	bf00      	nop
    4b24:	20000ec0 	.word	0x20000ec0

00004b28 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4b28:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    4b2a:	4b16      	ldr	r3, [pc, #88]	; (4b84 <SEGGER_RTT_WriteNoLock+0x5c>)
    4b2c:	2418      	movs	r4, #24
    4b2e:	fb00 4504 	mla	r5, r0, r4, r4
    4b32:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    4b34:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4b38:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    4b3a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4b3c:	2c01      	cmp	r4, #1
    4b3e:	d00e      	beq.n	4b5e <SEGGER_RTT_WriteNoLock+0x36>
    4b40:	2c02      	cmp	r4, #2
    4b42:	d018      	beq.n	4b76 <SEGGER_RTT_WriteNoLock+0x4e>
    4b44:	b9e4      	cbnz	r4, 4b80 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    4b46:	4628      	mov	r0, r5
    4b48:	f002 f8ea 	bl	6d20 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    4b4c:	4286      	cmp	r6, r0
    4b4e:	d804      	bhi.n	4b5a <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    4b50:	4632      	mov	r2, r6
    4b52:	4628      	mov	r0, r5
    4b54:	f002 f8ed 	bl	6d32 <_WriteNoCheck>
    4b58:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    4b5a:	4620      	mov	r0, r4
    4b5c:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    4b5e:	4628      	mov	r0, r5
    4b60:	f002 f8de 	bl	6d20 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    4b64:	4286      	cmp	r6, r0
    4b66:	4634      	mov	r4, r6
    4b68:	bf28      	it	cs
    4b6a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    4b6c:	4622      	mov	r2, r4
    4b6e:	4628      	mov	r0, r5
    4b70:	f002 f8df 	bl	6d32 <_WriteNoCheck>
    break;
    4b74:	e7f1      	b.n	4b5a <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4b76:	4628      	mov	r0, r5
}
    4b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4b7c:	f002 b8f6 	b.w	6d6c <_WriteBlocking>
  switch (pRing->Flags) {
    4b80:	2400      	movs	r4, #0
  return Status;
    4b82:	e7ea      	b.n	4b5a <SEGGER_RTT_WriteNoLock+0x32>
    4b84:	20000ec0 	.word	0x20000ec0

00004b88 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    4b88:	4b03      	ldr	r3, [pc, #12]	; (4b98 <SEGGER_RTT_HasDataUp+0x10>)
    4b8a:	2218      	movs	r2, #24
    4b8c:	fb02 3300 	mla	r3, r2, r0, r3
    4b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    4b92:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    4b94:	1a80      	subs	r0, r0, r2
    4b96:	4770      	bx	lr
    4b98:	20000ec0 	.word	0x20000ec0

00004b9c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4b9c:	4b0e      	ldr	r3, [pc, #56]	; (4bd8 <z_sys_init_run_level+0x3c>)
{
    4b9e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4ba0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4ba4:	3001      	adds	r0, #1
    4ba6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4baa:	42a6      	cmp	r6, r4
    4bac:	d800      	bhi.n	4bb0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4bae:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4bb0:	e9d4 3500 	ldrd	r3, r5, [r4]
    4bb4:	4628      	mov	r0, r5
    4bb6:	4798      	blx	r3
		if (dev != NULL) {
    4bb8:	b165      	cbz	r5, 4bd4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4bba:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4bbc:	b130      	cbz	r0, 4bcc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4bbe:	2800      	cmp	r0, #0
    4bc0:	bfb8      	it	lt
    4bc2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4bc4:	28ff      	cmp	r0, #255	; 0xff
    4bc6:	bfa8      	it	ge
    4bc8:	20ff      	movge	r0, #255	; 0xff
    4bca:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4bcc:	785a      	ldrb	r2, [r3, #1]
    4bce:	f042 0201 	orr.w	r2, r2, #1
    4bd2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4bd4:	3408      	adds	r4, #8
    4bd6:	e7e8      	b.n	4baa <z_sys_init_run_level+0xe>
    4bd8:	00007624 	.word	0x00007624

00004bdc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4bdc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4bde:	4605      	mov	r5, r0
    4be0:	b910      	cbnz	r0, 4be8 <z_impl_device_get_binding+0xc>
		return NULL;
    4be2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4be4:	4620      	mov	r0, r4
    4be6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4be8:	7803      	ldrb	r3, [r0, #0]
    4bea:	2b00      	cmp	r3, #0
    4bec:	d0f9      	beq.n	4be2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4bee:	4c0e      	ldr	r4, [pc, #56]	; (4c28 <z_impl_device_get_binding+0x4c>)
    4bf0:	4e0e      	ldr	r6, [pc, #56]	; (4c2c <z_impl_device_get_binding+0x50>)
    4bf2:	42b4      	cmp	r4, r6
    4bf4:	d108      	bne.n	4c08 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    4bf6:	4c0c      	ldr	r4, [pc, #48]	; (4c28 <z_impl_device_get_binding+0x4c>)
    4bf8:	42b4      	cmp	r4, r6
    4bfa:	d0f2      	beq.n	4be2 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4bfc:	4620      	mov	r0, r4
    4bfe:	f002 f8e6 	bl	6dce <z_device_is_ready>
    4c02:	b950      	cbnz	r0, 4c1a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4c04:	3418      	adds	r4, #24
    4c06:	e7f7      	b.n	4bf8 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    4c08:	4620      	mov	r0, r4
    4c0a:	f002 f8e0 	bl	6dce <z_device_is_ready>
    4c0e:	b110      	cbz	r0, 4c16 <z_impl_device_get_binding+0x3a>
    4c10:	6823      	ldr	r3, [r4, #0]
    4c12:	42ab      	cmp	r3, r5
    4c14:	d0e6      	beq.n	4be4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4c16:	3418      	adds	r4, #24
    4c18:	e7eb      	b.n	4bf2 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4c1a:	6821      	ldr	r1, [r4, #0]
    4c1c:	4628      	mov	r0, r5
    4c1e:	f7fb fbdc 	bl	3da <strcmp>
    4c22:	2800      	cmp	r0, #0
    4c24:	d1ee      	bne.n	4c04 <z_impl_device_get_binding+0x28>
    4c26:	e7dd      	b.n	4be4 <z_impl_device_get_binding+0x8>
    4c28:	00007240 	.word	0x00007240
    4c2c:	000072a0 	.word	0x000072a0

00004c30 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c34:	b086      	sub	sp, #24
    4c36:	4605      	mov	r5, r0
    4c38:	af00      	add	r7, sp, #0
    4c3a:	460e      	mov	r6, r1
	__asm__ volatile(
    4c3c:	f04f 0320 	mov.w	r3, #32
    4c40:	f3ef 8811 	mrs	r8, BASEPRI
    4c44:	f383 8812 	msr	BASEPRI_MAX, r3
    4c48:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4c4c:	f000 fe4e 	bl	58ec <z_impl_z_current_get>
    4c50:	2d04      	cmp	r5, #4
    4c52:	bf96      	itet	ls
    4c54:	4b2c      	ldrls	r3, [pc, #176]	; (4d08 <z_fatal_error+0xd8>)
    4c56:	4b2d      	ldrhi	r3, [pc, #180]	; (4d0c <z_fatal_error+0xdc>)
    4c58:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4c5c:	492c      	ldr	r1, [pc, #176]	; (4d10 <z_fatal_error+0xe0>)
    4c5e:	46e9      	mov	r9, sp
    4c60:	b08a      	sub	sp, #40	; 0x28
    4c62:	466a      	mov	r2, sp
    4c64:	f04f 0a00 	mov.w	sl, #0
    4c68:	61d3      	str	r3, [r2, #28]
    4c6a:	2303      	movs	r3, #3
    4c6c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    4c70:	4b28      	ldr	r3, [pc, #160]	; (4d14 <z_fatal_error+0xe4>)
    4c72:	f8c2 a020 	str.w	sl, [r2, #32]
    4c76:	e9c2 1505 	strd	r1, r5, [r2, #20]
    4c7a:	4604      	mov	r4, r0
    4c7c:	f842 3f10 	str.w	r3, [r2, #16]!
    4c80:	4825      	ldr	r0, [pc, #148]	; (4d18 <z_fatal_error+0xe8>)
    4c82:	4653      	mov	r3, sl
    4c84:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    4c88:	f001 fe1e 	bl	68c8 <z_impl_z_log_msg2_static_create>
    4c8c:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4c8e:	b17e      	cbz	r6, 4cb0 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4c90:	69f3      	ldr	r3, [r6, #28]
    4c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4c96:	b15b      	cbz	r3, 4cb0 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    4c98:	4b20      	ldr	r3, [pc, #128]	; (4d1c <z_fatal_error+0xec>)
    4c9a:	617b      	str	r3, [r7, #20]
    4c9c:	2302      	movs	r3, #2
    4c9e:	613b      	str	r3, [r7, #16]
    4ca0:	481d      	ldr	r0, [pc, #116]	; (4d18 <z_fatal_error+0xe8>)
    4ca2:	4653      	mov	r3, sl
    4ca4:	f107 0210 	add.w	r2, r7, #16
    4ca8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4cac:	f001 fe0c 	bl	68c8 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4cb0:	b12c      	cbz	r4, 4cbe <z_fatal_error+0x8e>
    4cb2:	4620      	mov	r0, r4
    4cb4:	f002 f8e7 	bl	6e86 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4cb8:	b108      	cbz	r0, 4cbe <z_fatal_error+0x8e>
    4cba:	7803      	ldrb	r3, [r0, #0]
    4cbc:	b903      	cbnz	r3, 4cc0 <z_fatal_error+0x90>
		thread_name = "unknown";
    4cbe:	4818      	ldr	r0, [pc, #96]	; (4d20 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4cc0:	4b18      	ldr	r3, [pc, #96]	; (4d24 <z_fatal_error+0xf4>)
    4cc2:	46e9      	mov	r9, sp
    4cc4:	b08a      	sub	sp, #40	; 0x28
    4cc6:	466a      	mov	r2, sp
    4cc8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4ccc:	2303      	movs	r3, #3
    4cce:	f882 3020 	strb.w	r3, [r2, #32]
    4cd2:	4b15      	ldr	r3, [pc, #84]	; (4d28 <z_fatal_error+0xf8>)
    4cd4:	61d0      	str	r0, [r2, #28]
    4cd6:	f842 3f10 	str.w	r3, [r2, #16]!
    4cda:	2300      	movs	r3, #0
    4cdc:	480e      	ldr	r0, [pc, #56]	; (4d18 <z_fatal_error+0xe8>)
    4cde:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    4ce2:	f001 fdf1 	bl	68c8 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4ce6:	4631      	mov	r1, r6
    4ce8:	46cd      	mov	sp, r9
    4cea:	4628      	mov	r0, r5
    4cec:	f7ff f950 	bl	3f90 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4cf0:	f388 8811 	msr	BASEPRI, r8
    4cf4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4cf8:	4620      	mov	r0, r4
    4cfa:	f7fe f8cb 	bl	2e94 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4cfe:	3718      	adds	r7, #24
    4d00:	46bd      	mov	sp, r7
    4d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d06:	bf00      	nop
    4d08:	0000763c 	.word	0x0000763c
    4d0c:	00007eae 	.word	0x00007eae
    4d10:	00007ec4 	.word	0x00007ec4
    4d14:	01000005 	.word	0x01000005
    4d18:	00007470 	.word	0x00007470
    4d1c:	00007eec 	.word	0x00007eec
    4d20:	00007ebc 	.word	0x00007ebc
    4d24:	00007f0d 	.word	0x00007f0d
    4d28:	01000004 	.word	0x01000004

00004d2c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4d2c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4d2e:	4b0b      	ldr	r3, [pc, #44]	; (4d5c <bg_thread_main+0x30>)
    4d30:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4d32:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4d34:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4d36:	f7ff ff31 	bl	4b9c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4d3a:	f001 f819 	bl	5d70 <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    4d3e:	f001 fe08 	bl	6952 <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4d42:	2003      	movs	r0, #3
    4d44:	f7ff ff2a 	bl	4b9c <z_sys_init_run_level>

	z_init_static_threads();
    4d48:	f000 f964 	bl	5014 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4d4c:	f7fb fb58 	bl	400 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4d50:	4a03      	ldr	r2, [pc, #12]	; (4d60 <bg_thread_main+0x34>)
    4d52:	7b13      	ldrb	r3, [r2, #12]
    4d54:	f023 0301 	bic.w	r3, r3, #1
    4d58:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4d5a:	bd08      	pop	{r3, pc}
    4d5c:	2000159f 	.word	0x2000159f
    4d60:	200007b8 	.word	0x200007b8

00004d64 <z_bss_zero>:
{
    4d64:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4d66:	4803      	ldr	r0, [pc, #12]	; (4d74 <z_bss_zero+0x10>)
    4d68:	4a03      	ldr	r2, [pc, #12]	; (4d78 <z_bss_zero+0x14>)
    4d6a:	2100      	movs	r1, #0
    4d6c:	1a12      	subs	r2, r2, r0
    4d6e:	f002 f838 	bl	6de2 <z_early_memset>
}
    4d72:	bd08      	pop	{r3, pc}
    4d74:	20000260 	.word	0x20000260
    4d78:	200015a4 	.word	0x200015a4

00004d7c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4d7c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4d7e:	2300      	movs	r3, #0
{
    4d80:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4d82:	2201      	movs	r2, #1
    4d84:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4d88:	4e11      	ldr	r6, [pc, #68]	; (4dd0 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4d8a:	4d12      	ldr	r5, [pc, #72]	; (4dd4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    4d8c:	9301      	str	r3, [sp, #4]
    4d8e:	220f      	movs	r2, #15
    4d90:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4d94:	4910      	ldr	r1, [pc, #64]	; (4dd8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4d96:	2318      	movs	r3, #24
    4d98:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4d9c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
    4da0:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
    4da4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4da6:	fb02 1100 	mla	r1, r2, r0, r1
    4daa:	4b0c      	ldr	r3, [pc, #48]	; (4ddc <z_init_cpu+0x60>)
    4dac:	9500      	str	r5, [sp, #0]
    4dae:	4630      	mov	r0, r6
    4db0:	f000 f8d4 	bl	4f5c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4db4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4db6:	480a      	ldr	r0, [pc, #40]	; (4de0 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
    4db8:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4dba:	3401      	adds	r4, #1
    4dbc:	f023 0304 	bic.w	r3, r3, #4
    4dc0:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
    4dc4:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4dc6:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    4dc8:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4dca:	b006      	add	sp, #24
    4dcc:	bd70      	pop	{r4, r5, r6, pc}
    4dce:	bf00      	nop
    4dd0:	20000738 	.word	0x20000738
    4dd4:	20000f68 	.word	0x20000f68
    4dd8:	20001ca8 	.word	0x20001ca8
    4ddc:	000050cd 	.word	0x000050cd
    4de0:	20001de8 	.word	0x20001de8

00004de4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4de4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4de6:	4b2e      	ldr	r3, [pc, #184]	; (4ea0 <z_cstart+0xbc>)
    4de8:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4dea:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4dee:	4d2d      	ldr	r5, [pc, #180]	; (4ea4 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    4df0:	4e2d      	ldr	r6, [pc, #180]	; (4ea8 <z_cstart+0xc4>)
    4df2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4df4:	4f2d      	ldr	r7, [pc, #180]	; (4eac <z_cstart+0xc8>)
    4df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4dfa:	2400      	movs	r4, #0
    4dfc:	616b      	str	r3, [r5, #20]
    4dfe:	23e0      	movs	r3, #224	; 0xe0
    4e00:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4e04:	77ec      	strb	r4, [r5, #31]
    4e06:	762c      	strb	r4, [r5, #24]
    4e08:	766c      	strb	r4, [r5, #25]
    4e0a:	76ac      	strb	r4, [r5, #26]
    4e0c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4e10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4e12:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4e16:	626b      	str	r3, [r5, #36]	; 0x24
    4e18:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4e1c:	f7fd ffae 	bl	2d7c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4e20:	f7fd fb72 	bl	2508 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e28:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4e2a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4e2c:	f7fe f8d8 	bl	2fe0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4e30:	f7fe f846 	bl	2ec0 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    4e34:	f7fc fd18 	bl	1868 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4e38:	f240 1301 	movw	r3, #257	; 0x101
    4e3c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4e40:	ab06      	add	r3, sp, #24
    4e42:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4e44:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4e48:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4e4a:	f001 ffbf 	bl	6dcc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4e4e:	4620      	mov	r0, r4
    4e50:	f7ff fea4 	bl	4b9c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4e54:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4e56:	4d16      	ldr	r5, [pc, #88]	; (4eb0 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4e58:	f7ff fea0 	bl	4b9c <z_sys_init_run_level>
	z_sched_init();
    4e5c:	f000 fc98 	bl	5790 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4e60:	4b14      	ldr	r3, [pc, #80]	; (4eb4 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    4e62:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4e64:	9305      	str	r3, [sp, #20]
    4e66:	2301      	movs	r3, #1
    4e68:	4913      	ldr	r1, [pc, #76]	; (4eb8 <z_cstart+0xd4>)
    4e6a:	9400      	str	r4, [sp, #0]
    4e6c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4e74:	463b      	mov	r3, r7
    4e76:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4e7a:	4628      	mov	r0, r5
    4e7c:	f000 f86e 	bl	4f5c <z_setup_new_thread>
    4e80:	7b6a      	ldrb	r2, [r5, #13]
    4e82:	4606      	mov	r6, r0
    4e84:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4e88:	4628      	mov	r0, r5
    4e8a:	736a      	strb	r2, [r5, #13]
    4e8c:	f002 f85d 	bl	6f4a <z_ready_thread>
	z_init_cpu(0);
    4e90:	4620      	mov	r0, r4
    4e92:	f7ff ff73 	bl	4d7c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4e96:	463a      	mov	r2, r7
    4e98:	4631      	mov	r1, r6
    4e9a:	4628      	mov	r0, r5
    4e9c:	f7fd fc6e 	bl	277c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4ea0:	200025e8 	.word	0x200025e8
    4ea4:	e000ed00 	.word	0xe000ed00
    4ea8:	20000f68 	.word	0x20000f68
    4eac:	00004d2d 	.word	0x00004d2d
    4eb0:	200007b8 	.word	0x200007b8
    4eb4:	00007f6f 	.word	0x00007f6f
    4eb8:	200018a8 	.word	0x200018a8

00004ebc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4ebc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4ebe:	4b0e      	ldr	r3, [pc, #56]	; (4ef8 <init_mem_slab_module+0x3c>)
    4ec0:	4c0e      	ldr	r4, [pc, #56]	; (4efc <init_mem_slab_module+0x40>)
    4ec2:	42a3      	cmp	r3, r4
    4ec4:	d301      	bcc.n	4eca <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4ec6:	2000      	movs	r0, #0
	return rc;
}
    4ec8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4eca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    4ece:	ea41 0200 	orr.w	r2, r1, r0
    4ed2:	f012 0203 	ands.w	r2, r2, #3
    4ed6:	d10b      	bne.n	4ef0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4ed8:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
    4eda:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4edc:	42aa      	cmp	r2, r5
    4ede:	d101      	bne.n	4ee4 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4ee0:	3320      	adds	r3, #32
    4ee2:	e7ee      	b.n	4ec2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4ee4:	699e      	ldr	r6, [r3, #24]
    4ee6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4ee8:	3201      	adds	r2, #1
		slab->free_list = p;
    4eea:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
    4eec:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    4eee:	e7f5      	b.n	4edc <init_mem_slab_module+0x20>
	return rc;
    4ef0:	f06f 0015 	mvn.w	r0, #21
    4ef4:	e7e8      	b.n	4ec8 <init_mem_slab_module+0xc>
    4ef6:	bf00      	nop
    4ef8:	200001e8 	.word	0x200001e8
    4efc:	200001e8 	.word	0x200001e8

00004f00 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4f02:	460c      	mov	r4, r1
	__asm__ volatile(
    4f04:	f04f 0520 	mov.w	r5, #32
    4f08:	f3ef 8111 	mrs	r1, BASEPRI
    4f0c:	f385 8812 	msr	BASEPRI_MAX, r5
    4f10:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4f14:	6985      	ldr	r5, [r0, #24]
    4f16:	b15d      	cbz	r5, 4f30 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    4f18:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4f1a:	682b      	ldr	r3, [r5, #0]
    4f1c:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    4f1e:	69c3      	ldr	r3, [r0, #28]
    4f20:	3301      	adds	r3, #1
    4f22:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4f24:	2000      	movs	r0, #0
	__asm__ volatile(
    4f26:	f381 8811 	msr	BASEPRI, r1
    4f2a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4f2e:	e011      	b.n	4f54 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4f30:	ea52 0c03 	orrs.w	ip, r2, r3
    4f34:	d103      	bne.n	4f3e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    4f36:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    4f38:	f06f 000b 	mvn.w	r0, #11
    4f3c:	e7f3      	b.n	4f26 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4f3e:	e9cd 2300 	strd	r2, r3, [sp]
    4f42:	4602      	mov	r2, r0
    4f44:	3008      	adds	r0, #8
    4f46:	f000 fb79 	bl	563c <z_pend_curr>
		if (result == 0) {
    4f4a:	b918      	cbnz	r0, 4f54 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    4f4c:	4b02      	ldr	r3, [pc, #8]	; (4f58 <k_mem_slab_alloc+0x58>)
    4f4e:	689b      	ldr	r3, [r3, #8]
    4f50:	695b      	ldr	r3, [r3, #20]
    4f52:	6023      	str	r3, [r4, #0]
}
    4f54:	b003      	add	sp, #12
    4f56:	bd30      	pop	{r4, r5, pc}
    4f58:	20000f68 	.word	0x20000f68

00004f5c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4f5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4f60:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4f62:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4f64:	2604      	movs	r6, #4
    4f66:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4f68:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4f6a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4f6c:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4f70:	1dd6      	adds	r6, r2, #7
    4f72:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4f78:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4f7a:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4f7e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4f82:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4f86:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4f88:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4f8a:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f8c:	9202      	str	r2, [sp, #8]
    4f8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4f90:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4f92:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f98:	9200      	str	r2, [sp, #0]
    4f9a:	4642      	mov	r2, r8
{
    4f9c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f9e:	f7fd fbd1 	bl	2744 <arch_new_thread>
	if (!_current) {
    4fa2:	4b05      	ldr	r3, [pc, #20]	; (4fb8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    4fa4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4fa6:	689b      	ldr	r3, [r3, #8]
    4fa8:	b103      	cbz	r3, 4fac <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    4faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4fac:	6723      	str	r3, [r4, #112]	; 0x70
}
    4fae:	4640      	mov	r0, r8
    4fb0:	b004      	add	sp, #16
    4fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fb6:	bf00      	nop
    4fb8:	20000f68 	.word	0x20000f68

00004fbc <z_impl_k_thread_create>:
{
    4fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fbe:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4fc0:	2700      	movs	r7, #0
    4fc2:	9705      	str	r7, [sp, #20]
    4fc4:	9f10      	ldr	r7, [sp, #64]	; 0x40
    4fc6:	9704      	str	r7, [sp, #16]
    4fc8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    4fca:	9703      	str	r7, [sp, #12]
    4fcc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4fce:	9702      	str	r7, [sp, #8]
{
    4fd0:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4fd4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4fd6:	9701      	str	r7, [sp, #4]
    4fd8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4fda:	9700      	str	r7, [sp, #0]
{
    4fdc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4fde:	f7ff ffbd 	bl	4f5c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4fe2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    4fe6:	bf08      	it	eq
    4fe8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    4fec:	d005      	beq.n	4ffa <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4fee:	ea55 0306 	orrs.w	r3, r5, r6
    4ff2:	d105      	bne.n	5000 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    4ff4:	4620      	mov	r0, r4
    4ff6:	f000 fac5 	bl	5584 <z_sched_start>
}
    4ffa:	4620      	mov	r0, r4
    4ffc:	b007      	add	sp, #28
    4ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5000:	4903      	ldr	r1, [pc, #12]	; (5010 <z_impl_k_thread_create+0x54>)
    5002:	4632      	mov	r2, r6
    5004:	462b      	mov	r3, r5
    5006:	f104 0018 	add.w	r0, r4, #24
    500a:	f000 fd2b 	bl	5a64 <z_add_timeout>
    500e:	e7f4      	b.n	4ffa <z_impl_k_thread_create+0x3e>
    5010:	00006f6b 	.word	0x00006f6b

00005014 <z_init_static_threads>:
{
    5014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5018:	4c29      	ldr	r4, [pc, #164]	; (50c0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    501a:	4d2a      	ldr	r5, [pc, #168]	; (50c4 <z_init_static_threads+0xb0>)
{
    501c:	b087      	sub	sp, #28
    501e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5020:	42ae      	cmp	r6, r5
    5022:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5026:	d30f      	bcc.n	5048 <z_init_static_threads+0x34>
	k_sched_lock();
    5028:	f000 f9c6 	bl	53b8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    502c:	4c24      	ldr	r4, [pc, #144]	; (50c0 <z_init_static_threads+0xac>)
    502e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 50c8 <z_init_static_threads+0xb4>
    5032:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5036:	f240 37e7 	movw	r7, #999	; 0x3e7
    503a:	42ac      	cmp	r4, r5
    503c:	d320      	bcc.n	5080 <z_init_static_threads+0x6c>
}
    503e:	b007      	add	sp, #28
    5040:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5044:	f000 bb88 	b.w	5758 <k_sched_unlock>
		z_setup_new_thread(
    5048:	f854 3c04 	ldr.w	r3, [r4, #-4]
    504c:	9305      	str	r3, [sp, #20]
    504e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5052:	9304      	str	r3, [sp, #16]
    5054:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5058:	9303      	str	r3, [sp, #12]
    505a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    505e:	9302      	str	r3, [sp, #8]
    5060:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5064:	9301      	str	r3, [sp, #4]
    5066:	f854 3c20 	ldr.w	r3, [r4, #-32]
    506a:	9300      	str	r3, [sp, #0]
    506c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5070:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5074:	f7ff ff72 	bl	4f5c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5078:	f854 3c30 	ldr.w	r3, [r4, #-48]
    507c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    507e:	e7ce      	b.n	501e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5080:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5082:	1c5a      	adds	r2, r3, #1
    5084:	d00d      	beq.n	50a2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    5086:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    508a:	2100      	movs	r1, #0
    508c:	4638      	mov	r0, r7
    508e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5092:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5096:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    509a:	d104      	bne.n	50a6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    509c:	4640      	mov	r0, r8
    509e:	f000 fa71 	bl	5584 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    50a2:	3430      	adds	r4, #48	; 0x30
    50a4:	e7c9      	b.n	503a <z_init_static_threads+0x26>
    50a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    50aa:	2300      	movs	r3, #0
    50ac:	f7fb f828 	bl	100 <__aeabi_uldivmod>
    50b0:	4602      	mov	r2, r0
    50b2:	460b      	mov	r3, r1
    50b4:	f108 0018 	add.w	r0, r8, #24
    50b8:	4649      	mov	r1, r9
    50ba:	f000 fcd3 	bl	5a64 <z_add_timeout>
    50be:	e7f0      	b.n	50a2 <z_init_static_threads+0x8e>
    50c0:	200001e8 	.word	0x200001e8
    50c4:	200001e8 	.word	0x200001e8
    50c8:	00006f6b 	.word	0x00006f6b

000050cc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    50cc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    50ce:	4c0b      	ldr	r4, [pc, #44]	; (50fc <idle+0x30>)
	return !z_sys_post_kernel;
    50d0:	4d0b      	ldr	r5, [pc, #44]	; (5100 <idle+0x34>)
	__asm__ volatile(
    50d2:	f04f 0220 	mov.w	r2, #32
    50d6:	f3ef 8311 	mrs	r3, BASEPRI
    50da:	f382 8812 	msr	BASEPRI_MAX, r2
    50de:	f3bf 8f6f 	isb	sy
    50e2:	f001 ffd1 	bl	7088 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    50e6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    50e8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    50ea:	b913      	cbnz	r3, 50f2 <idle+0x26>
	arch_cpu_idle();
    50ec:	f7fd fa12 	bl	2514 <arch_cpu_idle>
}
    50f0:	e7ef      	b.n	50d2 <idle+0x6>
    50f2:	f7fd f865 	bl	21c0 <pm_system_suspend>
    50f6:	2800      	cmp	r0, #0
    50f8:	d1eb      	bne.n	50d2 <idle+0x6>
    50fa:	e7f7      	b.n	50ec <idle+0x20>
    50fc:	20000f68 	.word	0x20000f68
    5100:	2000159f 	.word	0x2000159f

00005104 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5108:	4604      	mov	r4, r0
    510a:	4617      	mov	r7, r2
    510c:	461e      	mov	r6, r3
    510e:	f04f 0320 	mov.w	r3, #32
    5112:	f3ef 8811 	mrs	r8, BASEPRI
    5116:	f383 8812 	msr	BASEPRI_MAX, r3
    511a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    511e:	68c3      	ldr	r3, [r0, #12]
    5120:	4a32      	ldr	r2, [pc, #200]	; (51ec <z_impl_k_mutex_lock+0xe8>)
    5122:	b16b      	cbz	r3, 5140 <z_impl_k_mutex_lock+0x3c>
    5124:	6880      	ldr	r0, [r0, #8]
    5126:	6891      	ldr	r1, [r2, #8]
    5128:	4288      	cmp	r0, r1
    512a:	d019      	beq.n	5160 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    512c:	ea57 0306 	orrs.w	r3, r7, r6
    5130:	d118      	bne.n	5164 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5132:	f388 8811 	msr	BASEPRI, r8
    5136:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    513a:	f06f 000f 	mvn.w	r0, #15
    513e:	e00c      	b.n	515a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    5140:	6891      	ldr	r1, [r2, #8]
    5142:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5146:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5148:	3301      	adds	r3, #1
    514a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    514c:	6893      	ldr	r3, [r2, #8]
    514e:	60a3      	str	r3, [r4, #8]
    5150:	f388 8811 	msr	BASEPRI, r8
    5154:	f3bf 8f6f 	isb	sy
		return 0;
    5158:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    515a:	b002      	add	sp, #8
    515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5160:	6921      	ldr	r1, [r4, #16]
    5162:	e7f0      	b.n	5146 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5164:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5168:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    516c:	4299      	cmp	r1, r3
    516e:	bfa8      	it	ge
    5170:	4619      	movge	r1, r3
    5172:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5176:	4291      	cmp	r1, r2
    5178:	bfb8      	it	lt
    517a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    517c:	428b      	cmp	r3, r1
    517e:	dd2e      	ble.n	51de <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5180:	f001 fe8a 	bl	6e98 <adjust_owner_prio.isra.0>
    5184:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5186:	e9cd 7600 	strd	r7, r6, [sp]
    518a:	4819      	ldr	r0, [pc, #100]	; (51f0 <z_impl_k_mutex_lock+0xec>)
    518c:	4622      	mov	r2, r4
    518e:	4641      	mov	r1, r8
    5190:	f000 fa54 	bl	563c <z_pend_curr>
	if (got_mutex == 0) {
    5194:	2800      	cmp	r0, #0
    5196:	d0e0      	beq.n	515a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    5198:	f04f 0320 	mov.w	r3, #32
    519c:	f3ef 8611 	mrs	r6, BASEPRI
    51a0:	f383 8812 	msr	BASEPRI_MAX, r3
    51a4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    51a8:	6823      	ldr	r3, [r4, #0]
    51aa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51ac:	429c      	cmp	r4, r3
    51ae:	d00a      	beq.n	51c6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    51b0:	b14b      	cbz	r3, 51c6 <z_impl_k_mutex_lock+0xc2>
    51b2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    51b6:	4299      	cmp	r1, r3
    51b8:	bfa8      	it	ge
    51ba:	4619      	movge	r1, r3
    51bc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    51c0:	4299      	cmp	r1, r3
    51c2:	bfb8      	it	lt
    51c4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    51c6:	68a0      	ldr	r0, [r4, #8]
    51c8:	f001 fe66 	bl	6e98 <adjust_owner_prio.isra.0>
    51cc:	b900      	cbnz	r0, 51d0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    51ce:	b145      	cbz	r5, 51e2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    51d0:	4807      	ldr	r0, [pc, #28]	; (51f0 <z_impl_k_mutex_lock+0xec>)
    51d2:	4631      	mov	r1, r6
    51d4:	f000 f8de 	bl	5394 <z_reschedule>
	return -EAGAIN;
    51d8:	f06f 000a 	mvn.w	r0, #10
    51dc:	e7bd      	b.n	515a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    51de:	2500      	movs	r5, #0
    51e0:	e7d1      	b.n	5186 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    51e2:	f386 8811 	msr	BASEPRI, r6
    51e6:	f3bf 8f6f 	isb	sy
    51ea:	e7f5      	b.n	51d8 <z_impl_k_mutex_lock+0xd4>
    51ec:	20000f68 	.word	0x20000f68
    51f0:	200015a0 	.word	0x200015a0

000051f4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    51f4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    51f6:	6883      	ldr	r3, [r0, #8]
{
    51f8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    51fa:	2b00      	cmp	r3, #0
    51fc:	d032      	beq.n	5264 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    51fe:	4a1c      	ldr	r2, [pc, #112]	; (5270 <z_impl_k_mutex_unlock+0x7c>)
    5200:	6892      	ldr	r2, [r2, #8]
    5202:	4293      	cmp	r3, r2
    5204:	d131      	bne.n	526a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5206:	7bda      	ldrb	r2, [r3, #15]
    5208:	3a01      	subs	r2, #1
    520a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    520c:	68c3      	ldr	r3, [r0, #12]
    520e:	2b01      	cmp	r3, #1
    5210:	d905      	bls.n	521e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    5212:	3b01      	subs	r3, #1
    5214:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5216:	f000 fa9f 	bl	5758 <k_sched_unlock>

	return 0;
    521a:	2000      	movs	r0, #0
}
    521c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    521e:	f04f 0320 	mov.w	r3, #32
    5222:	f3ef 8511 	mrs	r5, BASEPRI
    5226:	f383 8812 	msr	BASEPRI_MAX, r3
    522a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    522e:	6901      	ldr	r1, [r0, #16]
    5230:	6880      	ldr	r0, [r0, #8]
    5232:	f001 fe31 	bl	6e98 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5236:	4620      	mov	r0, r4
    5238:	f001 fef8 	bl	702c <z_unpend_first_thread>
	mutex->owner = new_owner;
    523c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    523e:	b158      	cbz	r0, 5258 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    5240:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5244:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5246:	2200      	movs	r2, #0
    5248:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    524a:	f001 fe7e 	bl	6f4a <z_ready_thread>
		z_reschedule(&lock, key);
    524e:	4809      	ldr	r0, [pc, #36]	; (5274 <z_impl_k_mutex_unlock+0x80>)
    5250:	4629      	mov	r1, r5
    5252:	f000 f89f 	bl	5394 <z_reschedule>
    5256:	e7de      	b.n	5216 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5258:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    525a:	f385 8811 	msr	BASEPRI, r5
    525e:	f3bf 8f6f 	isb	sy
    5262:	e7d8      	b.n	5216 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    5264:	f06f 0015 	mvn.w	r0, #21
    5268:	e7d8      	b.n	521c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    526a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    526e:	e7d5      	b.n	521c <z_impl_k_mutex_unlock+0x28>
    5270:	20000f68 	.word	0x20000f68
    5274:	200015a0 	.word	0x200015a0

00005278 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5278:	b538      	push	{r3, r4, r5, lr}
    527a:	4604      	mov	r4, r0
	__asm__ volatile(
    527c:	f04f 0320 	mov.w	r3, #32
    5280:	f3ef 8511 	mrs	r5, BASEPRI
    5284:	f383 8812 	msr	BASEPRI_MAX, r3
    5288:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    528c:	f001 fece 	bl	702c <z_unpend_first_thread>

	if (thread != NULL) {
    5290:	b148      	cbz	r0, 52a6 <z_impl_k_sem_give+0x2e>
    5292:	2200      	movs	r2, #0
    5294:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5296:	f001 fe58 	bl	6f4a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    529a:	4629      	mov	r1, r5
    529c:	4805      	ldr	r0, [pc, #20]	; (52b4 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    529e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    52a2:	f000 b877 	b.w	5394 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    52a6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    52aa:	429a      	cmp	r2, r3
    52ac:	bf18      	it	ne
    52ae:	3301      	addne	r3, #1
    52b0:	60a3      	str	r3, [r4, #8]
}
    52b2:	e7f2      	b.n	529a <z_impl_k_sem_give+0x22>
    52b4:	200015a1 	.word	0x200015a1

000052b8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    52b8:	b513      	push	{r0, r1, r4, lr}
    52ba:	f04f 0420 	mov.w	r4, #32
    52be:	f3ef 8111 	mrs	r1, BASEPRI
    52c2:	f384 8812 	msr	BASEPRI_MAX, r4
    52c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    52ca:	6884      	ldr	r4, [r0, #8]
    52cc:	b144      	cbz	r4, 52e0 <z_impl_k_sem_take+0x28>
		sem->count--;
    52ce:	3c01      	subs	r4, #1
    52d0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    52d2:	f381 8811 	msr	BASEPRI, r1
    52d6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    52da:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    52dc:	b002      	add	sp, #8
    52de:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    52e0:	ea52 0403 	orrs.w	r4, r2, r3
    52e4:	d106      	bne.n	52f4 <z_impl_k_sem_take+0x3c>
    52e6:	f381 8811 	msr	BASEPRI, r1
    52ea:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    52ee:	f06f 000f 	mvn.w	r0, #15
    52f2:	e7f3      	b.n	52dc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    52f4:	e9cd 2300 	strd	r2, r3, [sp]
    52f8:	4602      	mov	r2, r0
    52fa:	4802      	ldr	r0, [pc, #8]	; (5304 <z_impl_k_sem_take+0x4c>)
    52fc:	f000 f99e 	bl	563c <z_pend_curr>
	return ret;
    5300:	e7ec      	b.n	52dc <z_impl_k_sem_take+0x24>
    5302:	bf00      	nop
    5304:	200015a1 	.word	0x200015a1

00005308 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5308:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    530a:	4d07      	ldr	r5, [pc, #28]	; (5328 <z_reset_time_slice+0x20>)
    530c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    530e:	b154      	cbz	r4, 5326 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5310:	f7fe fe34 	bl	3f7c <sys_clock_elapsed>
    5314:	4b05      	ldr	r3, [pc, #20]	; (532c <z_reset_time_slice+0x24>)
    5316:	4404      	add	r4, r0
    5318:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    531a:	6828      	ldr	r0, [r5, #0]
    531c:	2100      	movs	r1, #0
	}
}
    531e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5322:	f001 bec1 	b.w	70a8 <z_set_timeout_expiry>
}
    5326:	bd38      	pop	{r3, r4, r5, pc}
    5328:	20000f98 	.word	0x20000f98
    532c:	20000f68 	.word	0x20000f68

00005330 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5332:	4604      	mov	r4, r0
    5334:	460d      	mov	r5, r1
	__asm__ volatile(
    5336:	f04f 0320 	mov.w	r3, #32
    533a:	f3ef 8711 	mrs	r7, BASEPRI
    533e:	f383 8812 	msr	BASEPRI_MAX, r3
    5342:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5346:	4e10      	ldr	r6, [pc, #64]	; (5388 <k_sched_time_slice_set+0x58>)
    5348:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    534a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    534e:	f240 30e7 	movw	r0, #999	; 0x3e7
    5352:	6131      	str	r1, [r6, #16]
    5354:	2300      	movs	r3, #0
    5356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    535a:	fbe4 010c 	umlal	r0, r1, r4, ip
    535e:	f7fa fecf 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5362:	2c00      	cmp	r4, #0
    5364:	4b09      	ldr	r3, [pc, #36]	; (538c <k_sched_time_slice_set+0x5c>)
    5366:	dc0a      	bgt.n	537e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    5368:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    536a:	4b09      	ldr	r3, [pc, #36]	; (5390 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    536c:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    536e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    5370:	f7ff ffca 	bl	5308 <z_reset_time_slice>
	__asm__ volatile(
    5374:	f387 8811 	msr	BASEPRI, r7
    5378:	f3bf 8f6f 	isb	sy
	}
}
    537c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    537e:	2802      	cmp	r0, #2
    5380:	bfb8      	it	lt
    5382:	2002      	movlt	r0, #2
    5384:	e7f0      	b.n	5368 <k_sched_time_slice_set+0x38>
    5386:	bf00      	nop
    5388:	20000f68 	.word	0x20000f68
    538c:	20000f98 	.word	0x20000f98
    5390:	20000f94 	.word	0x20000f94

00005394 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5394:	b949      	cbnz	r1, 53aa <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5396:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    539a:	b930      	cbnz	r0, 53aa <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    539c:	4b05      	ldr	r3, [pc, #20]	; (53b4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    539e:	69da      	ldr	r2, [r3, #28]
    53a0:	689b      	ldr	r3, [r3, #8]
    53a2:	429a      	cmp	r2, r3
    53a4:	d001      	beq.n	53aa <z_reschedule+0x16>
	ret = arch_swap(key);
    53a6:	f7fd b97f 	b.w	26a8 <arch_swap>
    53aa:	f381 8811 	msr	BASEPRI, r1
    53ae:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    53b2:	4770      	bx	lr
    53b4:	20000f68 	.word	0x20000f68

000053b8 <k_sched_lock>:
	__asm__ volatile(
    53b8:	f04f 0320 	mov.w	r3, #32
    53bc:	f3ef 8111 	mrs	r1, BASEPRI
    53c0:	f383 8812 	msr	BASEPRI_MAX, r3
    53c4:	f3bf 8f6f 	isb	sy
    53c8:	4b04      	ldr	r3, [pc, #16]	; (53dc <k_sched_lock+0x24>)
    53ca:	689a      	ldr	r2, [r3, #8]
    53cc:	7bd3      	ldrb	r3, [r2, #15]
    53ce:	3b01      	subs	r3, #1
    53d0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    53d2:	f381 8811 	msr	BASEPRI, r1
    53d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    53da:	4770      	bx	lr
    53dc:	20000f68 	.word	0x20000f68

000053e0 <update_cache>:
{
    53e0:	b538      	push	{r3, r4, r5, lr}
    53e2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    53e4:	480c      	ldr	r0, [pc, #48]	; (5418 <update_cache+0x38>)
    53e6:	4d0d      	ldr	r5, [pc, #52]	; (541c <update_cache+0x3c>)
    53e8:	f001 fda9 	bl	6f3e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    53ec:	4604      	mov	r4, r0
    53ee:	b900      	cbnz	r0, 53f2 <update_cache+0x12>
    53f0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    53f2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    53f4:	b94a      	cbnz	r2, 540a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    53f6:	7b5a      	ldrb	r2, [r3, #13]
    53f8:	06d2      	lsls	r2, r2, #27
    53fa:	d106      	bne.n	540a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    53fc:	69a2      	ldr	r2, [r4, #24]
    53fe:	b922      	cbnz	r2, 540a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    5400:	89da      	ldrh	r2, [r3, #14]
    5402:	2a7f      	cmp	r2, #127	; 0x7f
    5404:	d901      	bls.n	540a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    5406:	61eb      	str	r3, [r5, #28]
}
    5408:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    540a:	429c      	cmp	r4, r3
    540c:	d002      	beq.n	5414 <update_cache+0x34>
			z_reset_time_slice(thread);
    540e:	4620      	mov	r0, r4
    5410:	f7ff ff7a 	bl	5308 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5414:	61ec      	str	r4, [r5, #28]
}
    5416:	e7f7      	b.n	5408 <update_cache+0x28>
    5418:	20000f88 	.word	0x20000f88
    541c:	20000f68 	.word	0x20000f68

00005420 <move_thread_to_end_of_prio_q>:
{
    5420:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5422:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5426:	7b43      	ldrb	r3, [r0, #13]
    5428:	2a00      	cmp	r2, #0
{
    542a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    542c:	da04      	bge.n	5438 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    542e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5432:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5434:	f001 fd4b 	bl	6ece <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5438:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    543a:	4a15      	ldr	r2, [pc, #84]	; (5490 <move_thread_to_end_of_prio_q+0x70>)
    543c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5440:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5442:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5446:	f102 0520 	add.w	r5, r2, #32
    544a:	42ab      	cmp	r3, r5
    544c:	d01b      	beq.n	5486 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    544e:	b1d3      	cbz	r3, 5486 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    5450:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5454:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5458:	4286      	cmp	r6, r0
    545a:	d00f      	beq.n	547c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    545c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    545e:	2800      	cmp	r0, #0
    5460:	dd0c      	ble.n	547c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5462:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5464:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5468:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    546a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    546c:	6890      	ldr	r0, [r2, #8]
    546e:	1a43      	subs	r3, r0, r1
    5470:	4258      	negs	r0, r3
}
    5472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5476:	4158      	adcs	r0, r3
    5478:	f7ff bfb2 	b.w	53e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    547c:	42a3      	cmp	r3, r4
    547e:	d002      	beq.n	5486 <move_thread_to_end_of_prio_q+0x66>
    5480:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5482:	2b00      	cmp	r3, #0
    5484:	d1e6      	bne.n	5454 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    5486:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    548a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    548c:	6251      	str	r1, [r2, #36]	; 0x24
}
    548e:	e7ed      	b.n	546c <move_thread_to_end_of_prio_q+0x4c>
    5490:	20000f68 	.word	0x20000f68

00005494 <z_time_slice>:
{
    5494:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5496:	f04f 0320 	mov.w	r3, #32
    549a:	f3ef 8511 	mrs	r5, BASEPRI
    549e:	f383 8812 	msr	BASEPRI_MAX, r3
    54a2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    54a6:	4b17      	ldr	r3, [pc, #92]	; (5504 <z_time_slice+0x70>)
    54a8:	4a17      	ldr	r2, [pc, #92]	; (5508 <z_time_slice+0x74>)
    54aa:	689c      	ldr	r4, [r3, #8]
    54ac:	6811      	ldr	r1, [r2, #0]
    54ae:	428c      	cmp	r4, r1
    54b0:	d107      	bne.n	54c2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    54b2:	4620      	mov	r0, r4
    54b4:	f7ff ff28 	bl	5308 <z_reset_time_slice>
	__asm__ volatile(
    54b8:	f385 8811 	msr	BASEPRI, r5
    54bc:	f3bf 8f6f 	isb	sy
}
    54c0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    54c2:	2100      	movs	r1, #0
    54c4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    54c6:	4a11      	ldr	r2, [pc, #68]	; (550c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    54c8:	6812      	ldr	r2, [r2, #0]
    54ca:	b1c2      	cbz	r2, 54fe <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    54cc:	89e2      	ldrh	r2, [r4, #14]
    54ce:	2a7f      	cmp	r2, #127	; 0x7f
    54d0:	d815      	bhi.n	54fe <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    54d2:	7b62      	ldrb	r2, [r4, #13]
    54d4:	06d2      	lsls	r2, r2, #27
    54d6:	d112      	bne.n	54fe <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    54d8:	4a0d      	ldr	r2, [pc, #52]	; (5510 <z_time_slice+0x7c>)
    54da:	f994 100e 	ldrsb.w	r1, [r4, #14]
    54de:	6812      	ldr	r2, [r2, #0]
    54e0:	4291      	cmp	r1, r2
    54e2:	db0c      	blt.n	54fe <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    54e4:	4a0b      	ldr	r2, [pc, #44]	; (5514 <z_time_slice+0x80>)
    54e6:	4294      	cmp	r4, r2
    54e8:	d009      	beq.n	54fe <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    54ea:	691a      	ldr	r2, [r3, #16]
    54ec:	4282      	cmp	r2, r0
    54ee:	dc03      	bgt.n	54f8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    54f0:	4620      	mov	r0, r4
    54f2:	f7ff ff95 	bl	5420 <move_thread_to_end_of_prio_q>
    54f6:	e7dc      	b.n	54b2 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    54f8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    54fa:	611a      	str	r2, [r3, #16]
    54fc:	e7dc      	b.n	54b8 <z_time_slice+0x24>
    54fe:	2200      	movs	r2, #0
    5500:	e7fb      	b.n	54fa <z_time_slice+0x66>
    5502:	bf00      	nop
    5504:	20000f68 	.word	0x20000f68
    5508:	20000f90 	.word	0x20000f90
    550c:	20000f98 	.word	0x20000f98
    5510:	20000f94 	.word	0x20000f94
    5514:	20000738 	.word	0x20000738

00005518 <ready_thread>:
{
    5518:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    551a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    551e:	7b43      	ldrb	r3, [r0, #13]
    5520:	2a00      	cmp	r2, #0
    5522:	db2a      	blt.n	557a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5524:	06da      	lsls	r2, r3, #27
    5526:	d128      	bne.n	557a <ready_thread+0x62>
    5528:	6982      	ldr	r2, [r0, #24]
    552a:	bb32      	cbnz	r2, 557a <ready_thread+0x62>
	return list->head == list;
    552c:	4a14      	ldr	r2, [pc, #80]	; (5580 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    552e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5532:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    5534:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5538:	f102 0520 	add.w	r5, r2, #32
    553c:	42ab      	cmp	r3, r5
    553e:	d017      	beq.n	5570 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5540:	b1b3      	cbz	r3, 5570 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    5542:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5546:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    554a:	428e      	cmp	r6, r1
    554c:	d00b      	beq.n	5566 <ready_thread+0x4e>
		return b2 - b1;
    554e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5550:	2900      	cmp	r1, #0
    5552:	dd08      	ble.n	5566 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    5554:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5556:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    555a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    555c:	6058      	str	r0, [r3, #4]
}
    555e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5560:	2000      	movs	r0, #0
    5562:	f7ff bf3d 	b.w	53e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5566:	42a3      	cmp	r3, r4
    5568:	d002      	beq.n	5570 <ready_thread+0x58>
    556a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    556c:	2b00      	cmp	r3, #0
    556e:	d1ea      	bne.n	5546 <ready_thread+0x2e>
	node->prev = tail;
    5570:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    5574:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5576:	6250      	str	r0, [r2, #36]	; 0x24
}
    5578:	e7f1      	b.n	555e <ready_thread+0x46>
}
    557a:	bc70      	pop	{r4, r5, r6}
    557c:	4770      	bx	lr
    557e:	bf00      	nop
    5580:	20000f68 	.word	0x20000f68

00005584 <z_sched_start>:
{
    5584:	b510      	push	{r4, lr}
	__asm__ volatile(
    5586:	f04f 0220 	mov.w	r2, #32
    558a:	f3ef 8411 	mrs	r4, BASEPRI
    558e:	f382 8812 	msr	BASEPRI_MAX, r2
    5592:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5596:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5598:	0751      	lsls	r1, r2, #29
    559a:	d404      	bmi.n	55a6 <z_sched_start+0x22>
	__asm__ volatile(
    559c:	f384 8811 	msr	BASEPRI, r4
    55a0:	f3bf 8f6f 	isb	sy
}
    55a4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    55a6:	f022 0204 	bic.w	r2, r2, #4
    55aa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    55ac:	f7ff ffb4 	bl	5518 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    55b0:	4621      	mov	r1, r4
    55b2:	4802      	ldr	r0, [pc, #8]	; (55bc <z_sched_start+0x38>)
}
    55b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    55b8:	f7ff beec 	b.w	5394 <z_reschedule>
    55bc:	200015a2 	.word	0x200015a2

000055c0 <unready_thread>:
{
    55c0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    55c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    55c6:	7b43      	ldrb	r3, [r0, #13]
    55c8:	2a00      	cmp	r2, #0
{
    55ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    55cc:	da04      	bge.n	55d8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    55ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    55d2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    55d4:	f001 fc7b 	bl	6ece <sys_dlist_remove>
	update_cache(thread == _current);
    55d8:	4b04      	ldr	r3, [pc, #16]	; (55ec <unready_thread+0x2c>)
    55da:	6898      	ldr	r0, [r3, #8]
    55dc:	1a43      	subs	r3, r0, r1
    55de:	4258      	negs	r0, r3
    55e0:	4158      	adcs	r0, r3
}
    55e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    55e6:	f7ff befb 	b.w	53e0 <update_cache>
    55ea:	bf00      	nop
    55ec:	20000f68 	.word	0x20000f68

000055f0 <pend>:
{
    55f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55f4:	4606      	mov	r6, r0
    55f6:	4615      	mov	r5, r2
    55f8:	461c      	mov	r4, r3
	__asm__ volatile(
    55fa:	f04f 0320 	mov.w	r3, #32
    55fe:	f3ef 8711 	mrs	r7, BASEPRI
    5602:	f383 8812 	msr	BASEPRI_MAX, r3
    5606:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    560a:	f001 fcd0 	bl	6fae <add_to_waitq_locked>
	__asm__ volatile(
    560e:	f387 8811 	msr	BASEPRI, r7
    5612:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5616:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    561a:	bf08      	it	eq
    561c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    5620:	d008      	beq.n	5634 <pend+0x44>
    5622:	462a      	mov	r2, r5
    5624:	4623      	mov	r3, r4
    5626:	f106 0018 	add.w	r0, r6, #24
    562a:	4903      	ldr	r1, [pc, #12]	; (5638 <pend+0x48>)
}
    562c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5630:	f000 ba18 	b.w	5a64 <z_add_timeout>
    5634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5638:	00006f6b 	.word	0x00006f6b

0000563c <z_pend_curr>:
{
    563c:	b510      	push	{r4, lr}
	pending_current = _current;
    563e:	4b07      	ldr	r3, [pc, #28]	; (565c <z_pend_curr+0x20>)
    5640:	6898      	ldr	r0, [r3, #8]
    5642:	4b07      	ldr	r3, [pc, #28]	; (5660 <z_pend_curr+0x24>)
{
    5644:	460c      	mov	r4, r1
	pending_current = _current;
    5646:	6018      	str	r0, [r3, #0]
{
    5648:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    564a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    564e:	f7ff ffcf 	bl	55f0 <pend>
    5652:	4620      	mov	r0, r4
}
    5654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5658:	f7fd b826 	b.w	26a8 <arch_swap>
    565c:	20000f68 	.word	0x20000f68
    5660:	20000f90 	.word	0x20000f90

00005664 <z_set_prio>:
{
    5664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5666:	4604      	mov	r4, r0
	__asm__ volatile(
    5668:	f04f 0320 	mov.w	r3, #32
    566c:	f3ef 8611 	mrs	r6, BASEPRI
    5670:	f383 8812 	msr	BASEPRI_MAX, r3
    5674:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5678:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    567a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    567c:	b249      	sxtb	r1, r1
    567e:	d133      	bne.n	56e8 <z_set_prio+0x84>
		if (need_sched) {
    5680:	6982      	ldr	r2, [r0, #24]
    5682:	bb8a      	cbnz	r2, 56e8 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5688:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    568a:	f001 fc20 	bl	6ece <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    568e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5690:	4a17      	ldr	r2, [pc, #92]	; (56f0 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    5692:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5694:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5698:	7343      	strb	r3, [r0, #13]
    569a:	4610      	mov	r0, r2
    569c:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56a0:	4283      	cmp	r3, r0
    56a2:	d01b      	beq.n	56dc <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    56a4:	b1d3      	cbz	r3, 56dc <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    56a6:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    56a8:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    56ac:	42a9      	cmp	r1, r5
    56ae:	d010      	beq.n	56d2 <z_set_prio+0x6e>
		return b2 - b1;
    56b0:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    56b2:	2d00      	cmp	r5, #0
    56b4:	dd0d      	ble.n	56d2 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    56b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    56b8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    56bc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    56be:	605c      	str	r4, [r3, #4]
			update_cache(1);
    56c0:	2001      	movs	r0, #1
    56c2:	f7ff fe8d 	bl	53e0 <update_cache>
    56c6:	2001      	movs	r0, #1
	__asm__ volatile(
    56c8:	f386 8811 	msr	BASEPRI, r6
    56cc:	f3bf 8f6f 	isb	sy
}
    56d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    56d2:	42bb      	cmp	r3, r7
    56d4:	d002      	beq.n	56dc <z_set_prio+0x78>
    56d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    56d8:	2b00      	cmp	r3, #0
    56da:	d1e5      	bne.n	56a8 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    56dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    56de:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    56e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    56e4:	6254      	str	r4, [r2, #36]	; 0x24
}
    56e6:	e7eb      	b.n	56c0 <z_set_prio+0x5c>
			thread->base.prio = prio;
    56e8:	73a1      	strb	r1, [r4, #14]
    56ea:	2000      	movs	r0, #0
    56ec:	e7ec      	b.n	56c8 <z_set_prio+0x64>
    56ee:	bf00      	nop
    56f0:	20000f68 	.word	0x20000f68

000056f4 <z_impl_k_thread_suspend>:
{
    56f4:	b570      	push	{r4, r5, r6, lr}
    56f6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    56f8:	3018      	adds	r0, #24
    56fa:	f001 fcaf 	bl	705c <z_abort_timeout>
	__asm__ volatile(
    56fe:	f04f 0320 	mov.w	r3, #32
    5702:	f3ef 8611 	mrs	r6, BASEPRI
    5706:	f383 8812 	msr	BASEPRI_MAX, r3
    570a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    570e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5712:	7b63      	ldrb	r3, [r4, #13]
    5714:	2a00      	cmp	r2, #0
    5716:	da05      	bge.n	5724 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    571c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    571e:	4620      	mov	r0, r4
    5720:	f001 fbd5 	bl	6ece <sys_dlist_remove>
		update_cache(thread == _current);
    5724:	4d0b      	ldr	r5, [pc, #44]	; (5754 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5726:	7b63      	ldrb	r3, [r4, #13]
    5728:	68a8      	ldr	r0, [r5, #8]
    572a:	f043 0310 	orr.w	r3, r3, #16
    572e:	7363      	strb	r3, [r4, #13]
    5730:	1b03      	subs	r3, r0, r4
    5732:	4258      	negs	r0, r3
    5734:	4158      	adcs	r0, r3
    5736:	f7ff fe53 	bl	53e0 <update_cache>
	__asm__ volatile(
    573a:	f386 8811 	msr	BASEPRI, r6
    573e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5742:	68ab      	ldr	r3, [r5, #8]
    5744:	42a3      	cmp	r3, r4
    5746:	d103      	bne.n	5750 <z_impl_k_thread_suspend+0x5c>
}
    5748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    574c:	f001 bbed 	b.w	6f2a <z_reschedule_unlocked>
}
    5750:	bd70      	pop	{r4, r5, r6, pc}
    5752:	bf00      	nop
    5754:	20000f68 	.word	0x20000f68

00005758 <k_sched_unlock>:
{
    5758:	b510      	push	{r4, lr}
	__asm__ volatile(
    575a:	f04f 0320 	mov.w	r3, #32
    575e:	f3ef 8411 	mrs	r4, BASEPRI
    5762:	f383 8812 	msr	BASEPRI_MAX, r3
    5766:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    576a:	4b08      	ldr	r3, [pc, #32]	; (578c <k_sched_unlock+0x34>)
    576c:	689a      	ldr	r2, [r3, #8]
    576e:	7bd3      	ldrb	r3, [r2, #15]
    5770:	3301      	adds	r3, #1
    5772:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5774:	2000      	movs	r0, #0
    5776:	f7ff fe33 	bl	53e0 <update_cache>
	__asm__ volatile(
    577a:	f384 8811 	msr	BASEPRI, r4
    577e:	f3bf 8f6f 	isb	sy
}
    5782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5786:	f001 bbd0 	b.w	6f2a <z_reschedule_unlocked>
    578a:	bf00      	nop
    578c:	20000f68 	.word	0x20000f68

00005790 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5790:	4b04      	ldr	r3, [pc, #16]	; (57a4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5792:	2100      	movs	r1, #0
    5794:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5798:	e9c3 2208 	strd	r2, r2, [r3, #32]
    579c:	4608      	mov	r0, r1
    579e:	f7ff bdc7 	b.w	5330 <k_sched_time_slice_set>
    57a2:	bf00      	nop
    57a4:	20000f68 	.word	0x20000f68

000057a8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    57a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    57aa:	f04f 0320 	mov.w	r3, #32
    57ae:	f3ef 8511 	mrs	r5, BASEPRI
    57b2:	f383 8812 	msr	BASEPRI_MAX, r3
    57b6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    57ba:	491a      	ldr	r1, [pc, #104]	; (5824 <z_impl_k_yield+0x7c>)
    57bc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    57be:	7b43      	ldrb	r3, [r0, #13]
    57c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    57c4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    57c6:	f001 fb82 	bl	6ece <sys_dlist_remove>
	}
	queue_thread(_current);
    57ca:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    57cc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    57ce:	4608      	mov	r0, r1
    57d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    57d4:	735a      	strb	r2, [r3, #13]
    57d6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57da:	4282      	cmp	r2, r0
    57dc:	d01c      	beq.n	5818 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    57de:	b1da      	cbz	r2, 5818 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    57e0:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    57e2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    57e6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    57ea:	42a6      	cmp	r6, r4
    57ec:	d00f      	beq.n	580e <z_impl_k_yield+0x66>
		return b2 - b1;
    57ee:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    57f0:	2c00      	cmp	r4, #0
    57f2:	dd0c      	ble.n	580e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    57f4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    57f6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    57fa:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    57fc:	6053      	str	r3, [r2, #4]
	update_cache(1);
    57fe:	2001      	movs	r0, #1
    5800:	f7ff fdee 	bl	53e0 <update_cache>
    5804:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5806:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    580a:	f7fc bf4d 	b.w	26a8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    580e:	42ba      	cmp	r2, r7
    5810:	d002      	beq.n	5818 <z_impl_k_yield+0x70>
    5812:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5814:	2a00      	cmp	r2, #0
    5816:	d1e6      	bne.n	57e6 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5818:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    581a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    581e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5820:	624b      	str	r3, [r1, #36]	; 0x24
}
    5822:	e7ec      	b.n	57fe <z_impl_k_yield+0x56>
    5824:	20000f68 	.word	0x20000f68

00005828 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5828:	ea50 0301 	orrs.w	r3, r0, r1
{
    582c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5830:	4605      	mov	r5, r0
    5832:	460e      	mov	r6, r1
	if (ticks == 0) {
    5834:	d103      	bne.n	583e <z_tick_sleep+0x16>
	z_impl_k_yield();
    5836:	f7ff ffb7 	bl	57a8 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    583a:	2000      	movs	r0, #0
    583c:	e033      	b.n	58a6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    583e:	f06f 0401 	mvn.w	r4, #1
    5842:	1a24      	subs	r4, r4, r0
    5844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5848:	eb63 0301 	sbc.w	r3, r3, r1
    584c:	2c01      	cmp	r4, #1
    584e:	f173 0300 	sbcs.w	r3, r3, #0
    5852:	da02      	bge.n	585a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5854:	f001 fc42 	bl	70dc <sys_clock_tick_get_32>
    5858:	1944      	adds	r4, r0, r5
    585a:	f04f 0320 	mov.w	r3, #32
    585e:	f3ef 8811 	mrs	r8, BASEPRI
    5862:	f383 8812 	msr	BASEPRI_MAX, r3
    5866:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    586a:	4f10      	ldr	r7, [pc, #64]	; (58ac <z_tick_sleep+0x84>)
    586c:	4b10      	ldr	r3, [pc, #64]	; (58b0 <z_tick_sleep+0x88>)
    586e:	68b8      	ldr	r0, [r7, #8]
    5870:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5872:	f7ff fea5 	bl	55c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5876:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5878:	490e      	ldr	r1, [pc, #56]	; (58b4 <z_tick_sleep+0x8c>)
    587a:	462a      	mov	r2, r5
    587c:	4633      	mov	r3, r6
    587e:	3018      	adds	r0, #24
    5880:	f000 f8f0 	bl	5a64 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5884:	68ba      	ldr	r2, [r7, #8]
    5886:	7b53      	ldrb	r3, [r2, #13]
    5888:	f043 0310 	orr.w	r3, r3, #16
    588c:	7353      	strb	r3, [r2, #13]
    588e:	4640      	mov	r0, r8
    5890:	f7fc ff0a 	bl	26a8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5894:	f001 fc22 	bl	70dc <sys_clock_tick_get_32>
    5898:	1a20      	subs	r0, r4, r0
    589a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    589e:	2801      	cmp	r0, #1
    58a0:	f173 0300 	sbcs.w	r3, r3, #0
    58a4:	dbc9      	blt.n	583a <z_tick_sleep+0x12>
}
    58a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58aa:	bf00      	nop
    58ac:	20000f68 	.word	0x20000f68
    58b0:	20000f90 	.word	0x20000f90
    58b4:	00006f6b 	.word	0x00006f6b

000058b8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    58b8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    58bc:	bf08      	it	eq
    58be:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    58c2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    58c4:	d106      	bne.n	58d4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    58c6:	4b08      	ldr	r3, [pc, #32]	; (58e8 <z_impl_k_sleep+0x30>)
    58c8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    58ca:	f7ff ff13 	bl	56f4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    58ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    58d2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    58d4:	f7ff ffa8 	bl	5828 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    58d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    58dc:	fb80 0303 	smull	r0, r3, r0, r3
    58e0:	0bc0      	lsrs	r0, r0, #15
    58e2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    58e6:	e7f4      	b.n	58d2 <z_impl_k_sleep+0x1a>
    58e8:	20000f68 	.word	0x20000f68

000058ec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    58ec:	4b01      	ldr	r3, [pc, #4]	; (58f4 <z_impl_z_current_get+0x8>)
    58ee:	6898      	ldr	r0, [r3, #8]
    58f0:	4770      	bx	lr
    58f2:	bf00      	nop
    58f4:	20000f68 	.word	0x20000f68

000058f8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    58f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58fc:	4604      	mov	r4, r0
    58fe:	f04f 0320 	mov.w	r3, #32
    5902:	f3ef 8611 	mrs	r6, BASEPRI
    5906:	f383 8812 	msr	BASEPRI_MAX, r3
    590a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    590e:	7b43      	ldrb	r3, [r0, #13]
    5910:	071a      	lsls	r2, r3, #28
    5912:	d505      	bpl.n	5920 <z_thread_abort+0x28>
	__asm__ volatile(
    5914:	f386 8811 	msr	BASEPRI, r6
    5918:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5920:	f023 0220 	bic.w	r2, r3, #32
    5924:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5928:	09d2      	lsrs	r2, r2, #7
    592a:	d120      	bne.n	596e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    592c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    592e:	68a3      	ldr	r3, [r4, #8]
    5930:	b113      	cbz	r3, 5938 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    5932:	4620      	mov	r0, r4
    5934:	f001 fad3 	bl	6ede <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5938:	f104 0018 	add.w	r0, r4, #24
    593c:	f001 fb8e 	bl	705c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5940:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5944:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5948:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    594a:	42bd      	cmp	r5, r7
    594c:	d000      	beq.n	5950 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    594e:	b9b5      	cbnz	r5, 597e <z_thread_abort+0x86>
		update_cache(1);
    5950:	2001      	movs	r0, #1
    5952:	f7ff fd45 	bl	53e0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5956:	4b10      	ldr	r3, [pc, #64]	; (5998 <z_thread_abort+0xa0>)
    5958:	689b      	ldr	r3, [r3, #8]
    595a:	42a3      	cmp	r3, r4
    595c:	d1da      	bne.n	5914 <z_thread_abort+0x1c>
    595e:	f3ef 8305 	mrs	r3, IPSR
    5962:	2b00      	cmp	r3, #0
    5964:	d1d6      	bne.n	5914 <z_thread_abort+0x1c>
    5966:	4630      	mov	r0, r6
    5968:	f7fc fe9e 	bl	26a8 <arch_swap>
	return ret;
    596c:	e7d2      	b.n	5914 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    596e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5972:	f043 0308 	orr.w	r3, r3, #8
    5976:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5978:	f001 faa9 	bl	6ece <sys_dlist_remove>
}
    597c:	e7d7      	b.n	592e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    597e:	4628      	mov	r0, r5
    5980:	f001 faad 	bl	6ede <unpend_thread_no_timeout>
    5984:	f105 0018 	add.w	r0, r5, #24
    5988:	f001 fb68 	bl	705c <z_abort_timeout>
    598c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5990:	4628      	mov	r0, r5
    5992:	f7ff fdc1 	bl	5518 <ready_thread>
    5996:	e7d7      	b.n	5948 <z_thread_abort+0x50>
    5998:	20000f68 	.word	0x20000f68

0000599c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    599c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    599e:	4806      	ldr	r0, [pc, #24]	; (59b8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    59a0:	4a06      	ldr	r2, [pc, #24]	; (59bc <z_data_copy+0x20>)
    59a2:	4907      	ldr	r1, [pc, #28]	; (59c0 <z_data_copy+0x24>)
    59a4:	1a12      	subs	r2, r2, r0
    59a6:	f001 fa1e 	bl	6de6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    59aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    59ae:	4a05      	ldr	r2, [pc, #20]	; (59c4 <z_data_copy+0x28>)
    59b0:	4905      	ldr	r1, [pc, #20]	; (59c8 <z_data_copy+0x2c>)
    59b2:	4806      	ldr	r0, [pc, #24]	; (59cc <z_data_copy+0x30>)
    59b4:	f001 ba17 	b.w	6de6 <z_early_memcpy>
    59b8:	20000000 	.word	0x20000000
    59bc:	2000025c 	.word	0x2000025c
    59c0:	000080ac 	.word	0x000080ac
    59c4:	00000000 	.word	0x00000000
    59c8:	000080ac 	.word	0x000080ac
    59cc:	20000000 	.word	0x20000000

000059d0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    59d0:	4b03      	ldr	r3, [pc, #12]	; (59e0 <elapsed+0x10>)
    59d2:	681b      	ldr	r3, [r3, #0]
    59d4:	b90b      	cbnz	r3, 59da <elapsed+0xa>
    59d6:	f7fe bad1 	b.w	3f7c <sys_clock_elapsed>
}
    59da:	2000      	movs	r0, #0
    59dc:	4770      	bx	lr
    59de:	bf00      	nop
    59e0:	20000f9c 	.word	0x20000f9c

000059e4 <next_timeout>:
	return list->head == list;
    59e4:	4b10      	ldr	r3, [pc, #64]	; (5a28 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    59e6:	b510      	push	{r4, lr}
    59e8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    59ea:	429c      	cmp	r4, r3
    59ec:	bf08      	it	eq
    59ee:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    59f0:	f7ff ffee 	bl	59d0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    59f4:	b1a4      	cbz	r4, 5a20 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    59f6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    59fa:	1a1b      	subs	r3, r3, r0
    59fc:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    5a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5a04:	f170 0200 	sbcs.w	r2, r0, #0
    5a08:	da0a      	bge.n	5a20 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    5a0a:	2800      	cmp	r0, #0
    5a0c:	bfac      	ite	ge
    5a0e:	4618      	movge	r0, r3
    5a10:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5a12:	4b06      	ldr	r3, [pc, #24]	; (5a2c <next_timeout+0x48>)
    5a14:	691b      	ldr	r3, [r3, #16]
    5a16:	b113      	cbz	r3, 5a1e <next_timeout+0x3a>
    5a18:	4298      	cmp	r0, r3
    5a1a:	bfa8      	it	ge
    5a1c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5a1e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    5a20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5a24:	e7f5      	b.n	5a12 <next_timeout+0x2e>
    5a26:	bf00      	nop
    5a28:	2000016c 	.word	0x2000016c
    5a2c:	20000f68 	.word	0x20000f68

00005a30 <remove_timeout>:
{
    5a30:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5a32:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5a34:	b168      	cbz	r0, 5a52 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5a36:	4a0a      	ldr	r2, [pc, #40]	; (5a60 <remove_timeout+0x30>)
    5a38:	6852      	ldr	r2, [r2, #4]
    5a3a:	4290      	cmp	r0, r2
    5a3c:	d009      	beq.n	5a52 <remove_timeout+0x22>
	if (next(t) != NULL) {
    5a3e:	b143      	cbz	r3, 5a52 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5a40:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5a44:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5a48:	1912      	adds	r2, r2, r4
    5a4a:	eb41 0105 	adc.w	r1, r1, r5
    5a4e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5a52:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5a54:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5a56:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5a58:	2300      	movs	r3, #0
	node->prev = NULL;
    5a5a:	e9c0 3300 	strd	r3, r3, [r0]
}
    5a5e:	bd30      	pop	{r4, r5, pc}
    5a60:	2000016c 	.word	0x2000016c

00005a64 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5a68:	bf08      	it	eq
    5a6a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a70:	4604      	mov	r4, r0
    5a72:	461f      	mov	r7, r3
    5a74:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5a76:	d067      	beq.n	5b48 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5a78:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5a7a:	f04f 0320 	mov.w	r3, #32
    5a7e:	f3ef 8611 	mrs	r6, BASEPRI
    5a82:	f383 8812 	msr	BASEPRI_MAX, r3
    5a86:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5a8a:	f06f 0201 	mvn.w	r2, #1
    5a8e:	1b53      	subs	r3, r2, r5
    5a90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5a94:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5a98:	2b00      	cmp	r3, #0
    5a9a:	db1b      	blt.n	5ad4 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5a9c:	4b2b      	ldr	r3, [pc, #172]	; (5b4c <z_add_timeout+0xe8>)
    5a9e:	e9d3 1300 	ldrd	r1, r3, [r3]
    5aa2:	1a52      	subs	r2, r2, r1
    5aa4:	eb6c 0303 	sbc.w	r3, ip, r3
    5aa8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    5aaa:	eb63 0307 	sbc.w	r3, r3, r7
    5aae:	2d01      	cmp	r5, #1
    5ab0:	f173 0200 	sbcs.w	r2, r3, #0
    5ab4:	bfbc      	itt	lt
    5ab6:	2501      	movlt	r5, #1
    5ab8:	2300      	movlt	r3, #0
    5aba:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    5abe:	4824      	ldr	r0, [pc, #144]	; (5b50 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    5ac0:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ac4:	4283      	cmp	r3, r0
    5ac6:	d118      	bne.n	5afa <z_add_timeout+0x96>
	node->prev = tail;
    5ac8:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5acc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5ad0:	6044      	str	r4, [r0, #4]
}
    5ad2:	e026      	b.n	5b22 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5ad4:	f7ff ff7c 	bl	59d0 <elapsed>
    5ad8:	3501      	adds	r5, #1
    5ada:	f147 0700 	adc.w	r7, r7, #0
    5ade:	182d      	adds	r5, r5, r0
    5ae0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    5ae4:	e9c4 5704 	strd	r5, r7, [r4, #16]
    5ae8:	e7e9      	b.n	5abe <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5aea:	1a52      	subs	r2, r2, r1
    5aec:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5af0:	459c      	cmp	ip, r3
    5af2:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5af6:	d0e7      	beq.n	5ac8 <z_add_timeout+0x64>
    5af8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5afa:	2b00      	cmp	r3, #0
    5afc:	d0e4      	beq.n	5ac8 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    5afe:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5b02:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5b06:	428a      	cmp	r2, r1
    5b08:	eb75 0e07 	sbcs.w	lr, r5, r7
    5b0c:	daed      	bge.n	5aea <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    5b0e:	1a8a      	subs	r2, r1, r2
    5b10:	eb67 0505 	sbc.w	r5, r7, r5
    5b14:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5b18:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5b1a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5b1e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5b20:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5b22:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b24:	4283      	cmp	r3, r0
    5b26:	d00b      	beq.n	5b40 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5b28:	429c      	cmp	r4, r3
    5b2a:	d109      	bne.n	5b40 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5b2c:	f7ff ff5a 	bl	59e4 <next_timeout>

			if (next_time == 0 ||
    5b30:	b118      	cbz	r0, 5b3a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5b32:	4b08      	ldr	r3, [pc, #32]	; (5b54 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5b34:	691b      	ldr	r3, [r3, #16]
    5b36:	4283      	cmp	r3, r0
    5b38:	d002      	beq.n	5b40 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    5b3a:	2100      	movs	r1, #0
    5b3c:	f7fe f9ec 	bl	3f18 <sys_clock_set_timeout>
	__asm__ volatile(
    5b40:	f386 8811 	msr	BASEPRI, r6
    5b44:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b4a:	bf00      	nop
    5b4c:	20000838 	.word	0x20000838
    5b50:	2000016c 	.word	0x2000016c
    5b54:	20000f68 	.word	0x20000f68

00005b58 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b5c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5b5e:	f7ff fc99 	bl	5494 <z_time_slice>
	__asm__ volatile(
    5b62:	f04f 0320 	mov.w	r3, #32
    5b66:	f3ef 8411 	mrs	r4, BASEPRI
    5b6a:	f383 8812 	msr	BASEPRI_MAX, r3
    5b6e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5b72:	4e24      	ldr	r6, [pc, #144]	; (5c04 <sys_clock_announce+0xac>)
	return list->head == list;
    5b74:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5c08 <sys_clock_announce+0xb0>
    5b78:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5b7a:	4d24      	ldr	r5, [pc, #144]	; (5c0c <sys_clock_announce+0xb4>)
    5b7c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5b80:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b82:	4540      	cmp	r0, r8
		curr_tick += dt;
    5b84:	e9d5 1e00 	ldrd	r1, lr, [r5]
    5b88:	ea4f 77e2 	mov.w	r7, r2, asr #31
    5b8c:	d00b      	beq.n	5ba6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5b8e:	b150      	cbz	r0, 5ba6 <sys_clock_announce+0x4e>
    5b90:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5b94:	429a      	cmp	r2, r3
    5b96:	eb77 090c 	sbcs.w	r9, r7, ip
    5b9a:	da16      	bge.n	5bca <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5b9c:	1a9b      	subs	r3, r3, r2
    5b9e:	eb6c 0c07 	sbc.w	ip, ip, r7
    5ba2:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5ba6:	1852      	adds	r2, r2, r1
    5ba8:	eb4e 0707 	adc.w	r7, lr, r7
    5bac:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5bb0:	2500      	movs	r5, #0
    5bb2:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5bb4:	f7ff ff16 	bl	59e4 <next_timeout>
    5bb8:	4629      	mov	r1, r5
    5bba:	f7fe f9ad 	bl	3f18 <sys_clock_set_timeout>
	__asm__ volatile(
    5bbe:	f384 8811 	msr	BASEPRI, r4
    5bc2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5bca:	1859      	adds	r1, r3, r1
    5bcc:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5bd0:	1ad3      	subs	r3, r2, r3
    5bd2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5bd4:	2200      	movs	r2, #0
    5bd6:	2300      	movs	r3, #0
    5bd8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    5bdc:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5be0:	f7ff ff26 	bl	5a30 <remove_timeout>
    5be4:	f384 8811 	msr	BASEPRI, r4
    5be8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5bec:	6883      	ldr	r3, [r0, #8]
    5bee:	4798      	blx	r3
	__asm__ volatile(
    5bf0:	f04f 0320 	mov.w	r3, #32
    5bf4:	f3ef 8411 	mrs	r4, BASEPRI
    5bf8:	f383 8812 	msr	BASEPRI_MAX, r3
    5bfc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5c00:	e7bc      	b.n	5b7c <sys_clock_announce+0x24>
    5c02:	bf00      	nop
    5c04:	20000f9c 	.word	0x20000f9c
    5c08:	2000016c 	.word	0x2000016c
    5c0c:	20000838 	.word	0x20000838

00005c10 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5c10:	b510      	push	{r4, lr}
    5c12:	f04f 0320 	mov.w	r3, #32
    5c16:	f3ef 8411 	mrs	r4, BASEPRI
    5c1a:	f383 8812 	msr	BASEPRI_MAX, r3
    5c1e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5c22:	f7fe f9ab 	bl	3f7c <sys_clock_elapsed>
    5c26:	4a05      	ldr	r2, [pc, #20]	; (5c3c <sys_clock_tick_get+0x2c>)
    5c28:	e9d2 3100 	ldrd	r3, r1, [r2]
    5c2c:	18c0      	adds	r0, r0, r3
    5c2e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5c32:	f384 8811 	msr	BASEPRI, r4
    5c36:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5c3a:	bd10      	pop	{r4, pc}
    5c3c:	20000838 	.word	0x20000838

00005c40 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5c40:	b570      	push	{r4, r5, r6, lr}
    5c42:	4604      	mov	r4, r0
	__asm__ volatile(
    5c44:	f04f 0320 	mov.w	r3, #32
    5c48:	f3ef 8511 	mrs	r5, BASEPRI
    5c4c:	f383 8812 	msr	BASEPRI_MAX, r3
    5c50:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5c54:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    5c58:	3301      	adds	r3, #1
    5c5a:	f142 0200 	adc.w	r2, r2, #0
    5c5e:	2b02      	cmp	r3, #2
    5c60:	f172 0300 	sbcs.w	r3, r2, #0
    5c64:	d304      	bcc.n	5c70 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5c66:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    5c6a:	4917      	ldr	r1, [pc, #92]	; (5cc8 <z_timer_expiration_handler+0x88>)
    5c6c:	f7ff fefa 	bl	5a64 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5c70:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5c72:	3301      	adds	r3, #1
    5c74:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    5c76:	6a23      	ldr	r3, [r4, #32]
    5c78:	b173      	cbz	r3, 5c98 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    5c7a:	f385 8811 	msr	BASEPRI, r5
    5c7e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    5c82:	6a23      	ldr	r3, [r4, #32]
    5c84:	4620      	mov	r0, r4
    5c86:	4798      	blx	r3
	__asm__ volatile(
    5c88:	f04f 0320 	mov.w	r3, #32
    5c8c:	f3ef 8511 	mrs	r5, BASEPRI
    5c90:	f383 8812 	msr	BASEPRI_MAX, r3
    5c94:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5c98:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c9c:	42a6      	cmp	r6, r4
    5c9e:	d000      	beq.n	5ca2 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5ca0:	b926      	cbnz	r6, 5cac <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    5ca2:	f385 8811 	msr	BASEPRI, r5
    5ca6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    5caa:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    5cac:	4630      	mov	r0, r6
    5cae:	f001 f920 	bl	6ef2 <z_unpend_thread_no_timeout>
    5cb2:	2300      	movs	r3, #0
    5cb4:	67b3      	str	r3, [r6, #120]	; 0x78
    5cb6:	f385 8811 	msr	BASEPRI, r5
    5cba:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5cbe:	4630      	mov	r0, r6
}
    5cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    5cc4:	f001 b941 	b.w	6f4a <z_ready_thread>
    5cc8:	00005c41 	.word	0x00005c41

00005ccc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cd0:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5cd6:	bf08      	it	eq
    5cd8:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    5cdc:	4606      	mov	r6, r0
    5cde:	461c      	mov	r4, r3
    5ce0:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    5ce4:	4689      	mov	r9, r1
    5ce6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5ce8:	d03e      	beq.n	5d68 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5cea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5cee:	bf08      	it	eq
    5cf0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    5cf4:	4615      	mov	r5, r2
    5cf6:	4607      	mov	r7, r0
    5cf8:	d014      	beq.n	5d24 <z_impl_k_timer_start+0x58>
    5cfa:	ea50 0302 	orrs.w	r3, r0, r2
    5cfe:	d011      	beq.n	5d24 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    5d00:	f06f 0301 	mvn.w	r3, #1
    5d04:	1a9b      	subs	r3, r3, r2
    5d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d0a:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5d0e:	2b00      	cmp	r3, #0
    5d10:	da08      	bge.n	5d24 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    5d12:	2a02      	cmp	r2, #2
    5d14:	f170 0300 	sbcs.w	r3, r0, #0
    5d18:	bfbc      	itt	lt
    5d1a:	2502      	movlt	r5, #2
    5d1c:	2700      	movlt	r7, #0
    5d1e:	3d01      	subs	r5, #1
    5d20:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    5d24:	f06f 0301 	mvn.w	r3, #1
    5d28:	1a5b      	subs	r3, r3, r1
    5d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d2e:	eb63 0304 	sbc.w	r3, r3, r4
    5d32:	2b00      	cmp	r3, #0
    5d34:	da09      	bge.n	5d4a <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5d36:	2901      	cmp	r1, #1
    5d38:	f174 0300 	sbcs.w	r3, r4, #0
    5d3c:	bfbc      	itt	lt
    5d3e:	2101      	movlt	r1, #1
    5d40:	2400      	movlt	r4, #0
    5d42:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    5d46:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    5d4a:	4630      	mov	r0, r6
    5d4c:	f001 f986 	bl	705c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5d50:	2300      	movs	r3, #0
    5d52:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    5d54:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5d58:	464a      	mov	r2, r9
    5d5a:	4643      	mov	r3, r8
    5d5c:	4630      	mov	r0, r6
    5d5e:	4903      	ldr	r1, [pc, #12]	; (5d6c <z_impl_k_timer_start+0xa0>)
		     duration);
}
    5d60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5d64:	f7ff be7e 	b.w	5a64 <z_add_timeout>
}
    5d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d6c:	00005c41 	.word	0x00005c41

00005d70 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5d70:	4a02      	ldr	r2, [pc, #8]	; (5d7c <boot_banner+0xc>)
    5d72:	4903      	ldr	r1, [pc, #12]	; (5d80 <boot_banner+0x10>)
    5d74:	4803      	ldr	r0, [pc, #12]	; (5d84 <boot_banner+0x14>)
    5d76:	f000 ba41 	b.w	61fc <printk>
    5d7a:	bf00      	nop
    5d7c:	00007799 	.word	0x00007799
    5d80:	00007f77 	.word	0x00007f77
    5d84:	00007f84 	.word	0x00007f84

00005d88 <nrf_cc3xx_platform_init_no_rng>:
    5d88:	b510      	push	{r4, lr}
    5d8a:	4c0a      	ldr	r4, [pc, #40]	; (5db4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5d8c:	6823      	ldr	r3, [r4, #0]
    5d8e:	b11b      	cbz	r3, 5d98 <nrf_cc3xx_platform_init_no_rng+0x10>
    5d90:	2301      	movs	r3, #1
    5d92:	6023      	str	r3, [r4, #0]
    5d94:	2000      	movs	r0, #0
    5d96:	bd10      	pop	{r4, pc}
    5d98:	f000 f8ce 	bl	5f38 <CC_LibInitNoRng>
    5d9c:	2800      	cmp	r0, #0
    5d9e:	d0f7      	beq.n	5d90 <nrf_cc3xx_platform_init_no_rng+0x8>
    5da0:	3801      	subs	r0, #1
    5da2:	2806      	cmp	r0, #6
    5da4:	d803      	bhi.n	5dae <nrf_cc3xx_platform_init_no_rng+0x26>
    5da6:	4b04      	ldr	r3, [pc, #16]	; (5db8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5da8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5dac:	bd10      	pop	{r4, pc}
    5dae:	4803      	ldr	r0, [pc, #12]	; (5dbc <nrf_cc3xx_platform_init_no_rng+0x34>)
    5db0:	bd10      	pop	{r4, pc}
    5db2:	bf00      	nop
    5db4:	20000fa0 	.word	0x20000fa0
    5db8:	00007650 	.word	0x00007650
    5dbc:	ffff8ffe 	.word	0xffff8ffe

00005dc0 <nrf_cc3xx_platform_abort>:
    5dc0:	f3bf 8f4f 	dsb	sy
    5dc4:	4905      	ldr	r1, [pc, #20]	; (5ddc <nrf_cc3xx_platform_abort+0x1c>)
    5dc6:	4b06      	ldr	r3, [pc, #24]	; (5de0 <nrf_cc3xx_platform_abort+0x20>)
    5dc8:	68ca      	ldr	r2, [r1, #12]
    5dca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5dce:	4313      	orrs	r3, r2
    5dd0:	60cb      	str	r3, [r1, #12]
    5dd2:	f3bf 8f4f 	dsb	sy
    5dd6:	bf00      	nop
    5dd8:	e7fd      	b.n	5dd6 <nrf_cc3xx_platform_abort+0x16>
    5dda:	bf00      	nop
    5ddc:	e000ed00 	.word	0xe000ed00
    5de0:	05fa0004 	.word	0x05fa0004

00005de4 <CC_PalAbort>:
    5de4:	b410      	push	{r4}
    5de6:	4b09      	ldr	r3, [pc, #36]	; (5e0c <CC_PalAbort+0x28>)
    5de8:	4909      	ldr	r1, [pc, #36]	; (5e10 <CC_PalAbort+0x2c>)
    5dea:	4c0a      	ldr	r4, [pc, #40]	; (5e14 <CC_PalAbort+0x30>)
    5dec:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5df0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5df4:	6849      	ldr	r1, [r1, #4]
    5df6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5dfa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5dfe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5e02:	2300      	movs	r3, #0
    5e04:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    5e08:	bc10      	pop	{r4}
    5e0a:	4708      	bx	r1
    5e0c:	5002b000 	.word	0x5002b000
    5e10:	20000174 	.word	0x20000174
    5e14:	5002a000 	.word	0x5002a000

00005e18 <nrf_cc3xx_platform_set_abort>:
    5e18:	e9d0 1200 	ldrd	r1, r2, [r0]
    5e1c:	4b01      	ldr	r3, [pc, #4]	; (5e24 <nrf_cc3xx_platform_set_abort+0xc>)
    5e1e:	e9c3 1200 	strd	r1, r2, [r3]
    5e22:	4770      	bx	lr
    5e24:	20000174 	.word	0x20000174

00005e28 <mutex_free>:
    5e28:	b510      	push	{r4, lr}
    5e2a:	4604      	mov	r4, r0
    5e2c:	b130      	cbz	r0, 5e3c <mutex_free+0x14>
    5e2e:	6863      	ldr	r3, [r4, #4]
    5e30:	06db      	lsls	r3, r3, #27
    5e32:	d502      	bpl.n	5e3a <mutex_free+0x12>
    5e34:	2300      	movs	r3, #0
    5e36:	6023      	str	r3, [r4, #0]
    5e38:	6063      	str	r3, [r4, #4]
    5e3a:	bd10      	pop	{r4, pc}
    5e3c:	4b02      	ldr	r3, [pc, #8]	; (5e48 <mutex_free+0x20>)
    5e3e:	4803      	ldr	r0, [pc, #12]	; (5e4c <mutex_free+0x24>)
    5e40:	685b      	ldr	r3, [r3, #4]
    5e42:	4798      	blx	r3
    5e44:	e7f3      	b.n	5e2e <mutex_free+0x6>
    5e46:	bf00      	nop
    5e48:	20000174 	.word	0x20000174
    5e4c:	0000766c 	.word	0x0000766c

00005e50 <mutex_lock>:
    5e50:	b1b0      	cbz	r0, 5e80 <mutex_lock+0x30>
    5e52:	6843      	ldr	r3, [r0, #4]
    5e54:	b193      	cbz	r3, 5e7c <mutex_lock+0x2c>
    5e56:	06db      	lsls	r3, r3, #27
    5e58:	d50e      	bpl.n	5e78 <mutex_lock+0x28>
    5e5a:	2301      	movs	r3, #1
    5e5c:	e850 2f00 	ldrex	r2, [r0]
    5e60:	4619      	mov	r1, r3
    5e62:	e840 1c00 	strex	ip, r1, [r0]
    5e66:	f09c 0f00 	teq	ip, #0
    5e6a:	d1f7      	bne.n	5e5c <mutex_lock+0xc>
    5e6c:	2a01      	cmp	r2, #1
    5e6e:	d0f5      	beq.n	5e5c <mutex_lock+0xc>
    5e70:	f3bf 8f5f 	dmb	sy
    5e74:	2000      	movs	r0, #0
    5e76:	4770      	bx	lr
    5e78:	4803      	ldr	r0, [pc, #12]	; (5e88 <mutex_lock+0x38>)
    5e7a:	4770      	bx	lr
    5e7c:	4803      	ldr	r0, [pc, #12]	; (5e8c <mutex_lock+0x3c>)
    5e7e:	4770      	bx	lr
    5e80:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5e84:	4770      	bx	lr
    5e86:	bf00      	nop
    5e88:	ffff8fe9 	.word	0xffff8fe9
    5e8c:	ffff8fea 	.word	0xffff8fea

00005e90 <mutex_unlock>:
    5e90:	b168      	cbz	r0, 5eae <mutex_unlock+0x1e>
    5e92:	6843      	ldr	r3, [r0, #4]
    5e94:	b13b      	cbz	r3, 5ea6 <mutex_unlock+0x16>
    5e96:	06db      	lsls	r3, r3, #27
    5e98:	d507      	bpl.n	5eaa <mutex_unlock+0x1a>
    5e9a:	f3bf 8f5f 	dmb	sy
    5e9e:	2300      	movs	r3, #0
    5ea0:	6003      	str	r3, [r0, #0]
    5ea2:	4618      	mov	r0, r3
    5ea4:	4770      	bx	lr
    5ea6:	4803      	ldr	r0, [pc, #12]	; (5eb4 <mutex_unlock+0x24>)
    5ea8:	4770      	bx	lr
    5eaa:	4803      	ldr	r0, [pc, #12]	; (5eb8 <mutex_unlock+0x28>)
    5eac:	4770      	bx	lr
    5eae:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5eb2:	4770      	bx	lr
    5eb4:	ffff8fea 	.word	0xffff8fea
    5eb8:	ffff8fe9 	.word	0xffff8fe9

00005ebc <mutex_init>:
    5ebc:	b510      	push	{r4, lr}
    5ebe:	4604      	mov	r4, r0
    5ec0:	b120      	cbz	r0, 5ecc <mutex_init+0x10>
    5ec2:	2200      	movs	r2, #0
    5ec4:	2311      	movs	r3, #17
    5ec6:	6022      	str	r2, [r4, #0]
    5ec8:	6063      	str	r3, [r4, #4]
    5eca:	bd10      	pop	{r4, pc}
    5ecc:	4801      	ldr	r0, [pc, #4]	; (5ed4 <mutex_init+0x18>)
    5ece:	f7ff ff89 	bl	5de4 <CC_PalAbort>
    5ed2:	e7f6      	b.n	5ec2 <mutex_init+0x6>
    5ed4:	00007694 	.word	0x00007694

00005ed8 <nrf_cc3xx_platform_set_mutexes>:
    5ed8:	b570      	push	{r4, r5, r6, lr}
    5eda:	e9d0 2300 	ldrd	r2, r3, [r0]
    5ede:	4c13      	ldr	r4, [pc, #76]	; (5f2c <nrf_cc3xx_platform_set_mutexes+0x54>)
    5ee0:	4d13      	ldr	r5, [pc, #76]	; (5f30 <nrf_cc3xx_platform_set_mutexes+0x58>)
    5ee2:	6063      	str	r3, [r4, #4]
    5ee4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    5ee8:	e9c4 3002 	strd	r3, r0, [r4, #8]
    5eec:	6022      	str	r2, [r4, #0]
    5eee:	4b11      	ldr	r3, [pc, #68]	; (5f34 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5ef0:	6808      	ldr	r0, [r1, #0]
    5ef2:	6018      	str	r0, [r3, #0]
    5ef4:	6848      	ldr	r0, [r1, #4]
    5ef6:	6058      	str	r0, [r3, #4]
    5ef8:	6888      	ldr	r0, [r1, #8]
    5efa:	6098      	str	r0, [r3, #8]
    5efc:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    5f00:	60d8      	str	r0, [r3, #12]
    5f02:	6119      	str	r1, [r3, #16]
    5f04:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    5f08:	06db      	lsls	r3, r3, #27
    5f0a:	d50d      	bpl.n	5f28 <nrf_cc3xx_platform_set_mutexes+0x50>
    5f0c:	2300      	movs	r3, #0
    5f0e:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    5f12:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    5f16:	f505 708a 	add.w	r0, r5, #276	; 0x114
    5f1a:	4790      	blx	r2
    5f1c:	6823      	ldr	r3, [r4, #0]
    5f1e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    5f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f26:	4718      	bx	r3
    5f28:	bd70      	pop	{r4, r5, r6, pc}
    5f2a:	bf00      	nop
    5f2c:	20000184 	.word	0x20000184
    5f30:	20000fb8 	.word	0x20000fb8
    5f34:	20000194 	.word	0x20000194

00005f38 <CC_LibInitNoRng>:
    5f38:	b538      	push	{r3, r4, r5, lr}
    5f3a:	f000 f82f 	bl	5f9c <CC_HalInit>
    5f3e:	b120      	cbz	r0, 5f4a <CC_LibInitNoRng+0x12>
    5f40:	2403      	movs	r4, #3
    5f42:	f000 f863 	bl	600c <CC_PalTerminate>
    5f46:	4620      	mov	r0, r4
    5f48:	bd38      	pop	{r3, r4, r5, pc}
    5f4a:	f000 f831 	bl	5fb0 <CC_PalInit>
    5f4e:	b998      	cbnz	r0, 5f78 <CC_LibInitNoRng+0x40>
    5f50:	f000 f8ac 	bl	60ac <CC_PalPowerSaveModeSelect>
    5f54:	b998      	cbnz	r0, 5f7e <CC_LibInitNoRng+0x46>
    5f56:	4d0f      	ldr	r5, [pc, #60]	; (5f94 <CC_LibInitNoRng+0x5c>)
    5f58:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5f5c:	0e1b      	lsrs	r3, r3, #24
    5f5e:	2bf0      	cmp	r3, #240	; 0xf0
    5f60:	d108      	bne.n	5f74 <CC_LibInitNoRng+0x3c>
    5f62:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    5f66:	4b0c      	ldr	r3, [pc, #48]	; (5f98 <CC_LibInitNoRng+0x60>)
    5f68:	429a      	cmp	r2, r3
    5f6a:	d00a      	beq.n	5f82 <CC_LibInitNoRng+0x4a>
    5f6c:	2407      	movs	r4, #7
    5f6e:	f000 f817 	bl	5fa0 <CC_HalTerminate>
    5f72:	e7e6      	b.n	5f42 <CC_LibInitNoRng+0xa>
    5f74:	2406      	movs	r4, #6
    5f76:	e7fa      	b.n	5f6e <CC_LibInitNoRng+0x36>
    5f78:	2404      	movs	r4, #4
    5f7a:	4620      	mov	r0, r4
    5f7c:	bd38      	pop	{r3, r4, r5, pc}
    5f7e:	2400      	movs	r4, #0
    5f80:	e7f5      	b.n	5f6e <CC_LibInitNoRng+0x36>
    5f82:	2001      	movs	r0, #1
    5f84:	f000 f892 	bl	60ac <CC_PalPowerSaveModeSelect>
    5f88:	4604      	mov	r4, r0
    5f8a:	2800      	cmp	r0, #0
    5f8c:	d1f7      	bne.n	5f7e <CC_LibInitNoRng+0x46>
    5f8e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5f92:	e7d8      	b.n	5f46 <CC_LibInitNoRng+0xe>
    5f94:	5002b000 	.word	0x5002b000
    5f98:	20e00000 	.word	0x20e00000

00005f9c <CC_HalInit>:
    5f9c:	2000      	movs	r0, #0
    5f9e:	4770      	bx	lr

00005fa0 <CC_HalTerminate>:
    5fa0:	2000      	movs	r0, #0
    5fa2:	4770      	bx	lr

00005fa4 <CC_HalMaskInterrupt>:
    5fa4:	4b01      	ldr	r3, [pc, #4]	; (5fac <CC_HalMaskInterrupt+0x8>)
    5fa6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    5faa:	4770      	bx	lr
    5fac:	5002b000 	.word	0x5002b000

00005fb0 <CC_PalInit>:
    5fb0:	b510      	push	{r4, lr}
    5fb2:	4811      	ldr	r0, [pc, #68]	; (5ff8 <CC_PalInit+0x48>)
    5fb4:	f000 f848 	bl	6048 <CC_PalMutexCreate>
    5fb8:	b100      	cbz	r0, 5fbc <CC_PalInit+0xc>
    5fba:	bd10      	pop	{r4, pc}
    5fbc:	480f      	ldr	r0, [pc, #60]	; (5ffc <CC_PalInit+0x4c>)
    5fbe:	f000 f843 	bl	6048 <CC_PalMutexCreate>
    5fc2:	2800      	cmp	r0, #0
    5fc4:	d1f9      	bne.n	5fba <CC_PalInit+0xa>
    5fc6:	4c0e      	ldr	r4, [pc, #56]	; (6000 <CC_PalInit+0x50>)
    5fc8:	4620      	mov	r0, r4
    5fca:	f000 f83d 	bl	6048 <CC_PalMutexCreate>
    5fce:	2800      	cmp	r0, #0
    5fd0:	d1f3      	bne.n	5fba <CC_PalInit+0xa>
    5fd2:	4b0c      	ldr	r3, [pc, #48]	; (6004 <CC_PalInit+0x54>)
    5fd4:	480c      	ldr	r0, [pc, #48]	; (6008 <CC_PalInit+0x58>)
    5fd6:	601c      	str	r4, [r3, #0]
    5fd8:	f000 f836 	bl	6048 <CC_PalMutexCreate>
    5fdc:	4601      	mov	r1, r0
    5fde:	2800      	cmp	r0, #0
    5fe0:	d1eb      	bne.n	5fba <CC_PalInit+0xa>
    5fe2:	f000 f82d 	bl	6040 <CC_PalDmaInit>
    5fe6:	4604      	mov	r4, r0
    5fe8:	b108      	cbz	r0, 5fee <CC_PalInit+0x3e>
    5fea:	4620      	mov	r0, r4
    5fec:	bd10      	pop	{r4, pc}
    5fee:	f000 f83f 	bl	6070 <CC_PalPowerSaveModeInit>
    5ff2:	4620      	mov	r0, r4
    5ff4:	e7fa      	b.n	5fec <CC_PalInit+0x3c>
    5ff6:	bf00      	nop
    5ff8:	200001cc 	.word	0x200001cc
    5ffc:	200001c0 	.word	0x200001c0
    6000:	200001c8 	.word	0x200001c8
    6004:	200001d0 	.word	0x200001d0
    6008:	200001c4 	.word	0x200001c4

0000600c <CC_PalTerminate>:
    600c:	b508      	push	{r3, lr}
    600e:	4808      	ldr	r0, [pc, #32]	; (6030 <CC_PalTerminate+0x24>)
    6010:	f000 f824 	bl	605c <CC_PalMutexDestroy>
    6014:	4807      	ldr	r0, [pc, #28]	; (6034 <CC_PalTerminate+0x28>)
    6016:	f000 f821 	bl	605c <CC_PalMutexDestroy>
    601a:	4807      	ldr	r0, [pc, #28]	; (6038 <CC_PalTerminate+0x2c>)
    601c:	f000 f81e 	bl	605c <CC_PalMutexDestroy>
    6020:	4806      	ldr	r0, [pc, #24]	; (603c <CC_PalTerminate+0x30>)
    6022:	f000 f81b 	bl	605c <CC_PalMutexDestroy>
    6026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    602a:	f000 b80b 	b.w	6044 <CC_PalDmaTerminate>
    602e:	bf00      	nop
    6030:	200001cc 	.word	0x200001cc
    6034:	200001c0 	.word	0x200001c0
    6038:	200001c8 	.word	0x200001c8
    603c:	200001c4 	.word	0x200001c4

00006040 <CC_PalDmaInit>:
    6040:	2000      	movs	r0, #0
    6042:	4770      	bx	lr

00006044 <CC_PalDmaTerminate>:
    6044:	4770      	bx	lr
    6046:	bf00      	nop

00006048 <CC_PalMutexCreate>:
    6048:	b508      	push	{r3, lr}
    604a:	4b03      	ldr	r3, [pc, #12]	; (6058 <CC_PalMutexCreate+0x10>)
    604c:	6802      	ldr	r2, [r0, #0]
    604e:	681b      	ldr	r3, [r3, #0]
    6050:	6810      	ldr	r0, [r2, #0]
    6052:	4798      	blx	r3
    6054:	2000      	movs	r0, #0
    6056:	bd08      	pop	{r3, pc}
    6058:	20000184 	.word	0x20000184

0000605c <CC_PalMutexDestroy>:
    605c:	b508      	push	{r3, lr}
    605e:	4b03      	ldr	r3, [pc, #12]	; (606c <CC_PalMutexDestroy+0x10>)
    6060:	6802      	ldr	r2, [r0, #0]
    6062:	685b      	ldr	r3, [r3, #4]
    6064:	6810      	ldr	r0, [r2, #0]
    6066:	4798      	blx	r3
    6068:	2000      	movs	r0, #0
    606a:	bd08      	pop	{r3, pc}
    606c:	20000184 	.word	0x20000184

00006070 <CC_PalPowerSaveModeInit>:
    6070:	b570      	push	{r4, r5, r6, lr}
    6072:	4c09      	ldr	r4, [pc, #36]	; (6098 <CC_PalPowerSaveModeInit+0x28>)
    6074:	4d09      	ldr	r5, [pc, #36]	; (609c <CC_PalPowerSaveModeInit+0x2c>)
    6076:	6920      	ldr	r0, [r4, #16]
    6078:	68ab      	ldr	r3, [r5, #8]
    607a:	4798      	blx	r3
    607c:	b118      	cbz	r0, 6086 <CC_PalPowerSaveModeInit+0x16>
    607e:	4b08      	ldr	r3, [pc, #32]	; (60a0 <CC_PalPowerSaveModeInit+0x30>)
    6080:	4808      	ldr	r0, [pc, #32]	; (60a4 <CC_PalPowerSaveModeInit+0x34>)
    6082:	685b      	ldr	r3, [r3, #4]
    6084:	4798      	blx	r3
    6086:	4a08      	ldr	r2, [pc, #32]	; (60a8 <CC_PalPowerSaveModeInit+0x38>)
    6088:	68eb      	ldr	r3, [r5, #12]
    608a:	6920      	ldr	r0, [r4, #16]
    608c:	2100      	movs	r1, #0
    608e:	6011      	str	r1, [r2, #0]
    6090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6094:	4718      	bx	r3
    6096:	bf00      	nop
    6098:	20000194 	.word	0x20000194
    609c:	20000184 	.word	0x20000184
    60a0:	20000174 	.word	0x20000174
    60a4:	000076b8 	.word	0x000076b8
    60a8:	20000fb4 	.word	0x20000fb4

000060ac <CC_PalPowerSaveModeSelect>:
    60ac:	b570      	push	{r4, r5, r6, lr}
    60ae:	4d1b      	ldr	r5, [pc, #108]	; (611c <CC_PalPowerSaveModeSelect+0x70>)
    60b0:	4e1b      	ldr	r6, [pc, #108]	; (6120 <CC_PalPowerSaveModeSelect+0x74>)
    60b2:	4604      	mov	r4, r0
    60b4:	68b2      	ldr	r2, [r6, #8]
    60b6:	6928      	ldr	r0, [r5, #16]
    60b8:	4790      	blx	r2
    60ba:	b9f8      	cbnz	r0, 60fc <CC_PalPowerSaveModeSelect+0x50>
    60bc:	b15c      	cbz	r4, 60d6 <CC_PalPowerSaveModeSelect+0x2a>
    60be:	4c19      	ldr	r4, [pc, #100]	; (6124 <CC_PalPowerSaveModeSelect+0x78>)
    60c0:	6823      	ldr	r3, [r4, #0]
    60c2:	b1b3      	cbz	r3, 60f2 <CC_PalPowerSaveModeSelect+0x46>
    60c4:	2b01      	cmp	r3, #1
    60c6:	d01b      	beq.n	6100 <CC_PalPowerSaveModeSelect+0x54>
    60c8:	3b01      	subs	r3, #1
    60ca:	6023      	str	r3, [r4, #0]
    60cc:	6928      	ldr	r0, [r5, #16]
    60ce:	68f3      	ldr	r3, [r6, #12]
    60d0:	4798      	blx	r3
    60d2:	2000      	movs	r0, #0
    60d4:	bd70      	pop	{r4, r5, r6, pc}
    60d6:	4c13      	ldr	r4, [pc, #76]	; (6124 <CC_PalPowerSaveModeSelect+0x78>)
    60d8:	6821      	ldr	r1, [r4, #0]
    60da:	b941      	cbnz	r1, 60ee <CC_PalPowerSaveModeSelect+0x42>
    60dc:	4b12      	ldr	r3, [pc, #72]	; (6128 <CC_PalPowerSaveModeSelect+0x7c>)
    60de:	2201      	movs	r2, #1
    60e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    60e4:	4a11      	ldr	r2, [pc, #68]	; (612c <CC_PalPowerSaveModeSelect+0x80>)
    60e6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    60ea:	2b00      	cmp	r3, #0
    60ec:	d1fb      	bne.n	60e6 <CC_PalPowerSaveModeSelect+0x3a>
    60ee:	3101      	adds	r1, #1
    60f0:	6021      	str	r1, [r4, #0]
    60f2:	68f3      	ldr	r3, [r6, #12]
    60f4:	6928      	ldr	r0, [r5, #16]
    60f6:	4798      	blx	r3
    60f8:	2000      	movs	r0, #0
    60fa:	bd70      	pop	{r4, r5, r6, pc}
    60fc:	480c      	ldr	r0, [pc, #48]	; (6130 <CC_PalPowerSaveModeSelect+0x84>)
    60fe:	bd70      	pop	{r4, r5, r6, pc}
    6100:	4a0a      	ldr	r2, [pc, #40]	; (612c <CC_PalPowerSaveModeSelect+0x80>)
    6102:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6106:	2b00      	cmp	r3, #0
    6108:	d1fb      	bne.n	6102 <CC_PalPowerSaveModeSelect+0x56>
    610a:	4a07      	ldr	r2, [pc, #28]	; (6128 <CC_PalPowerSaveModeSelect+0x7c>)
    610c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6110:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6114:	f7ff ff46 	bl	5fa4 <CC_HalMaskInterrupt>
    6118:	6823      	ldr	r3, [r4, #0]
    611a:	e7d5      	b.n	60c8 <CC_PalPowerSaveModeSelect+0x1c>
    611c:	20000194 	.word	0x20000194
    6120:	20000184 	.word	0x20000184
    6124:	20000fb4 	.word	0x20000fb4
    6128:	5002a000 	.word	0x5002a000
    612c:	5002b000 	.word	0x5002b000
    6130:	ffff8fe9 	.word	0xffff8fe9

00006134 <_Z24z_cbprintf_cxx_store_argIiEvPhT_>:
    6134:	6001      	str	r1, [r0, #0]
{
	size_t wlen = z_cbprintf_cxx_arg_size(arg) / sizeof(int);
	void *p = &arg;

	z_cbprintf_wcpy((int *)dst, (int *)p, wlen);
}
    6136:	4770      	bx	lr

00006138 <_Z24z_cbprintf_cxx_store_argIPKcEvPhT_>:
    6138:	6001      	str	r1, [r0, #0]
    613a:	4770      	bx	lr

0000613c <cbpprintf_external>:
{
    613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6140:	4607      	mov	r7, r0
    6142:	460e      	mov	r6, r1
    6144:	4690      	mov	r8, r2
	if (buf == NULL) {
    6146:	461d      	mov	r5, r3
    6148:	b30b      	cbz	r3, 618e <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    614a:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    614c:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    614e:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    6152:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    6154:	441c      	add	r4, r3
    6156:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    615a:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    615c:	f04f 0900 	mov.w	r9, #0
    6160:	45d1      	cmp	r9, sl
    6162:	d308      	bcc.n	6176 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    6164:	686a      	ldr	r2, [r5, #4]
    6166:	f105 0308 	add.w	r3, r5, #8
    616a:	4641      	mov	r1, r8
    616c:	4638      	mov	r0, r7
    616e:	46b4      	mov	ip, r6
}
    6170:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    6174:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    6176:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    617a:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    617e:	4620      	mov	r0, r4
    6180:	f7fa f935 	bl	3ee <strlen>
    6184:	3001      	adds	r0, #1
    6186:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    6188:	f109 0901 	add.w	r9, r9, #1
    618c:	e7e8      	b.n	6160 <cbpprintf_external+0x24>
}
    618e:	f06f 0015 	mvn.w	r0, #21
    6192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006196 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6196:	4603      	mov	r3, r0
    6198:	b158      	cbz	r0, 61b2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    619a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    619c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    61a0:	2a01      	cmp	r2, #1
    61a2:	d003      	beq.n	61ac <sys_notify_validate+0x16>
    61a4:	2a03      	cmp	r2, #3
    61a6:	d104      	bne.n	61b2 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    61a8:	6802      	ldr	r2, [r0, #0]
    61aa:	b112      	cbz	r2, 61b2 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    61ac:	2000      	movs	r0, #0
    61ae:	6098      	str	r0, [r3, #8]
    61b0:	4770      	bx	lr
		return -EINVAL;
    61b2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    61b6:	4770      	bx	lr

000061b8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    61b8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    61ba:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    61bc:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    61c0:	2a03      	cmp	r2, #3
    61c2:	f04f 0200 	mov.w	r2, #0
{
    61c6:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    61c8:	bf0c      	ite	eq
    61ca:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    61cc:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    61ce:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    61d0:	4770      	bx	lr

000061d2 <arch_printk_char_out>:
}
    61d2:	2000      	movs	r0, #0
    61d4:	4770      	bx	lr

000061d6 <str_out>:
{
    61d6:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    61d8:	688a      	ldr	r2, [r1, #8]
    61da:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    61dc:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    61de:	b114      	cbz	r4, 61e6 <str_out+0x10>
    61e0:	684b      	ldr	r3, [r1, #4]
    61e2:	4293      	cmp	r3, r2
    61e4:	dc01      	bgt.n	61ea <str_out+0x14>
		ctx->count++;
    61e6:	608d      	str	r5, [r1, #8]
}
    61e8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    61ea:	3b01      	subs	r3, #1
    61ec:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    61ee:	bf08      	it	eq
    61f0:	2200      	moveq	r2, #0
    61f2:	608d      	str	r5, [r1, #8]
    61f4:	bf0c      	ite	eq
    61f6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    61f8:	54a0      	strbne	r0, [r4, r2]
    61fa:	e7f5      	b.n	61e8 <str_out+0x12>

000061fc <printk>:
{
    61fc:	b40f      	push	{r0, r1, r2, r3}
    61fe:	b507      	push	{r0, r1, r2, lr}
    6200:	a904      	add	r1, sp, #16
    6202:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    6206:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    6208:	f000 faea 	bl	67e0 <z_log_vprintk>
}
    620c:	b003      	add	sp, #12
    620e:	f85d eb04 	ldr.w	lr, [sp], #4
    6212:	b004      	add	sp, #16
    6214:	4770      	bx	lr

00006216 <snprintk>:
{
    6216:	b40c      	push	{r2, r3}
    6218:	b507      	push	{r0, r1, r2, lr}
    621a:	ab04      	add	r3, sp, #16
    621c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    6220:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    6222:	f7fa fd59 	bl	cd8 <vsnprintk>
}
    6226:	b003      	add	sp, #12
    6228:	f85d eb04 	ldr.w	lr, [sp], #4
    622c:	b002      	add	sp, #8
    622e:	4770      	bx	lr

00006230 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6230:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    6232:	f013 0307 	ands.w	r3, r3, #7
    6236:	d105      	bne.n	6244 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6238:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    623a:	2b00      	cmp	r3, #0
    623c:	bf0c      	ite	eq
    623e:	2000      	moveq	r0, #0
    6240:	2003      	movne	r0, #3
    6242:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6244:	2b02      	cmp	r3, #2
    6246:	d105      	bne.n	6254 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6248:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
    624a:	2b00      	cmp	r3, #0
    624c:	bf14      	ite	ne
    624e:	2000      	movne	r0, #0
    6250:	2004      	moveq	r0, #4
    6252:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6254:	2b01      	cmp	r3, #1
    6256:	d105      	bne.n	6264 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6258:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    625a:	2b00      	cmp	r3, #0
    625c:	bf0c      	ite	eq
    625e:	2000      	moveq	r0, #0
    6260:	2005      	movne	r0, #5
    6262:	4770      	bx	lr
	int evt = EVT_NOP;
    6264:	2000      	movs	r0, #0
}
    6266:	4770      	bx	lr

00006268 <notify_one>:
{
    6268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    626c:	460d      	mov	r5, r1
    626e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6270:	4619      	mov	r1, r3
    6272:	1d28      	adds	r0, r5, #4
{
    6274:	4690      	mov	r8, r2
    6276:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6278:	f7ff ff9e 	bl	61b8 <sys_notify_finalize>
	if (cb) {
    627c:	4604      	mov	r4, r0
    627e:	b138      	cbz	r0, 6290 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6280:	4633      	mov	r3, r6
    6282:	4642      	mov	r2, r8
    6284:	4629      	mov	r1, r5
    6286:	4638      	mov	r0, r7
    6288:	46a4      	mov	ip, r4
}
    628a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    628e:	4760      	bx	ip
}
    6290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006294 <transition_complete>:
{
    6294:	b410      	push	{r4}
	__asm__ volatile(
    6296:	f04f 0420 	mov.w	r4, #32
    629a:	f3ef 8211 	mrs	r2, BASEPRI
    629e:	f384 8812 	msr	BASEPRI_MAX, r4
    62a2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    62a6:	6181      	str	r1, [r0, #24]
}
    62a8:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    62aa:	2101      	movs	r1, #1
    62ac:	f7fa bd28 	b.w	d00 <process_event>

000062b0 <validate_args>:
{
    62b0:	b510      	push	{r4, lr}
    62b2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    62b4:	b140      	cbz	r0, 62c8 <validate_args+0x18>
    62b6:	b139      	cbz	r1, 62c8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    62b8:	1d08      	adds	r0, r1, #4
    62ba:	f7ff ff6c 	bl	6196 <sys_notify_validate>
	if ((rv == 0)
    62be:	b928      	cbnz	r0, 62cc <validate_args+0x1c>
	    && ((cli->notify.flags
    62c0:	68a3      	ldr	r3, [r4, #8]
    62c2:	f033 0303 	bics.w	r3, r3, #3
    62c6:	d001      	beq.n	62cc <validate_args+0x1c>
		rv = -EINVAL;
    62c8:	f06f 0015 	mvn.w	r0, #21
}
    62cc:	bd10      	pop	{r4, pc}

000062ce <onoff_manager_init>:
{
    62ce:	b538      	push	{r3, r4, r5, lr}
    62d0:	460c      	mov	r4, r1
	if ((mgr == NULL)
    62d2:	4605      	mov	r5, r0
    62d4:	b158      	cbz	r0, 62ee <onoff_manager_init+0x20>
	    || (transitions == NULL)
    62d6:	b151      	cbz	r1, 62ee <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    62d8:	680b      	ldr	r3, [r1, #0]
    62da:	b143      	cbz	r3, 62ee <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    62dc:	684b      	ldr	r3, [r1, #4]
    62de:	b133      	cbz	r3, 62ee <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    62e0:	2220      	movs	r2, #32
    62e2:	2100      	movs	r1, #0
    62e4:	f000 ff4d 	bl	7182 <memset>
    62e8:	612c      	str	r4, [r5, #16]
	return 0;
    62ea:	2000      	movs	r0, #0
}
    62ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    62ee:	f06f 0015 	mvn.w	r0, #21
    62f2:	e7fb      	b.n	62ec <onoff_manager_init+0x1e>

000062f4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    62f4:	b570      	push	{r4, r5, r6, lr}
    62f6:	4604      	mov	r4, r0
    62f8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    62fa:	f7ff ffd9 	bl	62b0 <validate_args>

	if (rv < 0) {
    62fe:	1e05      	subs	r5, r0, #0
    6300:	db31      	blt.n	6366 <onoff_request+0x72>
    6302:	f04f 0320 	mov.w	r3, #32
    6306:	f3ef 8111 	mrs	r1, BASEPRI
    630a:	f383 8812 	msr	BASEPRI_MAX, r3
    630e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6312:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6314:	8ba0      	ldrh	r0, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    6316:	f64f 75ff 	movw	r5, #65535	; 0xffff
    631a:	42ab      	cmp	r3, r5
    631c:	f000 0207 	and.w	r2, r0, #7
    6320:	d02e      	beq.n	6380 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    6322:	2a02      	cmp	r2, #2
    6324:	d10e      	bne.n	6344 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    6326:	3301      	adds	r3, #1
    6328:	83e3      	strh	r3, [r4, #30]
	rv = state;
    632a:	4615      	mov	r5, r2
		notify = true;
    632c:	2301      	movs	r3, #1
	__asm__ volatile(
    632e:	f381 8811 	msr	BASEPRI, r1
    6332:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6336:	b1b3      	cbz	r3, 6366 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    6338:	2300      	movs	r3, #0
    633a:	4631      	mov	r1, r6
    633c:	4620      	mov	r0, r4
    633e:	f7ff ff93 	bl	6268 <notify_one>
    6342:	e010      	b.n	6366 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    6344:	0783      	lsls	r3, r0, #30
    6346:	d001      	beq.n	634c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    6348:	2a06      	cmp	r2, #6
    634a:	d10e      	bne.n	636a <onoff_request+0x76>
	parent->next = child;
    634c:	2300      	movs	r3, #0
    634e:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    6350:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6352:	b993      	cbnz	r3, 637a <onoff_request+0x86>
	list->head = node;
    6354:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    6358:	4615      	mov	r5, r2
    635a:	b962      	cbnz	r2, 6376 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    635c:	460a      	mov	r2, r1
    635e:	4620      	mov	r0, r4
    6360:	2102      	movs	r1, #2
    6362:	f7fa fccd 	bl	d00 <process_event>
		}
	}

	return rv;
}
    6366:	4628      	mov	r0, r5
    6368:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    636a:	2a05      	cmp	r2, #5
    636c:	bf0c      	ite	eq
    636e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    6372:	f06f 0504 	mvnne.w	r5, #4
    6376:	2300      	movs	r3, #0
    6378:	e7d9      	b.n	632e <onoff_request+0x3a>
	parent->next = child;
    637a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    637c:	6066      	str	r6, [r4, #4]
}
    637e:	e7eb      	b.n	6358 <onoff_request+0x64>
		rv = -EAGAIN;
    6380:	f06f 050a 	mvn.w	r5, #10
    6384:	e7f7      	b.n	6376 <onoff_request+0x82>

00006386 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6386:	4604      	mov	r4, r0
    6388:	b508      	push	{r3, lr}
    638a:	4608      	mov	r0, r1
    638c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    638e:	461a      	mov	r2, r3
    6390:	47a0      	blx	r4
	return z_impl_z_current_get();
    6392:	f7ff faab 	bl	58ec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6396:	f7fc fd7d 	bl	2e94 <z_impl_k_thread_abort>

0000639a <outs>:
{
    639a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    639e:	4607      	mov	r7, r0
    63a0:	4688      	mov	r8, r1
    63a2:	4615      	mov	r5, r2
    63a4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    63a6:	4614      	mov	r4, r2
    63a8:	42b4      	cmp	r4, r6
    63aa:	eba4 0005 	sub.w	r0, r4, r5
    63ae:	d302      	bcc.n	63b6 <outs+0x1c>
    63b0:	b93e      	cbnz	r6, 63c2 <outs+0x28>
    63b2:	7823      	ldrb	r3, [r4, #0]
    63b4:	b12b      	cbz	r3, 63c2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    63b6:	f814 0b01 	ldrb.w	r0, [r4], #1
    63ba:	4641      	mov	r1, r8
    63bc:	47b8      	blx	r7
		if (rc < 0) {
    63be:	2800      	cmp	r0, #0
    63c0:	daf2      	bge.n	63a8 <outs+0xe>
}
    63c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000063c6 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    63c6:	4602      	mov	r2, r0
    63c8:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    63ca:	68c0      	ldr	r0, [r0, #12]
    63cc:	6814      	ldr	r4, [r2, #0]
    63ce:	42a0      	cmp	r0, r4
    63d0:	d904      	bls.n	63dc <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    63d2:	3801      	subs	r0, #1
    63d4:	1b00      	subs	r0, r0, r4
    63d6:	6008      	str	r0, [r1, #0]

		return false;
    63d8:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    63da:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    63dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
	} else if (!buffer->rd_idx) {
    63de:	b918      	cbnz	r0, 63e8 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    63e0:	3b01      	subs	r3, #1
    63e2:	1b1b      	subs	r3, r3, r4
    63e4:	600b      	str	r3, [r1, #0]
		return false;
    63e6:	e7f8      	b.n	63da <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    63e8:	1b1b      	subs	r3, r3, r4
    63ea:	600b      	str	r3, [r1, #0]
	return true;
    63ec:	2001      	movs	r0, #1
    63ee:	e7f4      	b.n	63da <free_space+0x14>

000063f0 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    63f0:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    63f2:	a901      	add	r1, sp, #4
{
    63f4:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    63f6:	f7ff ffe6 	bl	63c6 <free_space>
    63fa:	b120      	cbz	r0, 6406 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    63fc:	9b01      	ldr	r3, [sp, #4]
    63fe:	68e2      	ldr	r2, [r4, #12]
    6400:	3b01      	subs	r3, #1
    6402:	4413      	add	r3, r2
    6404:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    6406:	9801      	ldr	r0, [sp, #4]
    6408:	6a63      	ldr	r3, [r4, #36]	; 0x24
    640a:	43c0      	mvns	r0, r0
}
    640c:	4418      	add	r0, r3
    640e:	b002      	add	sp, #8
    6410:	bd10      	pop	{r4, pc}

00006412 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    6412:	b510      	push	{r4, lr}
    6414:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    6416:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    6418:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    641a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    641c:	07d2      	lsls	r2, r2, #31
    641e:	d502      	bpl.n	6426 <idx_inc+0x14>
		return i & (buffer->size - 1);
    6420:	3b01      	subs	r3, #1
    6422:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    6424:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    6426:	4298      	cmp	r0, r3
    6428:	bf28      	it	cs
    642a:	1ac0      	subcs	r0, r0, r3
    642c:	e7fa      	b.n	6424 <idx_inc+0x12>

0000642e <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    642e:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6430:	6a02      	ldr	r2, [r0, #32]
{
    6432:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    6434:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6436:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    6438:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    643c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6440:	462a      	mov	r2, r5
    6442:	6801      	ldr	r1, [r0, #0]
{
    6444:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6446:	f7ff ffe4 	bl	6412 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    644a:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    644c:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    644e:	462a      	mov	r2, r5
    6450:	4620      	mov	r0, r4
    6452:	f7ff ffde 	bl	6412 <idx_inc>
    6456:	6060      	str	r0, [r4, #4]
}
    6458:	bd38      	pop	{r3, r4, r5, pc}

0000645a <max_utilization_update>:
{
    645a:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    645c:	6903      	ldr	r3, [r0, #16]
    645e:	075b      	lsls	r3, r3, #29
{
    6460:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6462:	d506      	bpl.n	6472 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    6464:	6a85      	ldr	r5, [r0, #40]	; 0x28
    6466:	f7ff ffc3 	bl	63f0 <get_usage>
    646a:	4285      	cmp	r5, r0
    646c:	d902      	bls.n	6474 <max_utilization_update+0x1a>
    646e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6470:	62a0      	str	r0, [r4, #40]	; 0x28
}
    6472:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    6474:	4620      	mov	r0, r4
    6476:	f7ff ffbb 	bl	63f0 <get_usage>
    647a:	e7f9      	b.n	6470 <max_utilization_update+0x16>

0000647c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    647c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6480:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    6484:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
    6488:	461f      	mov	r7, r3
	*user_packet = false;
    648a:	2300      	movs	r3, #0
    648c:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    648e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    6492:	f003 0303 	and.w	r3, r3, #3
    6496:	2b02      	cmp	r3, #2
{
    6498:	4604      	mov	r4, r0
    649a:	468b      	mov	fp, r1
    649c:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    649e:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    64a2:	d103      	bne.n	64ac <drop_item_locked+0x30>
		return item->skip.len;
    64a4:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    64a8:	08ad      	lsrs	r5, r5, #2
    64aa:	d12e      	bne.n	650a <drop_item_locked+0x8e>
    64ac:	69e3      	ldr	r3, [r4, #28]
    64ae:	4630      	mov	r0, r6
    64b0:	4798      	blx	r3
    64b2:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    64b4:	f1b8 0f00 	cmp.w	r8, #0
    64b8:	d036      	beq.n	6528 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    64ba:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    64be:	079b      	lsls	r3, r3, #30
    64c0:	d52f      	bpl.n	6522 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    64c2:	f10b 0101 	add.w	r1, fp, #1
    64c6:	4620      	mov	r0, r4
    64c8:	f7ff ffb1 	bl	642e <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    64cc:	6861      	ldr	r1, [r4, #4]
    64ce:	462a      	mov	r2, r5
    64d0:	4620      	mov	r0, r4
    64d2:	f7ff ff9e 	bl	6412 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    64d6:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    64d8:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    64da:	462a      	mov	r2, r5
    64dc:	4620      	mov	r0, r4
    64de:	f7ff ff98 	bl	6412 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    64e2:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    64e4:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    64e6:	68e1      	ldr	r1, [r4, #12]
    64e8:	4620      	mov	r0, r4
    64ea:	f7ff ff92 	bl	6412 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    64ee:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
    64f0:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    64f4:	f002 0203 	and.w	r2, r2, #3
    64f8:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    64fa:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    64fe:	d10c      	bne.n	651a <drop_item_locked+0x9e>
		return item->skip.len;
    6500:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    6504:	089b      	lsrs	r3, r3, #2
    6506:	d008      	beq.n	651a <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    6508:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    650a:	68e1      	ldr	r1, [r4, #12]
    650c:	462a      	mov	r2, r5
    650e:	4620      	mov	r0, r4
    6510:	f7ff ff7f 	bl	6412 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    6514:	e9c4 0002 	strd	r0, r0, [r4, #8]
    6518:	e007      	b.n	652a <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    651a:	69e3      	ldr	r3, [r4, #28]
    651c:	4630      	mov	r0, r6
    651e:	4798      	blx	r3
    6520:	4405      	add	r5, r0
			*user_packet = true;
    6522:	2301      	movs	r3, #1
    6524:	703b      	strb	r3, [r7, #0]
    6526:	e7f0      	b.n	650a <drop_item_locked+0x8e>
		item = NULL;
    6528:	4646      	mov	r6, r8
	}

	return item;
}
    652a:	4630      	mov	r0, r6
    652c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006530 <mpsc_pbuf_init>:
{
    6530:	b538      	push	{r3, r4, r5, lr}
    6532:	460d      	mov	r5, r1
    6534:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    6536:	2220      	movs	r2, #32
    6538:	2100      	movs	r1, #0
    653a:	f000 fe22 	bl	7182 <memset>
	buffer->get_wlen = cfg->get_wlen;
    653e:	68eb      	ldr	r3, [r5, #12]
    6540:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    6542:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    6544:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    6546:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    6548:	682b      	ldr	r3, [r5, #0]
    654a:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    654c:	2300      	movs	r3, #0
    654e:	62a3      	str	r3, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    6550:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    6552:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    6554:	b122      	cbz	r2, 6560 <mpsc_pbuf_init+0x30>
    6556:	1e51      	subs	r1, r2, #1
    6558:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    655a:	bf08      	it	eq
    655c:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    6560:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6562:	2201      	movs	r2, #1
    6564:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6568:	2100      	movs	r1, #0
}
    656a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    656e:	f000 bca2 	b.w	6eb6 <z_impl_k_sem_init>

00006572 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    6572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6576:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    6578:	6a43      	ldr	r3, [r0, #36]	; 0x24
    657a:	3b01      	subs	r3, #1
    657c:	428b      	cmp	r3, r1
{
    657e:	b085      	sub	sp, #20
    6580:	4604      	mov	r4, r0
    6582:	460f      	mov	r7, r1
    6584:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    6586:	d364      	bcc.n	6652 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    6588:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    658a:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    658c:	f100 0b2c 	add.w	fp, r0, #44	; 0x2c
	__asm__ volatile(
    6590:	f04f 0320 	mov.w	r3, #32
    6594:	f3ef 8611 	mrs	r6, BASEPRI
    6598:	f383 8812 	msr	BASEPRI_MAX, r3
    659c:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    65a0:	a903      	add	r1, sp, #12
    65a2:	4620      	mov	r0, r4
    65a4:	f7ff ff0f 	bl	63c6 <free_space>
		if (free_wlen >= wlen) {
    65a8:	9903      	ldr	r1, [sp, #12]
    65aa:	42b9      	cmp	r1, r7
    65ac:	d321      	bcc.n	65f2 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    65ae:	6821      	ldr	r1, [r4, #0]
			item =
    65b0:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
    65b2:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    65b6:	f022 0203 	bic.w	r2, r2, #3
    65ba:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    65be:	4620      	mov	r0, r4
    65c0:	463a      	mov	r2, r7
			item =
    65c2:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    65c6:	f7ff ff24 	bl	6412 <idx_inc>
		cont = false;
    65ca:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    65cc:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    65ce:	f386 8811 	msr	BASEPRI, r6
    65d2:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    65d6:	2b00      	cmp	r3, #0
    65d8:	d03d      	beq.n	6656 <mpsc_pbuf_alloc+0xe4>
    65da:	2d00      	cmp	r5, #0
    65dc:	d0d8      	beq.n	6590 <mpsc_pbuf_alloc+0x1e>
    65de:	f89d 300b 	ldrb.w	r3, [sp, #11]
    65e2:	2b00      	cmp	r3, #0
    65e4:	d0d4      	beq.n	6590 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    65e6:	4629      	mov	r1, r5
    65e8:	69a3      	ldr	r3, [r4, #24]
    65ea:	4620      	mov	r0, r4
    65ec:	4798      	blx	r3
			dropped_item = NULL;
    65ee:	2500      	movs	r5, #0
    65f0:	e7ce      	b.n	6590 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    65f2:	b128      	cbz	r0, 6600 <mpsc_pbuf_alloc+0x8e>
    65f4:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    65f6:	4620      	mov	r0, r4
    65f8:	f7ff ff19 	bl	642e <add_skip_item>
			cont = true;
    65fc:	9b01      	ldr	r3, [sp, #4]
    65fe:	e7e6      	b.n	65ce <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6600:	ea58 0309 	orrs.w	r3, r8, r9
    6604:	d017      	beq.n	6636 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    6606:	f000 fc35 	bl	6e74 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    660a:	b9a0      	cbnz	r0, 6636 <mpsc_pbuf_alloc+0xc4>
    660c:	f386 8811 	msr	BASEPRI, r6
    6610:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    6614:	4642      	mov	r2, r8
    6616:	464b      	mov	r3, r9
    6618:	4658      	mov	r0, fp
    661a:	f7fe fe4d 	bl	52b8 <z_impl_k_sem_take>
	__asm__ volatile(
    661e:	f04f 0320 	mov.w	r3, #32
    6622:	f3ef 8611 	mrs	r6, BASEPRI
    6626:	f383 8812 	msr	BASEPRI_MAX, r3
    662a:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    662e:	fab0 f380 	clz	r3, r0
    6632:	095b      	lsrs	r3, r3, #5
    6634:	e7cb      	b.n	65ce <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    6636:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    6638:	9903      	ldr	r1, [sp, #12]
    663a:	f10d 030b 	add.w	r3, sp, #11
    663e:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6642:	4620      	mov	r0, r4
    6644:	f7ff ff1a 	bl	647c <drop_item_locked>
			cont = dropped_item != NULL;
    6648:	1e03      	subs	r3, r0, #0
    664a:	4605      	mov	r5, r0
    664c:	bf18      	it	ne
    664e:	2301      	movne	r3, #1
    6650:	e7bd      	b.n	65ce <mpsc_pbuf_alloc+0x5c>
		return NULL;
    6652:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    6656:	4650      	mov	r0, sl
    6658:	b005      	add	sp, #20
    665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000665e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    665e:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    6660:	69c3      	ldr	r3, [r0, #28]
{
    6662:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6664:	4608      	mov	r0, r1
{
    6666:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6668:	4798      	blx	r3
    666a:	4602      	mov	r2, r0
    666c:	f04f 0320 	mov.w	r3, #32
    6670:	f3ef 8611 	mrs	r6, BASEPRI
    6674:	f383 8812 	msr	BASEPRI_MAX, r3
    6678:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    667c:	782b      	ldrb	r3, [r5, #0]
    667e:	f043 0301 	orr.w	r3, r3, #1
    6682:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6684:	6861      	ldr	r1, [r4, #4]
    6686:	4620      	mov	r0, r4
    6688:	f7ff fec3 	bl	6412 <idx_inc>
    668c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    668e:	4620      	mov	r0, r4
    6690:	f7ff fee3 	bl	645a <max_utilization_update>
	__asm__ volatile(
    6694:	f386 8811 	msr	BASEPRI, r6
    6698:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    669c:	bd70      	pop	{r4, r5, r6, pc}

0000669e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    669e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66a2:	4604      	mov	r4, r0
	__asm__ volatile(
    66a4:	f04f 0320 	mov.w	r3, #32
    66a8:	f3ef 8611 	mrs	r6, BASEPRI
    66ac:	f383 8812 	msr	BASEPRI_MAX, r3
    66b0:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    66b4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    66b8:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    66ba:	bf88      	it	hi
    66bc:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    66be:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    66c0:	b1f3      	cbz	r3, 6700 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    66c2:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    66c4:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    66c8:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    66cc:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    66d0:	d016      	beq.n	6700 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    66d2:	2b02      	cmp	r3, #2
    66d4:	d103      	bne.n	66de <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    66d6:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    66da:	08ad      	lsrs	r5, r5, #2
    66dc:	d115      	bne.n	670a <mpsc_pbuf_claim+0x6c>
    66de:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    66e0:	69e3      	ldr	r3, [r4, #28]
			if (skip || !is_valid(item)) {
    66e2:	d50f      	bpl.n	6704 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    66e4:	f042 0202 	orr.w	r2, r2, #2
    66e8:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    66ec:	4640      	mov	r0, r8
    66ee:	4798      	blx	r3
    66f0:	4639      	mov	r1, r7
    66f2:	4602      	mov	r2, r0
    66f4:	4620      	mov	r0, r4
    66f6:	f7ff fe8c 	bl	6412 <idx_inc>
		cont = false;
    66fa:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    66fc:	60a0      	str	r0, [r4, #8]
    66fe:	e011      	b.n	6724 <mpsc_pbuf_claim+0x86>
			item = NULL;
    6700:	4698      	mov	r8, r3
    6702:	e00f      	b.n	6724 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    6704:	4640      	mov	r0, r8
    6706:	4798      	blx	r3
    6708:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    670a:	68a1      	ldr	r1, [r4, #8]
    670c:	462a      	mov	r2, r5
    670e:	4620      	mov	r0, r4
    6710:	f7ff fe7f 	bl	6412 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    6714:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    6716:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    6718:	462a      	mov	r2, r5
    671a:	4620      	mov	r0, r4
    671c:	f7ff fe79 	bl	6412 <idx_inc>
				cont = true;
    6720:	2301      	movs	r3, #1
				buffer->rd_idx =
    6722:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6724:	f386 8811 	msr	BASEPRI, r6
    6728:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    672c:	2b00      	cmp	r3, #0
    672e:	d1b9      	bne.n	66a4 <mpsc_pbuf_claim+0x6>

	return item;
}
    6730:	4640      	mov	r0, r8
    6732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006736 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    6736:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    6738:	69c3      	ldr	r3, [r0, #28]
{
    673a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    673c:	4608      	mov	r0, r1
{
    673e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6740:	4798      	blx	r3
    6742:	4602      	mov	r2, r0
	__asm__ volatile(
    6744:	f04f 0320 	mov.w	r3, #32
    6748:	f3ef 8611 	mrs	r6, BASEPRI
    674c:	f383 8812 	msr	BASEPRI_MAX, r3
    6750:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    6754:	782b      	ldrb	r3, [r5, #0]
    6756:	f36f 0300 	bfc	r3, #0, #1
    675a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    675c:	6923      	ldr	r3, [r4, #16]
    675e:	079b      	lsls	r3, r3, #30
    6760:	d505      	bpl.n	676e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    6762:	68e1      	ldr	r1, [r4, #12]
    6764:	6a23      	ldr	r3, [r4, #32]
    6766:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    676a:	429d      	cmp	r5, r3
    676c:	d112      	bne.n	6794 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    676e:	782b      	ldrb	r3, [r5, #0]
    6770:	f36f 0341 	bfc	r3, #1, #1
    6774:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    6776:	68e1      	ldr	r1, [r4, #12]
    6778:	4620      	mov	r0, r4
    677a:	f7ff fe4a 	bl	6412 <idx_inc>
    677e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6780:	f386 8811 	msr	BASEPRI, r6
    6784:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    6788:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    678c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6790:	f7fe bd72 	b.w	5278 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    6794:	682b      	ldr	r3, [r5, #0]
    6796:	f360 039f 	bfi	r3, r0, #2, #30
    679a:	602b      	str	r3, [r5, #0]
    679c:	e7f0      	b.n	6780 <mpsc_pbuf_free+0x4a>

0000679e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    679e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    67a2:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    67a4:	bf8a      	itet	hi
    67a6:	6a40      	ldrhi	r0, [r0, #36]	; 0x24
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    67a8:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    67aa:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    67ac:	1e18      	subs	r0, r3, #0
    67ae:	bf18      	it	ne
    67b0:	2001      	movne	r0, #1
    67b2:	4770      	bx	lr

000067b4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    67b4:	4770      	bx	lr

000067b6 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    67b6:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    67b8:	075b      	lsls	r3, r3, #29
    67ba:	d40b      	bmi.n	67d4 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    67bc:	6803      	ldr	r3, [r0, #0]
    67be:	8840      	ldrh	r0, [r0, #2]
    67c0:	f3c3 2349 	ubfx	r3, r3, #9, #10
    67c4:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    67c8:	4418      	add	r0, r3
    67ca:	3017      	adds	r0, #23
    67cc:	f020 0007 	bic.w	r0, r0, #7
    67d0:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    67d2:	4770      	bx	lr
	return 0;
    67d4:	2000      	movs	r0, #0
}
    67d6:	4770      	bx	lr

000067d8 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    67d8:	f000 b9e7 	b.w	6baa <sys_clock_cycle_get_32>

000067dc <dummy_timestamp>:
    67dc:	2000      	movs	r0, #0
    67de:	4770      	bx	lr

000067e0 <z_log_vprintk>:
{
    67e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    67e2:	2300      	movs	r3, #0
    67e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    67e8:	e9cd 3300 	strd	r3, r3, [sp]
    67ec:	461a      	mov	r2, r3
    67ee:	4619      	mov	r1, r3
    67f0:	4618      	mov	r0, r3
    67f2:	f7fb fb5d 	bl	1eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
    67f6:	b005      	add	sp, #20
    67f8:	f85d fb04 	ldr.w	pc, [sp], #4

000067fc <notify_drop>:
	z_log_dropped(true);
    67fc:	2001      	movs	r0, #1
    67fe:	f7fa bfe1 	b.w	17c4 <z_log_dropped>

00006802 <get_msg>:
{
    6802:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    6804:	f7fb f852 	bl	18ac <z_log_msg2_claim>
}
    6808:	bd08      	pop	{r3, pc}

0000680a <z_log_get_tag>:
}
    680a:	2000      	movs	r0, #0
    680c:	4770      	bx	lr

0000680e <buffer_write>:
{
    680e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6810:	4606      	mov	r6, r0
    6812:	460d      	mov	r5, r1
    6814:	4614      	mov	r4, r2
    6816:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    6818:	4621      	mov	r1, r4
    681a:	4628      	mov	r0, r5
    681c:	463a      	mov	r2, r7
    681e:	47b0      	blx	r6
	} while (len != 0);
    6820:	1a24      	subs	r4, r4, r0
		buf += processed;
    6822:	4405      	add	r5, r0
	} while (len != 0);
    6824:	d1f8      	bne.n	6818 <buffer_write+0xa>
}
    6826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006828 <log_output_flush>:
		     output->control_block->offset,
    6828:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    682a:	6881      	ldr	r1, [r0, #8]
{
    682c:	b510      	push	{r4, lr}
    682e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    6830:	e9d2 2300 	ldrd	r2, r3, [r2]
    6834:	6800      	ldr	r0, [r0, #0]
    6836:	f7ff ffea 	bl	680e <buffer_write>
	output->control_block->offset = 0;
    683a:	6863      	ldr	r3, [r4, #4]
    683c:	2200      	movs	r2, #0
    683e:	601a      	str	r2, [r3, #0]
}
    6840:	bd10      	pop	{r4, pc}

00006842 <out_func>:
{
    6842:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    6844:	684b      	ldr	r3, [r1, #4]
    6846:	681a      	ldr	r2, [r3, #0]
    6848:	68cb      	ldr	r3, [r1, #12]
    684a:	429a      	cmp	r2, r3
{
    684c:	4605      	mov	r5, r0
    684e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    6850:	d102      	bne.n	6858 <out_func+0x16>
		log_output_flush(out_ctx);
    6852:	4608      	mov	r0, r1
    6854:	f7ff ffe8 	bl	6828 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6858:	6863      	ldr	r3, [r4, #4]
    685a:	f3bf 8f5b 	dmb	ish
    685e:	e853 2f00 	ldrex	r2, [r3]
    6862:	1c51      	adds	r1, r2, #1
    6864:	e843 1000 	strex	r0, r1, [r3]
    6868:	2800      	cmp	r0, #0
    686a:	d1f8      	bne.n	685e <out_func+0x1c>
    686c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    6870:	68a3      	ldr	r3, [r4, #8]
    6872:	549d      	strb	r5, [r3, r2]
}
    6874:	2000      	movs	r0, #0
    6876:	bd38      	pop	{r3, r4, r5, pc}

00006878 <cr_out_func>:
{
    6878:	b538      	push	{r3, r4, r5, lr}
    687a:	4605      	mov	r5, r0
    687c:	460c      	mov	r4, r1
	out_func(c, ctx);
    687e:	f7ff ffe0 	bl	6842 <out_func>
	if (c == '\n') {
    6882:	2d0a      	cmp	r5, #10
    6884:	d103      	bne.n	688e <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    6886:	4621      	mov	r1, r4
    6888:	200d      	movs	r0, #13
    688a:	f7ff ffda 	bl	6842 <out_func>
}
    688e:	2000      	movs	r0, #0
    6890:	bd38      	pop	{r3, r4, r5, pc}

00006892 <z_log_msg2_finalize>:
{
    6892:	b570      	push	{r4, r5, r6, lr}
    6894:	460e      	mov	r6, r1
    6896:	4615      	mov	r5, r2
    6898:	4619      	mov	r1, r3
	if (!msg) {
    689a:	4604      	mov	r4, r0
    689c:	b918      	cbnz	r0, 68a6 <z_log_msg2_finalize+0x14>
}
    689e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    68a2:	f7fa bf8f 	b.w	17c4 <z_log_dropped>
	if (data) {
    68a6:	b143      	cbz	r3, 68ba <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    68a8:	f100 0310 	add.w	r3, r0, #16
    68ac:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    68b0:	4418      	add	r0, r3
    68b2:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    68b6:	f000 fc43 	bl	7140 <memcpy>
	msg->hdr.source = source;
    68ba:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    68be:	4620      	mov	r0, r4
}
    68c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    68c4:	f7fb b8b4 	b.w	1a30 <z_log_msg2_commit>

000068c8 <z_impl_z_log_msg2_static_create>:
{
    68c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    68cc:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    68d0:	f3c1 2649 	ubfx	r6, r1, #9, #10
    68d4:	b089      	sub	sp, #36	; 0x24
    68d6:	4681      	mov	r9, r0
    68d8:	460d      	mov	r5, r1
    68da:	4690      	mov	r8, r2
    68dc:	469a      	mov	sl, r3
    68de:	3417      	adds	r4, #23
	if (inlen > 0) {
    68e0:	b386      	cbz	r6, 6944 <z_impl_z_log_msg2_static_create+0x7c>
		len = cbprintf_package_copy(package, inlen,
    68e2:	2302      	movs	r3, #2
    68e4:	9300      	str	r3, [sp, #0]
    68e6:	f04f 0b04 	mov.w	fp, #4
    68ea:	2300      	movs	r3, #0
    68ec:	af06      	add	r7, sp, #24
    68ee:	4631      	mov	r1, r6
    68f0:	461a      	mov	r2, r3
    68f2:	f8cd b008 	str.w	fp, [sp, #8]
    68f6:	9701      	str	r7, [sp, #4]
    68f8:	4640      	mov	r0, r8
    68fa:	9605      	str	r6, [sp, #20]
    68fc:	f7fa f89a 	bl	a34 <cbprintf_package_copy>
		out_desc.package_len = len;
    6900:	f3c0 0309 	ubfx	r3, r0, #0, #10
    6904:	1918      	adds	r0, r3, r4
    6906:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    690a:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    690c:	461e      	mov	r6, r3
    690e:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    6910:	f7fa ffc4 	bl	189c <z_log_msg2_alloc>
		if (msg) {
    6914:	4604      	mov	r4, r0
    6916:	b150      	cbz	r0, 692e <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
    6918:	2302      	movs	r3, #2
    691a:	9300      	str	r3, [sp, #0]
    691c:	f100 0210 	add.w	r2, r0, #16
    6920:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    6924:	9b04      	ldr	r3, [sp, #16]
    6926:	9905      	ldr	r1, [sp, #20]
    6928:	4640      	mov	r0, r8
    692a:	f7fa f883 	bl	a34 <cbprintf_package_copy>
	z_log_msg2_finalize(msg, source, out_desc, data);
    692e:	f366 2552 	bfi	r5, r6, #9, #10
    6932:	4653      	mov	r3, sl
    6934:	462a      	mov	r2, r5
    6936:	4649      	mov	r1, r9
    6938:	4620      	mov	r0, r4
}
    693a:	b009      	add	sp, #36	; 0x24
    693c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    6940:	f7ff bfa7 	b.w	6892 <z_log_msg2_finalize>
    6944:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    6948:	0880      	lsrs	r0, r0, #2
    694a:	f7fa ffa7 	bl	189c <z_log_msg2_alloc>
    694e:	4604      	mov	r4, r0
    6950:	e7ed      	b.n	692e <z_impl_z_log_msg2_static_create+0x66>

00006952 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
    6952:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
    6954:	f7fb fb94 	bl	2080 <__do_global_ctors_aux>
	__do_init_array_aux();
}
    6958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
    695c:	f7fb bb82 	b.w	2064 <__do_init_array_aux>

00006960 <abort_function>:
{
    6960:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6962:	2000      	movs	r0, #0
    6964:	f7fa fea6 	bl	16b4 <sys_reboot>

00006968 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6968:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    696a:	6800      	ldr	r0, [r0, #0]
    696c:	f7fb bde0 	b.w	2530 <z_arm_fatal_error>

00006970 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6970:	2100      	movs	r1, #0
    6972:	2001      	movs	r0, #1
    6974:	f7fb bddc 	b.w	2530 <z_arm_fatal_error>

00006978 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6978:	b508      	push	{r3, lr}
	handler();
    697a:	f7fb fe75 	bl	2668 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    697e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6982:	f7fb bf2d 	b.w	27e0 <z_arm_exc_exit>

00006986 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    6986:	2300      	movs	r3, #0
    6988:	f7ff bf9e 	b.w	68c8 <z_impl_z_log_msg2_static_create>

0000698c <malloc_prepare>:
}
    698c:	2000      	movs	r0, #0
    698e:	4770      	bx	lr

00006990 <_stdout_hook_default>:
}
    6990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6994:	4770      	bx	lr

00006996 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6996:	2806      	cmp	r0, #6
    6998:	d108      	bne.n	69ac <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    699a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    699e:	2201      	movs	r2, #1
    69a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    69a4:	f3bf 8f4f 	dsb	sy
        __WFE();
    69a8:	bf20      	wfe
    while (true)
    69aa:	e7fd      	b.n	69a8 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    69ac:	4770      	bx	lr

000069ae <pm_state_exit_post_ops>:
    69ae:	2300      	movs	r3, #0
    69b0:	f383 8811 	msr	BASEPRI, r3
    69b4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    69b8:	4770      	bx	lr

000069ba <adc_context_on_timer_expired>:
    69ba:	f1a0 0308 	sub.w	r3, r0, #8
    69be:	f3bf 8f5b 	dmb	ish
    69c2:	e853 2f00 	ldrex	r2, [r3]
    69c6:	1c51      	adds	r1, r2, #1
    69c8:	e843 1c00 	strex	ip, r1, [r3]
    69cc:	f1bc 0f00 	cmp.w	ip, #0
    69d0:	d1f7      	bne.n	69c2 <adc_context_on_timer_expired+0x8>
    69d2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    69d6:	b91a      	cbnz	r2, 69e0 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    69d8:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    69dc:	f7fc bb94 	b.w	3108 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    69e0:	f06f 030f 	mvn.w	r3, #15
    69e4:	6583      	str	r3, [r0, #88]	; 0x58
}
    69e6:	4770      	bx	lr

000069e8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    69e8:	6903      	ldr	r3, [r0, #16]
    69ea:	b2c9      	uxtb	r1, r1
    69ec:	220c      	movs	r2, #12
    69ee:	fb01 3302 	mla	r3, r1, r2, r3
    69f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    69f4:	f000 0007 	and.w	r0, r0, #7
    69f8:	4770      	bx	lr

000069fa <set_on_state>:
	__asm__ volatile(
    69fa:	f04f 0320 	mov.w	r3, #32
    69fe:	f3ef 8211 	mrs	r2, BASEPRI
    6a02:	f383 8812 	msr	BASEPRI_MAX, r3
    6a06:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6a0a:	6803      	ldr	r3, [r0, #0]
    6a0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6a10:	f043 0302 	orr.w	r3, r3, #2
    6a14:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6a16:	f382 8811 	msr	BASEPRI, r2
    6a1a:	f3bf 8f6f 	isb	sy
}
    6a1e:	4770      	bx	lr

00006a20 <stop>:
{
    6a20:	4603      	mov	r3, r0
    6a22:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6a24:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6a26:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6a28:	f04f 0420 	mov.w	r4, #32
    6a2c:	f3ef 8611 	mrs	r6, BASEPRI
    6a30:	f384 8812 	msr	BASEPRI_MAX, r4
    6a34:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6a38:	250c      	movs	r5, #12
    6a3a:	fb05 0401 	mla	r4, r5, r1, r0
    6a3e:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6a40:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6a44:	d001      	beq.n	6a4a <stop+0x2a>
    6a46:	42a2      	cmp	r2, r4
    6a48:	d111      	bne.n	6a6e <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6a4a:	fb05 0001 	mla	r0, r5, r1, r0
    6a4e:	2201      	movs	r2, #1
    6a50:	6482      	str	r2, [r0, #72]	; 0x48
	int err = 0;
    6a52:	2000      	movs	r0, #0
	__asm__ volatile(
    6a54:	f386 8811 	msr	BASEPRI, r6
    6a58:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6a5c:	b930      	cbnz	r0, 6a6c <stop+0x4c>
	get_sub_config(dev, type)->stop();
    6a5e:	685b      	ldr	r3, [r3, #4]
    6a60:	220c      	movs	r2, #12
    6a62:	fb02 3101 	mla	r1, r2, r1, r3
    6a66:	684b      	ldr	r3, [r1, #4]
    6a68:	4798      	blx	r3
	return 0;
    6a6a:	2000      	movs	r0, #0
}
    6a6c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    6a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6a72:	e7ef      	b.n	6a54 <stop+0x34>

00006a74 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6a74:	2280      	movs	r2, #128	; 0x80
    6a76:	f7ff bfd3 	b.w	6a20 <stop>

00006a7a <async_start>:
{
    6a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a7c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6a7e:	6904      	ldr	r4, [r0, #16]
{
    6a80:	4605      	mov	r5, r0
    6a82:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6a84:	f04f 0020 	mov.w	r0, #32
    6a88:	f3ef 8c11 	mrs	ip, BASEPRI
    6a8c:	f380 8812 	msr	BASEPRI_MAX, r0
    6a90:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6a94:	260c      	movs	r6, #12
    6a96:	fb06 4601 	mla	r6, r6, r1, r4
    6a9a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6a9c:	f000 0e07 	and.w	lr, r0, #7
    6aa0:	f1be 0f01 	cmp.w	lr, #1
    6aa4:	d110      	bne.n	6ac8 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6aa6:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    6aa8:	2600      	movs	r6, #0
	__asm__ volatile(
    6aaa:	f38c 8811 	msr	BASEPRI, ip
    6aae:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6ab2:	b93e      	cbnz	r6, 6ac4 <async_start+0x4a>
	subdata->cb = cb;
    6ab4:	200c      	movs	r0, #12
    6ab6:	4341      	muls	r1, r0
    6ab8:	440c      	add	r4, r1
	subdata->user_data = user_data;
    6aba:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    6abe:	686b      	ldr	r3, [r5, #4]
    6ac0:	585b      	ldr	r3, [r3, r1]
    6ac2:	4798      	blx	r3
}
    6ac4:	4630      	mov	r0, r6
    6ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6ac8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    6acc:	4287      	cmp	r7, r0
    6ace:	bf14      	ite	ne
    6ad0:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    6ad4:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    6ad8:	e7e7      	b.n	6aaa <async_start+0x30>

00006ada <api_start>:
{
    6ada:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6adc:	2480      	movs	r4, #128	; 0x80
    6ade:	9400      	str	r4, [sp, #0]
    6ae0:	f7ff ffcb 	bl	6a7a <async_start>
}
    6ae4:	b002      	add	sp, #8
    6ae6:	bd10      	pop	{r4, pc}

00006ae8 <onoff_started_callback>:
	return &data->mgr[type];
    6ae8:	6900      	ldr	r0, [r0, #16]
    6aea:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6aec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    6af0:	2100      	movs	r1, #0
    6af2:	4710      	bx	r2

00006af4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6af4:	2000      	movs	r0, #0
    6af6:	f000 b880 	b.w	6bfa <nrfx_clock_start>

00006afa <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6afa:	2000      	movs	r0, #0
    6afc:	f000 b8b8 	b.w	6c70 <nrfx_clock_stop>

00006b00 <blocking_start_callback>:
{
    6b00:	4610      	mov	r0, r2
    6b02:	f7fe bbb9 	b.w	5278 <z_impl_k_sem_give>

00006b06 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b06:	6843      	ldr	r3, [r0, #4]
    6b08:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6b0a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6b0e:	600b      	str	r3, [r1, #0]
}
    6b10:	2000      	movs	r0, #0
    6b12:	4770      	bx	lr

00006b14 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b14:	6843      	ldr	r3, [r0, #4]
    6b16:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6b18:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6b1c:	4042      	eors	r2, r0
    6b1e:	400a      	ands	r2, r1
    6b20:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6b22:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6b26:	2000      	movs	r0, #0
    6b28:	4770      	bx	lr

00006b2a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b2a:	6843      	ldr	r3, [r0, #4]
    6b2c:	685b      	ldr	r3, [r3, #4]
}
    6b2e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6b30:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6b34:	4770      	bx	lr

00006b36 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b36:	6843      	ldr	r3, [r0, #4]
    6b38:	685b      	ldr	r3, [r3, #4]
}
    6b3a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6b3c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6b40:	4770      	bx	lr

00006b42 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b42:	6843      	ldr	r3, [r0, #4]
    6b44:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6b46:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6b4a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6b4c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6b50:	2000      	movs	r0, #0
    6b52:	4770      	bx	lr

00006b54 <gpio_nrfx_manage_callback>:
	return port->data;
    6b54:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6b56:	6858      	ldr	r0, [r3, #4]
{
    6b58:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    6b5a:	b158      	cbz	r0, 6b74 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6b5c:	2400      	movs	r4, #0
    6b5e:	4281      	cmp	r1, r0
    6b60:	d112      	bne.n	6b88 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    6b62:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    6b64:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    6b66:	b954      	cbnz	r4, 6b7e <gpio_nrfx_manage_callback+0x2a>
    6b68:	428d      	cmp	r5, r1
	list->head = node;
    6b6a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6b6c:	d100      	bne.n	6b70 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    6b6e:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6b70:	2000      	movs	r0, #0
    6b72:	6008      	str	r0, [r1, #0]
	if (set) {
    6b74:	b96a      	cbnz	r2, 6b92 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    6b76:	2000      	movs	r0, #0
}
    6b78:	bd30      	pop	{r4, r5, pc}
    6b7a:	4628      	mov	r0, r5
    6b7c:	e7ef      	b.n	6b5e <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    6b7e:	428d      	cmp	r5, r1
	parent->next = child;
    6b80:	6020      	str	r0, [r4, #0]
	list->tail = node;
    6b82:	bf08      	it	eq
    6b84:	609c      	streq	r4, [r3, #8]
}
    6b86:	e7f3      	b.n	6b70 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    6b88:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6b8a:	4604      	mov	r4, r0
    6b8c:	2d00      	cmp	r5, #0
    6b8e:	d1f4      	bne.n	6b7a <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6b90:	b13a      	cbz	r2, 6ba2 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    6b92:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    6b94:	685a      	ldr	r2, [r3, #4]
    6b96:	600a      	str	r2, [r1, #0]
	list->head = node;
    6b98:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6b9a:	2800      	cmp	r0, #0
    6b9c:	d1eb      	bne.n	6b76 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    6b9e:	6099      	str	r1, [r3, #8]
}
    6ba0:	e7ea      	b.n	6b78 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6ba2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6ba6:	e7e7      	b.n	6b78 <gpio_nrfx_manage_callback+0x24>

00006ba8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6ba8:	4770      	bx	lr

00006baa <sys_clock_cycle_get_32>:
{
    6baa:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    6bac:	f7fd f838 	bl	3c20 <z_nrf_rtc_timer_read>
}
    6bb0:	bd08      	pop	{r3, pc}

00006bb2 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6bb2:	f7ff b8e9 	b.w	5d88 <nrf_cc3xx_platform_init_no_rng>

00006bb6 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6bb6:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6bb8:	f7fb fbdc 	bl	2374 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6bbc:	f7fb fc8e 	bl	24dc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6bc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6bc4:	f7ff b8e0 	b.w	5d88 <nrf_cc3xx_platform_init_no_rng>

00006bc8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6bc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6bcc:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    6bd0:	f1a0 0308 	sub.w	r3, r0, #8
    6bd4:	4258      	negs	r0, r3
    6bd6:	4158      	adcs	r0, r3
    6bd8:	4770      	bx	lr

00006bda <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6bda:	4700      	bx	r0

00006bdc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6bdc:	f000 ba82 	b.w	70e4 <z_impl_k_busy_wait>

00006be0 <nrfx_clock_enable>:
{
    6be0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6be2:	2000      	movs	r0, #0
    6be4:	f7fb fd1a 	bl	261c <arch_irq_is_enabled>
    6be8:	b908      	cbnz	r0, 6bee <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6bea:	f7fb fd07 	bl	25fc <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    6bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6bf2:	2202      	movs	r2, #2
    6bf4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6bf8:	bd08      	pop	{r3, pc}

00006bfa <nrfx_clock_start>:
{
    6bfa:	b508      	push	{r3, lr}
    switch (domain)
    6bfc:	b110      	cbz	r0, 6c04 <nrfx_clock_start+0xa>
    6bfe:	2801      	cmp	r0, #1
    6c00:	d02b      	beq.n	6c5a <nrfx_clock_start+0x60>
}
    6c02:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c08:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6c0c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    6c10:	03c9      	lsls	r1, r1, #15
    6c12:	d40c      	bmi.n	6c2e <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6c14:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6c18:	07d2      	lsls	r2, r2, #31
    6c1a:	d50f      	bpl.n	6c3c <nrfx_clock_start+0x42>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6c1c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    6c20:	f002 0203 	and.w	r2, r2, #3
    if (!is_correct_clk)
    6c24:	2a02      	cmp	r2, #2
    6c26:	d106      	bne.n	6c36 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    6c28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    6c2c:	e7e9      	b.n	6c02 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6c2e:	f002 0303 	and.w	r3, r2, #3
    if (!is_correct_clk)
    6c32:	2b02      	cmp	r3, #2
    6c34:	d002      	beq.n	6c3c <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6c36:	2000      	movs	r0, #0
    6c38:	f7fd fb0c 	bl	4254 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c40:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c42:	2100      	movs	r1, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    6c44:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c48:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    6c4c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    6c50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c54:	2201      	movs	r2, #1
    6c56:	609a      	str	r2, [r3, #8]
}
    6c58:	e7d3      	b.n	6c02 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c5e:	2200      	movs	r2, #0
    6c60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6c64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6c68:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c6c:	6018      	str	r0, [r3, #0]
}
    6c6e:	e7c8      	b.n	6c02 <nrfx_clock_start+0x8>

00006c70 <nrfx_clock_stop>:
    clock_stop(domain);
    6c70:	f7fd baf0 	b.w	4254 <clock_stop>

00006c74 <nrf_gpio_reconfigure>:
{
    6c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c76:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c78:	a801      	add	r0, sp, #4
{
    6c7a:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    6c7e:	4617      	mov	r7, r2
    6c80:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c82:	f7fd fb75 	bl	4370 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6c86:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6c88:	2f00      	cmp	r7, #0
    6c8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6c8e:	bf14      	ite	ne
    6c90:	2302      	movne	r3, #2
    6c92:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6c94:	2900      	cmp	r1, #0
    6c96:	bf18      	it	ne
    6c98:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6c9c:	2d00      	cmp	r5, #0
    6c9e:	bf14      	ite	ne
    6ca0:	f04f 0c0c 	movne.w	ip, #12
    6ca4:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6ca8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6caa:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6cae:	bf14      	ite	ne
    6cb0:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    6cb4:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6cb8:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6cba:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6cbe:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6cc2:	bf14      	ite	ne
    6cc4:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    6cc8:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6ccc:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    6cd0:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6cd4:	b101      	cbz	r1, 6cd8 <nrf_gpio_reconfigure+0x64>
    6cd6:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6cd8:	b10f      	cbz	r7, 6cde <nrf_gpio_reconfigure+0x6a>
    6cda:	783f      	ldrb	r7, [r7, #0]
    6cdc:	007f      	lsls	r7, r7, #1
    6cde:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6ce0:	b10d      	cbz	r5, 6ce6 <nrf_gpio_reconfigure+0x72>
    6ce2:	782d      	ldrb	r5, [r5, #0]
    6ce4:	00ad      	lsls	r5, r5, #2
    6ce6:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6ce8:	b10c      	cbz	r4, 6cee <nrf_gpio_reconfigure+0x7a>
    6cea:	7822      	ldrb	r2, [r4, #0]
    6cec:	0214      	lsls	r4, r2, #8
    6cee:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    6cf0:	b10e      	cbz	r6, 6cf6 <nrf_gpio_reconfigure+0x82>
    6cf2:	7836      	ldrb	r6, [r6, #0]
    6cf4:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6cf6:	432c      	orrs	r4, r5
    6cf8:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    6cfa:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    6cfe:	b003      	add	sp, #12
    6d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d02 <nrf_gpio_cfg_sense_set>:
{
    6d02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6d04:	f10d 030f 	add.w	r3, sp, #15
    6d08:	9301      	str	r3, [sp, #4]
    6d0a:	2300      	movs	r3, #0
{
    6d0c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6d10:	9300      	str	r3, [sp, #0]
    6d12:	461a      	mov	r2, r3
    6d14:	4619      	mov	r1, r3
    6d16:	f7ff ffad 	bl	6c74 <nrf_gpio_reconfigure>
}
    6d1a:	b005      	add	sp, #20
    6d1c:	f85d fb04 	ldr.w	pc, [sp], #4

00006d20 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    6d20:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    6d22:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    6d24:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    6d26:	bf9c      	itt	ls
    6d28:	6880      	ldrls	r0, [r0, #8]
    6d2a:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    6d2c:	3b01      	subs	r3, #1
    6d2e:	1a98      	subs	r0, r3, r2
}
    6d30:	4770      	bx	lr

00006d32 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d36:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    6d38:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6d3c:	f8d4 c004 	ldr.w	ip, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
    6d40:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
    6d44:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
    6d46:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6d4a:	460f      	mov	r7, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6d4c:	4460      	add	r0, ip
  if (Rem > NumBytes) {
    6d4e:	d904      	bls.n	6d5a <_WriteNoCheck+0x28>
    6d50:	f000 f9f6 	bl	7140 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    6d54:	60e5      	str	r5, [r4, #12]
}
    6d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d5a:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    6d5c:	eba5 0508 	sub.w	r5, r5, r8
    6d60:	f000 f9ee 	bl	7140 <memcpy>
    6d64:	6860      	ldr	r0, [r4, #4]
    6d66:	462a      	mov	r2, r5
    6d68:	19b9      	adds	r1, r7, r6
    6d6a:	e7f1      	b.n	6d50 <_WriteNoCheck+0x1e>

00006d6c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    6d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    6d70:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    6d72:	4606      	mov	r6, r0
    6d74:	4689      	mov	r9, r1
    6d76:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    6d78:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    6d7c:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    6d7e:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6d80:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    6d82:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    6d84:	bf28      	it	cs
    6d86:	18e4      	addcs	r4, r4, r3
    6d88:	3c01      	subs	r4, #1
    6d8a:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    6d8c:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    6d8e:	42bc      	cmp	r4, r7
    6d90:	bf28      	it	cs
    6d92:	463c      	movcs	r4, r7
    6d94:	4294      	cmp	r4, r2
    6d96:	bf28      	it	cs
    6d98:	4614      	movcs	r4, r2
    6d9a:	4649      	mov	r1, r9
    6d9c:	4428      	add	r0, r5
    6d9e:	4622      	mov	r2, r4
    6da0:	f000 f9ce 	bl	7140 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    6da4:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    6da6:	4425      	add	r5, r4
      WrOff = 0u;
    6da8:	42ab      	cmp	r3, r5
    6daa:	bf08      	it	eq
    6dac:	2500      	moveq	r5, #0
  } while (NumBytes);
    6dae:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    6db0:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    6db2:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    6db4:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    6db6:	d1e1      	bne.n	6d7c <_WriteBlocking+0x10>
}
    6db8:	4640      	mov	r0, r8
    6dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006dbe <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6dbe:	f7fd be37 	b.w	4a30 <_DoInit>

00006dc2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6dc2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6dc4:	f7ff fffb 	bl	6dbe <SEGGER_RTT_Init>

	return 0;
}
    6dc8:	2000      	movs	r0, #0
    6dca:	bd08      	pop	{r3, pc}

00006dcc <z_device_state_init>:
}
    6dcc:	4770      	bx	lr

00006dce <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6dce:	b138      	cbz	r0, 6de0 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6dd0:	68c3      	ldr	r3, [r0, #12]
    6dd2:	8818      	ldrh	r0, [r3, #0]
    6dd4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6dd8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6ddc:	4258      	negs	r0, r3
    6dde:	4158      	adcs	r0, r3
}
    6de0:	4770      	bx	lr

00006de2 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    6de2:	f000 b9ce 	b.w	7182 <memset>

00006de6 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6de6:	f000 b9ab 	b.w	7140 <memcpy>

00006dea <k_mem_slab_init>:
{
    6dea:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    6dec:	2400      	movs	r4, #0
    6dee:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    6df0:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6df2:	ea41 0402 	orr.w	r4, r1, r2
    6df6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    6dfa:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    6dfe:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6e00:	d10c      	bne.n	6e1c <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    6e02:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    6e04:	42a3      	cmp	r3, r4
    6e06:	d103      	bne.n	6e10 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    6e08:	e9c0 0000 	strd	r0, r0, [r0]
}
    6e0c:	2000      	movs	r0, #0
}
    6e0e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    6e10:	6985      	ldr	r5, [r0, #24]
    6e12:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6e14:	3401      	adds	r4, #1
		slab->free_list = p;
    6e16:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    6e18:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    6e1a:	e7f3      	b.n	6e04 <k_mem_slab_init+0x1a>
		return -EINVAL;
    6e1c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    6e20:	e7f5      	b.n	6e0e <k_mem_slab_init+0x24>

00006e22 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e24:	4604      	mov	r4, r0
    6e26:	460d      	mov	r5, r1
	__asm__ volatile(
    6e28:	f04f 0320 	mov.w	r3, #32
    6e2c:	f3ef 8611 	mrs	r6, BASEPRI
    6e30:	f383 8812 	msr	BASEPRI_MAX, r3
    6e34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6e38:	6987      	ldr	r7, [r0, #24]
    6e3a:	b977      	cbnz	r7, 6e5a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6e3c:	f000 f8f6 	bl	702c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6e40:	b158      	cbz	r0, 6e5a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6e42:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6e44:	6142      	str	r2, [r0, #20]
    6e46:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6e48:	f000 f87f 	bl	6f4a <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6e4c:	4631      	mov	r1, r6
    6e4e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6e52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    6e56:	f7fe ba9d 	b.w	5394 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6e5a:	682b      	ldr	r3, [r5, #0]
    6e5c:	69a2      	ldr	r2, [r4, #24]
    6e5e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6e60:	682b      	ldr	r3, [r5, #0]
    6e62:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    6e64:	69e3      	ldr	r3, [r4, #28]
    6e66:	3b01      	subs	r3, #1
    6e68:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    6e6a:	f386 8811 	msr	BASEPRI, r6
    6e6e:	f3bf 8f6f 	isb	sy
}
    6e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006e74 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6e74:	f3ef 8005 	mrs	r0, IPSR
}
    6e78:	3800      	subs	r0, #0
    6e7a:	bf18      	it	ne
    6e7c:	2001      	movne	r0, #1
    6e7e:	4770      	bx	lr

00006e80 <z_impl_k_thread_name_set>:
}
    6e80:	f06f 0057 	mvn.w	r0, #87	; 0x57
    6e84:	4770      	bx	lr

00006e86 <k_thread_name_get>:
}
    6e86:	2000      	movs	r0, #0
    6e88:	4770      	bx	lr

00006e8a <z_pm_save_idle_exit>:
{
    6e8a:	b508      	push	{r3, lr}
	pm_system_resume();
    6e8c:	f7fb f95a 	bl	2144 <pm_system_resume>
}
    6e90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6e94:	f7ff be88 	b.w	6ba8 <sys_clock_idle_exit>

00006e98 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6e98:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6e9c:	428b      	cmp	r3, r1
    6e9e:	d001      	beq.n	6ea4 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6ea0:	f7fe bbe0 	b.w	5664 <z_set_prio>
}
    6ea4:	2000      	movs	r0, #0
    6ea6:	4770      	bx	lr

00006ea8 <z_impl_k_mutex_init>:
{
    6ea8:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6eaa:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6eac:	e9c3 0002 	strd	r0, r0, [r3, #8]
    6eb0:	e9c3 3300 	strd	r3, r3, [r3]
}
    6eb4:	4770      	bx	lr

00006eb6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    6eb6:	b13a      	cbz	r2, 6ec8 <z_impl_k_sem_init+0x12>
    6eb8:	428a      	cmp	r2, r1
    6eba:	d305      	bcc.n	6ec8 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    6ebc:	e9c0 1202 	strd	r1, r2, [r0, #8]
    6ec0:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    6ec4:	2000      	movs	r0, #0
    6ec6:	4770      	bx	lr
		return -EINVAL;
    6ec8:	f06f 0015 	mvn.w	r0, #21
}
    6ecc:	4770      	bx	lr

00006ece <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    6ece:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6ed2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6ed4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6ed6:	2300      	movs	r3, #0
	node->prev = NULL;
    6ed8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6edc:	4770      	bx	lr

00006ede <unpend_thread_no_timeout>:
{
    6ede:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6ee0:	f7ff fff5 	bl	6ece <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6ee4:	7b43      	ldrb	r3, [r0, #13]
    6ee6:	f023 0302 	bic.w	r3, r3, #2
    6eea:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    6eec:	2300      	movs	r3, #0
    6eee:	6083      	str	r3, [r0, #8]
}
    6ef0:	bd08      	pop	{r3, pc}

00006ef2 <z_unpend_thread_no_timeout>:
{
    6ef2:	b508      	push	{r3, lr}
	__asm__ volatile(
    6ef4:	f04f 0320 	mov.w	r3, #32
    6ef8:	f3ef 8111 	mrs	r1, BASEPRI
    6efc:	f383 8812 	msr	BASEPRI_MAX, r3
    6f00:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    6f04:	f7ff ffeb 	bl	6ede <unpend_thread_no_timeout>
	__asm__ volatile(
    6f08:	f381 8811 	msr	BASEPRI, r1
    6f0c:	f3bf 8f6f 	isb	sy
}
    6f10:	bd08      	pop	{r3, pc}

00006f12 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6f12:	4603      	mov	r3, r0
    6f14:	b920      	cbnz	r0, 6f20 <z_reschedule_irqlock+0xe>
    6f16:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    6f1a:	b90a      	cbnz	r2, 6f20 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    6f1c:	f7fb bbc4 	b.w	26a8 <arch_swap>
    6f20:	f383 8811 	msr	BASEPRI, r3
    6f24:	f3bf 8f6f 	isb	sy
}
    6f28:	4770      	bx	lr

00006f2a <z_reschedule_unlocked>:
	__asm__ volatile(
    6f2a:	f04f 0320 	mov.w	r3, #32
    6f2e:	f3ef 8011 	mrs	r0, BASEPRI
    6f32:	f383 8812 	msr	BASEPRI_MAX, r3
    6f36:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6f3a:	f7ff bfea 	b.w	6f12 <z_reschedule_irqlock>

00006f3e <z_priq_dumb_best>:
{
    6f3e:	4603      	mov	r3, r0
	return list->head == list;
    6f40:	6800      	ldr	r0, [r0, #0]
}
    6f42:	4283      	cmp	r3, r0
    6f44:	bf08      	it	eq
    6f46:	2000      	moveq	r0, #0
    6f48:	4770      	bx	lr

00006f4a <z_ready_thread>:
{
    6f4a:	b510      	push	{r4, lr}
    6f4c:	f04f 0320 	mov.w	r3, #32
    6f50:	f3ef 8411 	mrs	r4, BASEPRI
    6f54:	f383 8812 	msr	BASEPRI_MAX, r3
    6f58:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    6f5c:	f7fe fadc 	bl	5518 <ready_thread>
	__asm__ volatile(
    6f60:	f384 8811 	msr	BASEPRI, r4
    6f64:	f3bf 8f6f 	isb	sy
}
    6f68:	bd10      	pop	{r4, pc}

00006f6a <z_thread_timeout>:
{
    6f6a:	b510      	push	{r4, lr}
    6f6c:	4601      	mov	r1, r0
	__asm__ volatile(
    6f6e:	f04f 0320 	mov.w	r3, #32
    6f72:	f3ef 8411 	mrs	r4, BASEPRI
    6f76:	f383 8812 	msr	BASEPRI_MAX, r3
    6f7a:	f3bf 8f6f 	isb	sy
		if (!killed) {
    6f7e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6f82:	f013 0f28 	tst.w	r3, #40	; 0x28
    6f86:	d10d      	bne.n	6fa4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    6f88:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6f8c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    6f8e:	b10b      	cbz	r3, 6f94 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    6f90:	f7ff ffa5 	bl	6ede <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6f94:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    6f98:	f023 0314 	bic.w	r3, r3, #20
    6f9c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    6fa0:	f7fe faba 	bl	5518 <ready_thread>
	__asm__ volatile(
    6fa4:	f384 8811 	msr	BASEPRI, r4
    6fa8:	f3bf 8f6f 	isb	sy
}
    6fac:	bd10      	pop	{r4, pc}

00006fae <add_to_waitq_locked>:
{
    6fae:	b538      	push	{r3, r4, r5, lr}
    6fb0:	4604      	mov	r4, r0
    6fb2:	460d      	mov	r5, r1
	unready_thread(thread);
    6fb4:	f7fe fb04 	bl	55c0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6fb8:	7b63      	ldrb	r3, [r4, #13]
    6fba:	f043 0302 	orr.w	r3, r3, #2
    6fbe:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6fc0:	b195      	cbz	r5, 6fe8 <add_to_waitq_locked+0x3a>
    6fc2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    6fc4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fc6:	429d      	cmp	r5, r3
    6fc8:	d015      	beq.n	6ff6 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6fca:	b1a3      	cbz	r3, 6ff6 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    6fcc:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6fd0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6fd4:	4291      	cmp	r1, r2
    6fd6:	d008      	beq.n	6fea <add_to_waitq_locked+0x3c>
		return b2 - b1;
    6fd8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6fda:	2a00      	cmp	r2, #0
    6fdc:	dd05      	ble.n	6fea <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    6fde:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6fe0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6fe4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6fe6:	605c      	str	r4, [r3, #4]
}
    6fe8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6fea:	686a      	ldr	r2, [r5, #4]
    6fec:	4293      	cmp	r3, r2
    6fee:	d002      	beq.n	6ff6 <add_to_waitq_locked+0x48>
    6ff0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6ff2:	2b00      	cmp	r3, #0
    6ff4:	d1ec      	bne.n	6fd0 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    6ff6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6ff8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6ffc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6ffe:	606c      	str	r4, [r5, #4]
}
    7000:	e7f2      	b.n	6fe8 <add_to_waitq_locked+0x3a>

00007002 <z_unpend1_no_timeout>:
{
    7002:	b510      	push	{r4, lr}
	__asm__ volatile(
    7004:	f04f 0320 	mov.w	r3, #32
    7008:	f3ef 8411 	mrs	r4, BASEPRI
    700c:	f383 8812 	msr	BASEPRI_MAX, r3
    7010:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    7014:	f7ff ff93 	bl	6f3e <z_priq_dumb_best>
		if (thread != NULL) {
    7018:	4601      	mov	r1, r0
    701a:	b108      	cbz	r0, 7020 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    701c:	f7ff ff5f 	bl	6ede <unpend_thread_no_timeout>
	__asm__ volatile(
    7020:	f384 8811 	msr	BASEPRI, r4
    7024:	f3bf 8f6f 	isb	sy
}
    7028:	4608      	mov	r0, r1
    702a:	bd10      	pop	{r4, pc}

0000702c <z_unpend_first_thread>:
{
    702c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    702e:	f04f 0320 	mov.w	r3, #32
    7032:	f3ef 8511 	mrs	r5, BASEPRI
    7036:	f383 8812 	msr	BASEPRI_MAX, r3
    703a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    703e:	f7ff ff7e 	bl	6f3e <z_priq_dumb_best>
		if (thread != NULL) {
    7042:	4604      	mov	r4, r0
    7044:	b120      	cbz	r0, 7050 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    7046:	f7ff ff4a 	bl	6ede <unpend_thread_no_timeout>
    704a:	3018      	adds	r0, #24
    704c:	f000 f806 	bl	705c <z_abort_timeout>
	__asm__ volatile(
    7050:	f385 8811 	msr	BASEPRI, r5
    7054:	f3bf 8f6f 	isb	sy
}
    7058:	4620      	mov	r0, r4
    705a:	bd38      	pop	{r3, r4, r5, pc}

0000705c <z_abort_timeout>:
{
    705c:	b510      	push	{r4, lr}
	__asm__ volatile(
    705e:	f04f 0220 	mov.w	r2, #32
    7062:	f3ef 8411 	mrs	r4, BASEPRI
    7066:	f382 8812 	msr	BASEPRI_MAX, r2
    706a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    706e:	6803      	ldr	r3, [r0, #0]
    7070:	b13b      	cbz	r3, 7082 <z_abort_timeout+0x26>
			remove_timeout(to);
    7072:	f7fe fcdd 	bl	5a30 <remove_timeout>
			ret = 0;
    7076:	2000      	movs	r0, #0
	__asm__ volatile(
    7078:	f384 8811 	msr	BASEPRI, r4
    707c:	f3bf 8f6f 	isb	sy
}
    7080:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7082:	f06f 0015 	mvn.w	r0, #21
    7086:	e7f7      	b.n	7078 <z_abort_timeout+0x1c>

00007088 <z_get_next_timeout_expiry>:
{
    7088:	b510      	push	{r4, lr}
	__asm__ volatile(
    708a:	f04f 0320 	mov.w	r3, #32
    708e:	f3ef 8411 	mrs	r4, BASEPRI
    7092:	f383 8812 	msr	BASEPRI_MAX, r3
    7096:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    709a:	f7fe fca3 	bl	59e4 <next_timeout>
	__asm__ volatile(
    709e:	f384 8811 	msr	BASEPRI, r4
    70a2:	f3bf 8f6f 	isb	sy
}
    70a6:	bd10      	pop	{r4, pc}

000070a8 <z_set_timeout_expiry>:
{
    70a8:	b570      	push	{r4, r5, r6, lr}
    70aa:	4604      	mov	r4, r0
    70ac:	460d      	mov	r5, r1
	__asm__ volatile(
    70ae:	f04f 0320 	mov.w	r3, #32
    70b2:	f3ef 8611 	mrs	r6, BASEPRI
    70b6:	f383 8812 	msr	BASEPRI_MAX, r3
    70ba:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    70be:	f7fe fc91 	bl	59e4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    70c2:	2801      	cmp	r0, #1
    70c4:	dd05      	ble.n	70d2 <z_set_timeout_expiry+0x2a>
    70c6:	42a0      	cmp	r0, r4
    70c8:	db03      	blt.n	70d2 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    70ca:	4629      	mov	r1, r5
    70cc:	4620      	mov	r0, r4
    70ce:	f7fc ff23 	bl	3f18 <sys_clock_set_timeout>
	__asm__ volatile(
    70d2:	f386 8811 	msr	BASEPRI, r6
    70d6:	f3bf 8f6f 	isb	sy
}
    70da:	bd70      	pop	{r4, r5, r6, pc}

000070dc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    70dc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    70de:	f7fe fd97 	bl	5c10 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    70e2:	bd08      	pop	{r3, pc}

000070e4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    70e4:	b108      	cbz	r0, 70ea <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    70e6:	f7fc b805 	b.w	30f4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    70ea:	4770      	bx	lr

000070ec <k_timer_init>:
	timer->status = 0U;
    70ec:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    70ee:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    70f2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    70f6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    70fa:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    70fe:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    7100:	6343      	str	r3, [r0, #52]	; 0x34
}
    7102:	4770      	bx	lr

00007104 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    7104:	b510      	push	{r4, lr}
    7106:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    7108:	f7ff ffa8 	bl	705c <z_abort_timeout>

	if (inactive) {
    710c:	b9b0      	cbnz	r0, 713c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    710e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7110:	b10b      	cbz	r3, 7116 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    7112:	4620      	mov	r0, r4
    7114:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    7116:	f104 0018 	add.w	r0, r4, #24
    711a:	f7ff ff72 	bl	7002 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    711e:	b168      	cbz	r0, 713c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    7120:	f7ff ff13 	bl	6f4a <z_ready_thread>
	__asm__ volatile(
    7124:	f04f 0320 	mov.w	r3, #32
    7128:	f3ef 8011 	mrs	r0, BASEPRI
    712c:	f383 8812 	msr	BASEPRI_MAX, r3
    7130:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    7134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    7138:	f7ff beeb 	b.w	6f12 <z_reschedule_irqlock>
    713c:	bd10      	pop	{r4, pc}

0000713e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    713e:	4770      	bx	lr

00007140 <memcpy>:
    7140:	440a      	add	r2, r1
    7142:	4291      	cmp	r1, r2
    7144:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7148:	d100      	bne.n	714c <memcpy+0xc>
    714a:	4770      	bx	lr
    714c:	b510      	push	{r4, lr}
    714e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7152:	f803 4f01 	strb.w	r4, [r3, #1]!
    7156:	4291      	cmp	r1, r2
    7158:	d1f9      	bne.n	714e <memcpy+0xe>
    715a:	bd10      	pop	{r4, pc}

0000715c <__memcpy_chk>:
    715c:	429a      	cmp	r2, r3
    715e:	b508      	push	{r3, lr}
    7160:	d901      	bls.n	7166 <__memcpy_chk+0xa>
    7162:	f7fb ff8b 	bl	307c <__chk_fail>
    7166:	4281      	cmp	r1, r0
    7168:	d804      	bhi.n	7174 <__memcpy_chk+0x18>
    716a:	188b      	adds	r3, r1, r2
    716c:	4298      	cmp	r0, r3
    716e:	d3f8      	bcc.n	7162 <__memcpy_chk+0x6>
    7170:	4281      	cmp	r1, r0
    7172:	d102      	bne.n	717a <__memcpy_chk+0x1e>
    7174:	1883      	adds	r3, r0, r2
    7176:	4299      	cmp	r1, r3
    7178:	d3f3      	bcc.n	7162 <__memcpy_chk+0x6>
    717a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    717e:	f7ff bfdf 	b.w	7140 <memcpy>

00007182 <memset>:
    7182:	4402      	add	r2, r0
    7184:	4603      	mov	r3, r0
    7186:	4293      	cmp	r3, r2
    7188:	d100      	bne.n	718c <memset+0xa>
    718a:	4770      	bx	lr
    718c:	f803 1b01 	strb.w	r1, [r3], #1
    7190:	e7f9      	b.n	7186 <memset+0x4>

00007192 <strcpy>:
    7192:	4603      	mov	r3, r0
    7194:	f811 2b01 	ldrb.w	r2, [r1], #1
    7198:	f803 2b01 	strb.w	r2, [r3], #1
    719c:	2a00      	cmp	r2, #0
    719e:	d1f9      	bne.n	7194 <strcpy+0x2>
    71a0:	4770      	bx	lr

000071a2 <strnlen>:
    71a2:	b510      	push	{r4, lr}
    71a4:	4602      	mov	r2, r0
    71a6:	4401      	add	r1, r0
    71a8:	428a      	cmp	r2, r1
    71aa:	4613      	mov	r3, r2
    71ac:	d003      	beq.n	71b6 <strnlen+0x14>
    71ae:	781c      	ldrb	r4, [r3, #0]
    71b0:	3201      	adds	r2, #1
    71b2:	2c00      	cmp	r4, #0
    71b4:	d1f8      	bne.n	71a8 <strnlen+0x6>
    71b6:	1a18      	subs	r0, r3, r0
    71b8:	bd10      	pop	{r4, pc}
	...

000071bc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    71bc:	f7fc bf18 	b.w	3ff0 <SystemInit>
